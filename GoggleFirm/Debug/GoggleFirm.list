
GoggleFirm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a84  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08008c20  08008c20  00018c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e70  08008e70  000201cc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e78  08008e78  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e7c  08008e7c  00018e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  08008e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a74  200001cc  0800904c  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  0800904c  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c432  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f52  00000000  00000000  0003c62e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012f0  00000000  00000000  00040580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  00041870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a5cb  00000000  00000000  000429f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001935a  00000000  00000000  0005cfbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d485  00000000  00000000  00076315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010379a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000529c  00000000  00000000  001037f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001cc 	.word	0x200001cc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008c04 	.word	0x08008c04

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001d0 	.word	0x200001d0
 80001d4:	08008c04 	.word	0x08008c04

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468c      	mov	ip, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8083 	bne.w	8000ce6 <__udivmoddi4+0x116>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d947      	bls.n	8000c76 <__udivmoddi4+0xa6>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b142      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	f1c2 0020 	rsb	r0, r2, #32
 8000bf0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4097      	lsls	r7, r2
 8000bf8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbbc f6f8 	udiv	r6, ip, r8
 8000c08:	fa1f fe87 	uxth.w	lr, r7
 8000c0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb06 f10e 	mul.w	r1, r6, lr
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 8119 	bcs.w	8000e58 <__udivmoddi4+0x288>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8116 	bls.w	8000e58 <__udivmoddi4+0x288>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8105 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8102 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c60:	eba4 040e 	sub.w	r4, r4, lr
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xaa>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d150      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c82:	1bcb      	subs	r3, r1, r7
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	2601      	movs	r6, #1
 8000c8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0xe2>
 8000cac:	428b      	cmp	r3, r1
 8000cae:	f200 80e9 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc4:	fb08 f800 	mul.w	r8, r8, r0
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x10c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x10a>
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	f200 80d9 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eba4 0408 	sub.w	r4, r4, r8
 8000ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce4:	e7bf      	b.n	8000c66 <__udivmoddi4+0x96>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <__udivmoddi4+0x282>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x1cc>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b8 	bhi.w	8000e80 <__udivmoddi4+0x2b0>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0103 	sbc.w	r1, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	468c      	mov	ip, r1
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0a8      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000d1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f603 	lsr.w	r6, r0, r3
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d36:	40d9      	lsrs	r1, r3
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f108 	mul.w	r1, r6, r8
 8000d50:	4299      	cmp	r1, r3
 8000d52:	fa04 f402 	lsl.w	r4, r4, r2
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x19c>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d5e:	f080 808d 	bcs.w	8000e7c <__udivmoddi4+0x2ac>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 808a 	bls.w	8000e7c <__udivmoddi4+0x2ac>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b281      	uxth	r1, r0
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb00 f308 	mul.w	r3, r0, r8
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8a:	d273      	bcs.n	8000e74 <__udivmoddi4+0x2a4>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d971      	bls.n	8000e74 <__udivmoddi4+0x2a4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4439      	add	r1, r7
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9a:	e778      	b.n	8000c8e <__udivmoddi4+0xbe>
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa03 f406 	lsl.w	r4, r3, r6
 8000da4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da8:	431c      	orrs	r4, r3
 8000daa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dba:	431f      	orrs	r7, r3
 8000dbc:	0c3b      	lsrs	r3, r7, #16
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fa1f f884 	uxth.w	r8, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dce:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x220>
 8000dde:	1861      	adds	r1, r4, r1
 8000de0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de4:	d248      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000de6:	458a      	cmp	sl, r1
 8000de8:	d946      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000dea:	f1a9 0902 	sub.w	r9, r9, #2
 8000dee:	4421      	add	r1, r4
 8000df0:	eba1 010a 	sub.w	r1, r1, sl
 8000df4:	b2bf      	uxth	r7, r7
 8000df6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e02:	fb00 f808 	mul.w	r8, r0, r8
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x24a>
 8000e0a:	19e7      	adds	r7, r4, r7
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e10:	d22e      	bcs.n	8000e70 <__udivmoddi4+0x2a0>
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d92c      	bls.n	8000e70 <__udivmoddi4+0x2a0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4427      	add	r7, r4
 8000e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1e:	eba7 0708 	sub.w	r7, r7, r8
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	454f      	cmp	r7, r9
 8000e28:	46c6      	mov	lr, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	d31a      	bcc.n	8000e64 <__udivmoddi4+0x294>
 8000e2e:	d017      	beq.n	8000e60 <__udivmoddi4+0x290>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x27a>
 8000e32:	ebb3 020e 	subs.w	r2, r3, lr
 8000e36:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	ea4c 0202 	orr.w	r2, ip, r2
 8000e44:	40f7      	lsrs	r7, r6
 8000e46:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e70b      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6fd      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e60:	4543      	cmp	r3, r8
 8000e62:	d2e5      	bcs.n	8000e30 <__udivmoddi4+0x260>
 8000e64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e68:	eb69 0104 	sbc.w	r1, r9, r4
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7df      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e7d2      	b.n	8000e1a <__udivmoddi4+0x24a>
 8000e74:	4660      	mov	r0, ip
 8000e76:	e78d      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	e7b9      	b.n	8000df0 <__udivmoddi4+0x220>
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	e775      	b.n	8000d6c <__udivmoddi4+0x19c>
 8000e80:	4630      	mov	r0, r6
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	4439      	add	r1, r7
 8000e8a:	e713      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	e724      	b.n	8000cdc <__udivmoddi4+0x10c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <Quat_SetAxisAndAngle>:
	res->y = q1->y + q2->y;
	res->z = q1->z + q2->z;
}

void Quat_SetAxisAndAngle( quat *q, vec3 *axis, float angle)
{
 8000e98:	b5b0      	push	{r4, r5, r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	ed87 0a01 	vstr	s0, [r7, #4]
	float l = sqrt( axis->x*axis->x + axis->y*axis->y + axis->z*axis->z);
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	ed93 7a00 	vldr	s14, [r3]
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	edd3 7a00 	vldr	s15, [r3]
 8000eb2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ec2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ec6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	edd3 6a02 	vldr	s13, [r3, #8]
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ed6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ede:	ee17 0a90 	vmov	r0, s15
 8000ee2:	f7ff fadd 	bl	80004a0 <__aeabi_f2d>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	460b      	mov	r3, r1
 8000eea:	ec43 2b10 	vmov	d0, r2, r3
 8000eee:	f006 fdbf 	bl	8007a70 <sqrt>
 8000ef2:	ec53 2b10 	vmov	r2, r3, d0
 8000ef6:	4610      	mov	r0, r2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	f7ff fe01 	bl	8000b00 <__aeabi_d2f>
 8000efe:	4603      	mov	r3, r0
 8000f00:	61fb      	str	r3, [r7, #28]

	float omega=0.5*angle;
 8000f02:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f06:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000f0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f0e:	edc7 7a06 	vstr	s15, [r7, #24]
	float s=sin(omega)/l;
 8000f12:	69b8      	ldr	r0, [r7, #24]
 8000f14:	f7ff fac4 	bl	80004a0 <__aeabi_f2d>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	ec43 2b10 	vmov	d0, r2, r3
 8000f20:	f006 fd52 	bl	80079c8 <sin>
 8000f24:	ec55 4b10 	vmov	r4, r5, d0
 8000f28:	69f8      	ldr	r0, [r7, #28]
 8000f2a:	f7ff fab9 	bl	80004a0 <__aeabi_f2d>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4620      	mov	r0, r4
 8000f34:	4629      	mov	r1, r5
 8000f36:	f7ff fc35 	bl	80007a4 <__aeabi_ddiv>
 8000f3a:	4602      	mov	r2, r0
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	4610      	mov	r0, r2
 8000f40:	4619      	mov	r1, r3
 8000f42:	f7ff fddd 	bl	8000b00 <__aeabi_d2f>
 8000f46:	4603      	mov	r3, r0
 8000f48:	617b      	str	r3, [r7, #20]
	q->x = axis->x * s;
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	ed93 7a00 	vldr	s14, [r3]
 8000f50:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	edc3 7a01 	vstr	s15, [r3, #4]
	q->y = axis->y * s;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f64:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	edc3 7a02 	vstr	s15, [r3, #8]
	q->z = axis->z * s;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f78:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	edc3 7a03 	vstr	s15, [r3, #12]
	q->w = cos(omega);
 8000f86:	69b8      	ldr	r0, [r7, #24]
 8000f88:	f7ff fa8a 	bl	80004a0 <__aeabi_f2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	ec43 2b10 	vmov	d0, r2, r3
 8000f94:	f006 fcc8 	bl	8007928 <cos>
 8000f98:	ec53 2b10 	vmov	r2, r3, d0
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f7ff fdae 	bl	8000b00 <__aeabi_d2f>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	601a      	str	r2, [r3, #0]
}
 8000faa:	bf00      	nop
 8000fac:	3720      	adds	r7, #32
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000fb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b088      	sub	sp, #32
 8000fb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fba:	f107 030c 	add.w	r3, r7, #12
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <MX_GPIO_Init+0x104>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	4a39      	ldr	r2, [pc, #228]	; (80010b8 <MX_GPIO_Init+0x104>)
 8000fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <MX_GPIO_Init+0x104>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b33      	ldr	r3, [pc, #204]	; (80010b8 <MX_GPIO_Init+0x104>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	4a32      	ldr	r2, [pc, #200]	; (80010b8 <MX_GPIO_Init+0x104>)
 8000ff0:	f043 0301 	orr.w	r3, r3, #1
 8000ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ff6:	4b30      	ldr	r3, [pc, #192]	; (80010b8 <MX_GPIO_Init+0x104>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b2c      	ldr	r3, [pc, #176]	; (80010b8 <MX_GPIO_Init+0x104>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a2b      	ldr	r2, [pc, #172]	; (80010b8 <MX_GPIO_Init+0x104>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <MX_GPIO_Init+0x104>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ICM_FSYNC_Pin|LCD_5_5V_EN_Pin, GPIO_PIN_RESET);
 800101e:	2200      	movs	r2, #0
 8001020:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001024:	4825      	ldr	r0, [pc, #148]	; (80010bc <MX_GPIO_Init+0x108>)
 8001026:	f000 ff2d 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BKLT_EN_Pin|AK_RSTN_Pin|TC_RESETN_Pin, GPIO_PIN_RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	f240 1105 	movw	r1, #261	; 0x105
 8001030:	4823      	ldr	r0, [pc, #140]	; (80010c0 <MX_GPIO_Init+0x10c>)
 8001032:	f000 ff27 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TC_VEN_GPIO_Port, TC_VEN_Pin, GPIO_PIN_SET);
 8001036:	2201      	movs	r2, #1
 8001038:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800103c:	4820      	ldr	r0, [pc, #128]	; (80010c0 <MX_GPIO_Init+0x10c>)
 800103e:	f000 ff21 	bl	8001e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PA3 */
  GPIO_InitStruct.Pin = ICM_INT_Pin|ICM_RESV_Pin|GPIO_PIN_3;
 8001042:	230b      	movs	r3, #11
 8001044:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f107 030c 	add.w	r3, r7, #12
 8001052:	4619      	mov	r1, r3
 8001054:	4819      	ldr	r0, [pc, #100]	; (80010bc <MX_GPIO_Init+0x108>)
 8001056:	f000 fd91 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ICM_FSYNC_Pin|LCD_5_5V_EN_Pin;
 800105a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800105e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001060:	2301      	movs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106c:	f107 030c 	add.w	r3, r7, #12
 8001070:	4619      	mov	r1, r3
 8001072:	4812      	ldr	r0, [pc, #72]	; (80010bc <MX_GPIO_Init+0x108>)
 8001074:	f000 fd82 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BKLT_EN_Pin|AK_RSTN_Pin|TC_VEN_Pin|TC_RESETN_Pin;
 8001078:	f244 1305 	movw	r3, #16645	; 0x4105
 800107c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107e:	2301      	movs	r3, #1
 8001080:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	480b      	ldr	r0, [pc, #44]	; (80010c0 <MX_GPIO_Init+0x10c>)
 8001092:	f000 fd73 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB5 PB9 */
  GPIO_InitStruct.Pin = BKLT_FEEDBACK_Pin|AK_DRDY_Pin|GPIO_PIN_5|GPIO_PIN_9;
 8001096:	f241 2322 	movw	r3, #4642	; 0x1222
 800109a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_GPIO_Init+0x10c>)
 80010ac:	f000 fd66 	bl	8001b7c <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400

080010c4 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80010cc:	2030      	movs	r0, #48	; 0x30
 80010ce:	f006 fbb3 	bl	8007838 <USBD_static_malloc>
 80010d2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d105      	bne.n	80010e6 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData = NULL;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80010e2:	2302      	movs	r3, #2
 80010e4:	e039      	b.n	800115a <USBD_CUSTOM_HID_Init+0x96>
  }

  pdev->pClassData = (void *)hhid;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68fa      	ldr	r2, [r7, #12]
 80010ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	7c1b      	ldrb	r3, [r3, #16]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d107      	bne.n	8001106 <USBD_CUSTOM_HID_Init+0x42>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2205      	movs	r2, #5
 80010fa:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2205      	movs	r2, #5
 8001100:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8001104:	e006      	b.n	8001114 <USBD_CUSTOM_HID_Init+0x50>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2205      	movs	r2, #5
 800110a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2205      	movs	r2, #5
 8001110:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8001114:	2302      	movs	r3, #2
 8001116:	2203      	movs	r2, #3
 8001118:	2181      	movs	r1, #129	; 0x81
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f006 fa7b 	bl	8007616 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2201      	movs	r2, #1
 8001124:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8001126:	2302      	movs	r3, #2
 8001128:	2203      	movs	r2, #3
 800112a:	2101      	movs	r1, #1
 800112c:	6878      	ldr	r0, [r7, #4]
 800112e:	f006 fa72 	bl	8007616 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2201      	movs	r2, #1
 8001136:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	2200      	movs	r2, #0
 800113e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	231c      	movs	r3, #28
 8001150:	2101      	movs	r1, #1
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f006 fb4e 	bl	80077f4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3710      	adds	r7, #16
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x50>)
 800116a:	4a13      	ldr	r2, [pc, #76]	; (80011b8 <MX_I2C1_Init+0x54>)
 800116c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001170:	4a12      	ldr	r2, [pc, #72]	; (80011bc <MX_I2C1_Init+0x58>)
 8001172:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001182:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001186:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_I2C1_Init+0x50>)
 800118a:	2200      	movs	r2, #0
 800118c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001190:	2200      	movs	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <MX_I2C1_Init+0x50>)
 8001196:	2200      	movs	r2, #0
 8001198:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_I2C1_Init+0x50>)
 800119c:	2200      	movs	r2, #0
 800119e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a0:	4804      	ldr	r0, [pc, #16]	; (80011b4 <MX_I2C1_Init+0x50>)
 80011a2:	f000 fe89 	bl	8001eb8 <HAL_I2C_Init>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011ac:	f000 f9b0 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000220 	.word	0x20000220
 80011b8:	40005400 	.word	0x40005400
 80011bc:	000186a0 	.word	0x000186a0

080011c0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C2_Init+0x50>)
 80011c6:	4a13      	ldr	r2, [pc, #76]	; (8001214 <MX_I2C2_Init+0x54>)
 80011c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C2_Init+0x50>)
 80011cc:	4a12      	ldr	r2, [pc, #72]	; (8001218 <MX_I2C2_Init+0x58>)
 80011ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C2_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_I2C2_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_I2C2_Init+0x50>)
 80011de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e4:	4b0a      	ldr	r3, [pc, #40]	; (8001210 <MX_I2C2_Init+0x50>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_I2C2_Init+0x50>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <MX_I2C2_Init+0x50>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_I2C2_Init+0x50>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_I2C2_Init+0x50>)
 80011fe:	f000 fe5b 	bl	8001eb8 <HAL_I2C_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001208:	f000 f982 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000274 	.word	0x20000274
 8001214:	40005800 	.word	0x40005800
 8001218:	000186a0 	.word	0x000186a0

0800121c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08c      	sub	sp, #48	; 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	f107 031c 	add.w	r3, r7, #28
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
 8001232:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a3a      	ldr	r2, [pc, #232]	; (8001324 <HAL_I2C_MspInit+0x108>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d12c      	bne.n	8001298 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	61bb      	str	r3, [r7, #24]
 8001242:	4b39      	ldr	r3, [pc, #228]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a38      	ldr	r2, [pc, #224]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 8001248:	f043 0302 	orr.w	r3, r3, #2
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b36      	ldr	r3, [pc, #216]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0302 	and.w	r3, r3, #2
 8001256:	61bb      	str	r3, [r7, #24]
 8001258:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800125a:	23c0      	movs	r3, #192	; 0xc0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800125e:	2312      	movs	r3, #18
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001262:	2301      	movs	r3, #1
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800126a:	2304      	movs	r3, #4
 800126c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	482d      	ldr	r0, [pc, #180]	; (800132c <HAL_I2C_MspInit+0x110>)
 8001276:	f000 fc81 	bl	8001b7c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	4b2a      	ldr	r3, [pc, #168]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a29      	ldr	r2, [pc, #164]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 8001284:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b27      	ldr	r3, [pc, #156]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001296:	e041      	b.n	800131c <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_I2C_MspInit+0x114>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d13c      	bne.n	800131c <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b20      	ldr	r3, [pc, #128]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a1f      	ldr	r2, [pc, #124]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b1d      	ldr	r3, [pc, #116]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012c4:	2312      	movs	r3, #18
 80012c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012cc:	2303      	movs	r3, #3
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80012d0:	2304      	movs	r3, #4
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d4:	f107 031c 	add.w	r3, r7, #28
 80012d8:	4619      	mov	r1, r3
 80012da:	4814      	ldr	r0, [pc, #80]	; (800132c <HAL_I2C_MspInit+0x110>)
 80012dc:	f000 fc4e 	bl	8001b7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80012e0:	2308      	movs	r3, #8
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012e4:	2312      	movs	r3, #18
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80012f0:	2309      	movs	r3, #9
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	4619      	mov	r1, r3
 80012fa:	480c      	ldr	r0, [pc, #48]	; (800132c <HAL_I2C_MspInit+0x110>)
 80012fc:	f000 fc3e 	bl	8001b7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a07      	ldr	r2, [pc, #28]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 800130a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_I2C_MspInit+0x10c>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	68fb      	ldr	r3, [r7, #12]
}
 800131c:	bf00      	nop
 800131e:	3730      	adds	r7, #48	; 0x30
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40005400 	.word	0x40005400
 8001328:	40023800 	.word	0x40023800
 800132c:	40020400 	.word	0x40020400
 8001330:	40005800 	.word	0x40005800
 8001334:	00000000 	.word	0x00000000

08001338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b090      	sub	sp, #64	; 0x40
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800133e:	f000 fa75 	bl	800182c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001342:	f000 f877 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001346:	f7ff fe35 	bl	8000fb4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800134a:	f7ff ff0b 	bl	8001164 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800134e:	f000 f9d1 	bl	80016f4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001352:	f000 f8e3 	bl	800151c <MX_SPI1_Init>
  MX_I2C2_Init();
 8001356:	f7ff ff33 	bl	80011c0 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 800135a:	f005 fe57 	bl	800700c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  USBD_CUSTOM_HID_Init(&hUsbDeviceFS);
 800135e:	4834      	ldr	r0, [pc, #208]	; (8001430 <main+0xf8>)
 8001360:	f7ff feb0 	bl	80010c4 <USBD_CUSTOM_HID_Init>
  //Currently unknown usage:
  //GPIOA, PIN 3
  //GPIOB, PINS 5, 9
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//GPIO B9 hi prevents Toshiba from receiving
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//GPIO B5 goes to light sensor, might be reset or input
  HAL_Delay(10);
 8001364:	200a      	movs	r0, #10
 8001366:	f000 fad3 	bl	8001910 <HAL_Delay>
  union {
	  float items[7];
	  uint8_t bytes[28];
  } buffer;
  quat q;
  vec3 axis = {0,1,0};
 800136a:	f04f 0300 	mov.w	r3, #0
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	60fb      	str	r3, [r7, #12]
  float angle = 0;
 800137c:	f04f 0300 	mov.w	r3, #0
 8001380:	63fb      	str	r3, [r7, #60]	; 0x3c
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Quat_SetAxisAndAngle(&q, &axis, angle);
 8001382:	1d3a      	adds	r2, r7, #4
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 800138c:	4611      	mov	r1, r2
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff fd82 	bl	8000e98 <Quat_SetAxisAndAngle>
	  angle += 0.00010471975511965977461542144610932;
 8001394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001396:	f7ff f883 	bl	80004a0 <__aeabi_f2d>
 800139a:	a321      	add	r3, pc, #132	; (adr r3, 8001420 <main+0xe8>)
 800139c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a0:	f7fe ff20 	bl	80001e4 <__adddf3>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	4610      	mov	r0, r2
 80013aa:	4619      	mov	r1, r3
 80013ac:	f7ff fba8 	bl	8000b00 <__aeabi_d2f>
 80013b0:	4603      	mov	r3, r0
 80013b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	  if(angle > 6.283185307179586476925286766559)
 80013b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013b6:	f7ff f873 	bl	80004a0 <__aeabi_f2d>
 80013ba:	a31b      	add	r3, pc, #108	; (adr r3, 8001428 <main+0xf0>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff fb56 	bl	8000a70 <__aeabi_dcmpgt>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00f      	beq.n	80013ea <main+0xb2>
		  angle -= 6.283185307179586476925286766559;
 80013ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80013cc:	f7ff f868 	bl	80004a0 <__aeabi_f2d>
 80013d0:	a315      	add	r3, pc, #84	; (adr r3, 8001428 <main+0xf0>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	f7fe ff03 	bl	80001e0 <__aeabi_dsub>
 80013da:	4602      	mov	r2, r0
 80013dc:	460b      	mov	r3, r1
 80013de:	4610      	mov	r0, r2
 80013e0:	4619      	mov	r1, r3
 80013e2:	f7ff fb8d 	bl	8000b00 <__aeabi_d2f>
 80013e6:	4603      	mov	r3, r0
 80013e8:	63fb      	str	r3, [r7, #60]	; 0x3c
	    // Send HID report
	    buffer.items[0] = q.w;	//w
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	623b      	str	r3, [r7, #32]
	    buffer.items[1] = q.x;	//x
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
	    buffer.items[2] = q.y;	//y
 80013f2:	69bb      	ldr	r3, [r7, #24]
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
	    buffer.items[3] = q.z;	//z
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	    buffer.items[4] = 0;	//vx
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	633b      	str	r3, [r7, #48]	; 0x30
	    buffer.items[5] = 0;	//vy
 8001400:	f04f 0300 	mov.w	r3, #0
 8001404:	637b      	str	r3, [r7, #52]	; 0x34
	    buffer.items[6] = 0;	//vz
 8001406:	f04f 0300 	mov.w	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38

	    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buffer.bytes, sizeof(buffer));
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	221c      	movs	r2, #28
 8001412:	4619      	mov	r1, r3
 8001414:	4806      	ldr	r0, [pc, #24]	; (8001430 <main+0xf8>)
 8001416:	f004 fb9b 	bl	8005b50 <USBD_CUSTOM_HID_SendReport>
	  Quat_SetAxisAndAngle(&q, &axis, angle);
 800141a:	e7b2      	b.n	8001382 <main+0x4a>
 800141c:	f3af 8000 	nop.w
 8001420:	b1a5ceae 	.word	0xb1a5ceae
 8001424:	3f1b739f 	.word	0x3f1b739f
 8001428:	54442d18 	.word	0x54442d18
 800142c:	401921fb 	.word	0x401921fb
 8001430:	20000368 	.word	0x20000368

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	; 0x50
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2230      	movs	r2, #48	; 0x30
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f006 fa66 	bl	8007914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b2a      	ldr	r3, [pc, #168]	; (8001508 <SystemClock_Config+0xd4>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001460:	4a29      	ldr	r2, [pc, #164]	; (8001508 <SystemClock_Config+0xd4>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	; 0x40
 8001468:	4b27      	ldr	r3, [pc, #156]	; (8001508 <SystemClock_Config+0xd4>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <SystemClock_Config+0xd8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001480:	4a22      	ldr	r2, [pc, #136]	; (800150c <SystemClock_Config+0xd8>)
 8001482:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b20      	ldr	r3, [pc, #128]	; (800150c <SystemClock_Config+0xd8>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8001494:	2303      	movs	r3, #3
 8001496:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001498:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800149e:	2301      	movs	r3, #1
 80014a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a2:	2310      	movs	r3, #16
 80014a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a6:	2302      	movs	r3, #2
 80014a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80014b0:	2306      	movs	r3, #6
 80014b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80014b4:	2348      	movs	r3, #72	; 0x48
 80014b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80014bc:	2303      	movs	r3, #3
 80014be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014c0:	f107 0320 	add.w	r3, r7, #32
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 ffa7 	bl	8003418 <HAL_RCC_OscConfig>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d001      	beq.n	80014d4 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80014d0:	f000 f81e 	bl	8001510 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014d4:	230f      	movs	r3, #15
 80014d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d8:	2300      	movs	r3, #0
 80014da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014e0:	2300      	movs	r3, #0
 80014e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e8:	f107 030c 	add.w	r3, r7, #12
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f002 fa0a 	bl	8003908 <HAL_RCC_ClockConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80014fa:	f000 f809 	bl	8001510 <Error_Handler>
  }
}
 80014fe:	bf00      	nop
 8001500:	3750      	adds	r7, #80	; 0x50
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800
 800150c:	40007000 	.word	0x40007000

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001514:	b672      	cpsid	i
}
 8001516:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001518:	e7fe      	b.n	8001518 <Error_Handler+0x8>
	...

0800151c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_SPI1_Init+0x64>)
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MX_SPI1_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI1_Init+0x64>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI1_Init+0x64>)
 8001548:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800154c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI1_Init+0x64>)
 8001550:	2200      	movs	r2, #0
 8001552:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI1_Init+0x64>)
 8001568:	220a      	movs	r2, #10
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_SPI1_Init+0x64>)
 800156e:	f002 fb9b 	bl	8003ca8 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001578:	f7ff ffca 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200002c8 	.word	0x200002c8
 8001584:	40013000 	.word	0x40013000

08001588 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b08a      	sub	sp, #40	; 0x28
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0314 	add.w	r3, r7, #20
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a19      	ldr	r2, [pc, #100]	; (800160c <HAL_SPI_MspInit+0x84>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d12b      	bne.n	8001602 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	4b18      	ldr	r3, [pc, #96]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b2:	4a17      	ldr	r2, [pc, #92]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80015b8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015c2:	613b      	str	r3, [r7, #16]
 80015c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a10      	ldr	r2, [pc, #64]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b0e      	ldr	r3, [pc, #56]	; (8001610 <HAL_SPI_MspInit+0x88>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
 80015e0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015e2:	23f0      	movs	r3, #240	; 0xf0
 80015e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ee:	2303      	movs	r3, #3
 80015f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015f2:	2305      	movs	r3, #5
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <HAL_SPI_MspInit+0x8c>)
 80015fe:	f000 fabd 	bl	8001b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001602:	bf00      	nop
 8001604:	3728      	adds	r7, #40	; 0x28
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40013000 	.word	0x40013000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	4b10      	ldr	r3, [pc, #64]	; (8001664 <HAL_MspInit+0x4c>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a0f      	ldr	r2, [pc, #60]	; (8001664 <HAL_MspInit+0x4c>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b0d      	ldr	r3, [pc, #52]	; (8001664 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	603b      	str	r3, [r7, #0]
 800163e:	4b09      	ldr	r3, [pc, #36]	; (8001664 <HAL_MspInit+0x4c>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_MspInit+0x4c>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b06      	ldr	r3, [pc, #24]	; (8001664 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	603b      	str	r3, [r7, #0]
 8001654:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001656:	bf00      	nop
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40023800 	.word	0x40023800

08001668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800166c:	e7fe      	b.n	800166c <NMI_Handler+0x4>

0800166e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001672:	e7fe      	b.n	8001672 <HardFault_Handler+0x4>

08001674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <MemManage_Handler+0x4>

0800167a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <BusFault_Handler+0x4>

08001680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <UsageFault_Handler+0x4>

08001686 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001698:	bf00      	nop
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016b4:	f000 f90c 	bl	80018d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}

080016bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016c0:	4802      	ldr	r0, [pc, #8]	; (80016cc <OTG_FS_IRQHandler+0x10>)
 80016c2:	f000 fe8d 	bl	80023e0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000838 	.word	0x20000838

080016d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <SystemInit+0x20>)
 80016d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <SystemInit+0x20>)
 80016dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_USART1_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART1_UART_Init+0x4c>)
 800172c:	f002 fb45 	bl	8003dba <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f7ff feeb 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000320 	.word	0x20000320
 8001744:	40011000 	.word	0x40011000

08001748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a19      	ldr	r2, [pc, #100]	; (80017cc <HAL_UART_MspInit+0x84>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12c      	bne.n	80017c4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b18      	ldr	r3, [pc, #96]	; (80017d0 <HAL_UART_MspInit+0x88>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001772:	4a17      	ldr	r2, [pc, #92]	; (80017d0 <HAL_UART_MspInit+0x88>)
 8001774:	f043 0310 	orr.w	r3, r3, #16
 8001778:	6453      	str	r3, [r2, #68]	; 0x44
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <HAL_UART_MspInit+0x88>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b11      	ldr	r3, [pc, #68]	; (80017d0 <HAL_UART_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a10      	ldr	r2, [pc, #64]	; (80017d0 <HAL_UART_MspInit+0x88>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <HAL_UART_MspInit+0x88>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b4:	2307      	movs	r3, #7
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <HAL_UART_MspInit+0x8c>)
 80017c0:	f000 f9dc 	bl	8001b7c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80017c4:	bf00      	nop
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40011000 	.word	0x40011000
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40020000 	.word	0x40020000

080017d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001810 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017de:	490e      	ldr	r1, [pc, #56]	; (8001818 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e4:	e002      	b.n	80017ec <LoopCopyDataInit>

080017e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ea:	3304      	adds	r3, #4

080017ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017f0:	d3f9      	bcc.n	80017e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017f2:	4a0b      	ldr	r2, [pc, #44]	; (8001820 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f4:	4c0b      	ldr	r4, [pc, #44]	; (8001824 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f8:	e001      	b.n	80017fe <LoopFillZerobss>

080017fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017fc:	3204      	adds	r2, #4

080017fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001800:	d3fb      	bcc.n	80017fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001802:	f7ff ff65 	bl	80016d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001806:	f006 f861 	bl	80078cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800180a:	f7ff fd95 	bl	8001338 <main>
  bx  lr    
 800180e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001810:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001814:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001818:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 800181c:	08008e80 	.word	0x08008e80
  ldr r2, =_sbss
 8001820:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001824:	20000c40 	.word	0x20000c40

08001828 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001828:	e7fe      	b.n	8001828 <ADC_IRQHandler>
	...

0800182c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a0d      	ldr	r2, [pc, #52]	; (800186c <HAL_Init+0x40>)
 8001836:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800183a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800183c:	4b0b      	ldr	r3, [pc, #44]	; (800186c <HAL_Init+0x40>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0a      	ldr	r2, [pc, #40]	; (800186c <HAL_Init+0x40>)
 8001842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001846:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001848:	4b08      	ldr	r3, [pc, #32]	; (800186c <HAL_Init+0x40>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a07      	ldr	r2, [pc, #28]	; (800186c <HAL_Init+0x40>)
 800184e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001852:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001854:	2003      	movs	r0, #3
 8001856:	f000 f94f 	bl	8001af8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800185a:	2000      	movs	r0, #0
 800185c:	f000 f808 	bl	8001870 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001860:	f7ff feda 	bl	8001618 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40023c00 	.word	0x40023c00

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x54>)
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_InitTick+0x58>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001886:	fbb3 f3f1 	udiv	r3, r3, r1
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f967 	bl	8001b62 <HAL_SYSTICK_Config>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e00e      	b.n	80018bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b0f      	cmp	r3, #15
 80018a2:	d80a      	bhi.n	80018ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a4:	2200      	movs	r2, #0
 80018a6:	6879      	ldr	r1, [r7, #4]
 80018a8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ac:	f000 f92f 	bl	8001b0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <HAL_InitTick+0x5c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b6:	2300      	movs	r3, #0
 80018b8:	e000      	b.n	80018bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3708      	adds	r7, #8
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000000 	.word	0x20000000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	20000004 	.word	0x20000004

080018d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x20>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	461a      	mov	r2, r3
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x24>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4413      	add	r3, r2
 80018e0:	4a04      	ldr	r2, [pc, #16]	; (80018f4 <HAL_IncTick+0x24>)
 80018e2:	6013      	str	r3, [r2, #0]
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000008 	.word	0x20000008
 80018f4:	20000364 	.word	0x20000364

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	; (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000364 	.word	0x20000364

08001910 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001918:	f7ff ffee 	bl	80018f8 <HAL_GetTick>
 800191c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001928:	d005      	beq.n	8001936 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800192a:	4b0a      	ldr	r3, [pc, #40]	; (8001954 <HAL_Delay+0x44>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	461a      	mov	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001936:	bf00      	nop
 8001938:	f7ff ffde 	bl	80018f8 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	429a      	cmp	r2, r3
 8001946:	d8f7      	bhi.n	8001938 <HAL_Delay+0x28>
  {
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008

08001958 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800196a:	68db      	ldr	r3, [r3, #12]
 800196c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001974:	4013      	ands	r3, r2
 8001976:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <__NVIC_SetPriorityGrouping+0x44>)
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	60d3      	str	r3, [r2, #12]
}
 8001990:	bf00      	nop
 8001992:	3714      	adds	r7, #20
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <__NVIC_GetPriorityGrouping+0x18>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	f003 0307 	and.w	r3, r3, #7
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00

080019bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	4603      	mov	r3, r0
 80019c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	db0b      	blt.n	80019e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	f003 021f 	and.w	r2, r3, #31
 80019d4:	4907      	ldr	r1, [pc, #28]	; (80019f4 <__NVIC_EnableIRQ+0x38>)
 80019d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019da:	095b      	lsrs	r3, r3, #5
 80019dc:	2001      	movs	r0, #1
 80019de:	fa00 f202 	lsl.w	r2, r0, r2
 80019e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000e100 	.word	0xe000e100

080019f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b083      	sub	sp, #12
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	6039      	str	r1, [r7, #0]
 8001a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	db0a      	blt.n	8001a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	490c      	ldr	r1, [pc, #48]	; (8001a44 <__NVIC_SetPriority+0x4c>)
 8001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a16:	0112      	lsls	r2, r2, #4
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a20:	e00a      	b.n	8001a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	b2da      	uxtb	r2, r3
 8001a26:	4908      	ldr	r1, [pc, #32]	; (8001a48 <__NVIC_SetPriority+0x50>)
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	f003 030f 	and.w	r3, r3, #15
 8001a2e:	3b04      	subs	r3, #4
 8001a30:	0112      	lsls	r2, r2, #4
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	440b      	add	r3, r1
 8001a36:	761a      	strb	r2, [r3, #24]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000e100 	.word	0xe000e100
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b089      	sub	sp, #36	; 0x24
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f1c3 0307 	rsb	r3, r3, #7
 8001a66:	2b04      	cmp	r3, #4
 8001a68:	bf28      	it	cs
 8001a6a:	2304      	movcs	r3, #4
 8001a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	3304      	adds	r3, #4
 8001a72:	2b06      	cmp	r3, #6
 8001a74:	d902      	bls.n	8001a7c <NVIC_EncodePriority+0x30>
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	3b03      	subs	r3, #3
 8001a7a:	e000      	b.n	8001a7e <NVIC_EncodePriority+0x32>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	f04f 32ff 	mov.w	r2, #4294967295
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	401a      	ands	r2, r3
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9e:	43d9      	mvns	r1, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa4:	4313      	orrs	r3, r2
         );
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac4:	d301      	bcc.n	8001aca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e00f      	b.n	8001aea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aca:	4a0a      	ldr	r2, [pc, #40]	; (8001af4 <SysTick_Config+0x40>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad2:	210f      	movs	r1, #15
 8001ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad8:	f7ff ff8e 	bl	80019f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <SysTick_Config+0x40>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae2:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SysTick_Config+0x40>)
 8001ae4:	2207      	movs	r2, #7
 8001ae6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	e000e010 	.word	0xe000e010

08001af8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff ff29 	bl	8001958 <__NVIC_SetPriorityGrouping>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	4603      	mov	r3, r0
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff3e 	bl	80019a0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff8e 	bl	8001a4c <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5d 	bl	80019f8 <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff31 	bl	80019bc <__NVIC_EnableIRQ>
}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b62:	b580      	push	{r7, lr}
 8001b64:	b082      	sub	sp, #8
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f7ff ffa2 	bl	8001ab4 <SysTick_Config>
 8001b70:	4603      	mov	r3, r0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
 8001b96:	e159      	b.n	8001e4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b98:	2201      	movs	r2, #1
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	f040 8148 	bne.w	8001e46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f003 0303 	and.w	r3, r3, #3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d005      	beq.n	8001bce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d130      	bne.n	8001c30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c04:	2201      	movs	r2, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	091b      	lsrs	r3, r3, #4
 8001c1a:	f003 0201 	and.w	r2, r3, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d017      	beq.n	8001c6c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	2203      	movs	r2, #3
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	43db      	mvns	r3, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4013      	ands	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	689a      	ldr	r2, [r3, #8]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d123      	bne.n	8001cc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	08da      	lsrs	r2, r3, #3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3208      	adds	r2, #8
 8001c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	220f      	movs	r2, #15
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	08da      	lsrs	r2, r3, #3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	3208      	adds	r2, #8
 8001cba:	69b9      	ldr	r1, [r7, #24]
 8001cbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0203 	and.w	r2, r3, #3
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80a2 	beq.w	8001e46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60fb      	str	r3, [r7, #12]
 8001d06:	4b57      	ldr	r3, [pc, #348]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0a:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d10:	6453      	str	r3, [r2, #68]	; 0x44
 8001d12:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <HAL_GPIO_Init+0x2e8>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d1e:	4a52      	ldr	r2, [pc, #328]	; (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	3302      	adds	r3, #2
 8001d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	220f      	movs	r2, #15
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	4013      	ands	r3, r2
 8001d40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a49      	ldr	r2, [pc, #292]	; (8001e6c <HAL_GPIO_Init+0x2f0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x202>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a48      	ldr	r2, [pc, #288]	; (8001e70 <HAL_GPIO_Init+0x2f4>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x1fe>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a47      	ldr	r2, [pc, #284]	; (8001e74 <HAL_GPIO_Init+0x2f8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x1fa>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a46      	ldr	r2, [pc, #280]	; (8001e78 <HAL_GPIO_Init+0x2fc>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x1f6>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a45      	ldr	r2, [pc, #276]	; (8001e7c <HAL_GPIO_Init+0x300>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x1f2>
 8001d6a:	2304      	movs	r3, #4
 8001d6c:	e008      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d6e:	2307      	movs	r3, #7
 8001d70:	e006      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d72:	2303      	movs	r3, #3
 8001d74:	e004      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e002      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_GPIO_Init+0x204>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	69fa      	ldr	r2, [r7, #28]
 8001d82:	f002 0203 	and.w	r2, r2, #3
 8001d86:	0092      	lsls	r2, r2, #2
 8001d88:	4093      	lsls	r3, r2
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d90:	4935      	ldr	r1, [pc, #212]	; (8001e68 <HAL_GPIO_Init+0x2ec>)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	089b      	lsrs	r3, r3, #2
 8001d96:	3302      	adds	r3, #2
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001dc2:	4a2f      	ldr	r2, [pc, #188]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d003      	beq.n	8001dec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dec:	4a24      	ldr	r2, [pc, #144]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a1a      	ldr	r2, [pc, #104]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <HAL_GPIO_Init+0x304>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	61fb      	str	r3, [r7, #28]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b0f      	cmp	r3, #15
 8001e50:	f67f aea2 	bls.w	8001b98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	bf00      	nop
 8001e58:	3724      	adds	r7, #36	; 0x24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40013800 	.word	0x40013800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40020400 	.word	0x40020400
 8001e74:	40020800 	.word	0x40020800
 8001e78:	40020c00 	.word	0x40020c00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40013c00 	.word	0x40013c00

08001e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	807b      	strh	r3, [r7, #2]
 8001e90:	4613      	mov	r3, r2
 8001e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ea0:	e003      	b.n	8001eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ea2:	887b      	ldrh	r3, [r7, #2]
 8001ea4:	041a      	lsls	r2, r3, #16
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	619a      	str	r2, [r3, #24]
}
 8001eaa:	bf00      	nop
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
	...

08001eb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d101      	bne.n	8001eca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e12b      	b.n	8002122 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d106      	bne.n	8001ee4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff f99c 	bl	800121c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2224      	movs	r2, #36	; 0x24
 8001ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f1c:	f001 fe9c 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8001f20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4a81      	ldr	r2, [pc, #516]	; (800212c <HAL_I2C_Init+0x274>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d807      	bhi.n	8001f3c <HAL_I2C_Init+0x84>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4a80      	ldr	r2, [pc, #512]	; (8002130 <HAL_I2C_Init+0x278>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bf94      	ite	ls
 8001f34:	2301      	movls	r3, #1
 8001f36:	2300      	movhi	r3, #0
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	e006      	b.n	8001f4a <HAL_I2C_Init+0x92>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	4a7d      	ldr	r2, [pc, #500]	; (8002134 <HAL_I2C_Init+0x27c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	bf94      	ite	ls
 8001f44:	2301      	movls	r3, #1
 8001f46:	2300      	movhi	r3, #0
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e0e7      	b.n	8002122 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	4a78      	ldr	r2, [pc, #480]	; (8002138 <HAL_I2C_Init+0x280>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	0c9b      	lsrs	r3, r3, #18
 8001f5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	6a1b      	ldr	r3, [r3, #32]
 8001f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a6a      	ldr	r2, [pc, #424]	; (800212c <HAL_I2C_Init+0x274>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d802      	bhi.n	8001f8c <HAL_I2C_Init+0xd4>
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	e009      	b.n	8001fa0 <HAL_I2C_Init+0xe8>
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	4a69      	ldr	r2, [pc, #420]	; (800213c <HAL_I2C_Init+0x284>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	099b      	lsrs	r3, r3, #6
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fb2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	495c      	ldr	r1, [pc, #368]	; (800212c <HAL_I2C_Init+0x274>)
 8001fbc:	428b      	cmp	r3, r1
 8001fbe:	d819      	bhi.n	8001ff4 <HAL_I2C_Init+0x13c>
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	1e59      	subs	r1, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fce:	1c59      	adds	r1, r3, #1
 8001fd0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fd4:	400b      	ands	r3, r1
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <HAL_I2C_Init+0x138>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1e59      	subs	r1, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fee:	e051      	b.n	8002094 <HAL_I2C_Init+0x1dc>
 8001ff0:	2304      	movs	r3, #4
 8001ff2:	e04f      	b.n	8002094 <HAL_I2C_Init+0x1dc>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d111      	bne.n	8002020 <HAL_I2C_Init+0x168>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	e012      	b.n	8002046 <HAL_I2C_Init+0x18e>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	1e58      	subs	r0, r3, #1
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	460b      	mov	r3, r1
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	0099      	lsls	r1, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	3301      	adds	r3, #1
 8002038:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf0c      	ite	eq
 8002040:	2301      	moveq	r3, #1
 8002042:	2300      	movne	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <HAL_I2C_Init+0x196>
 800204a:	2301      	movs	r3, #1
 800204c:	e022      	b.n	8002094 <HAL_I2C_Init+0x1dc>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10e      	bne.n	8002074 <HAL_I2C_Init+0x1bc>
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	1e58      	subs	r0, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	460b      	mov	r3, r1
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	440b      	add	r3, r1
 8002064:	fbb0 f3f3 	udiv	r3, r0, r3
 8002068:	3301      	adds	r3, #1
 800206a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800206e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002072:	e00f      	b.n	8002094 <HAL_I2C_Init+0x1dc>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	0099      	lsls	r1, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	fbb0 f3f3 	udiv	r3, r0, r3
 800208a:	3301      	adds	r3, #1
 800208c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002090:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	6809      	ldr	r1, [r1, #0]
 8002098:	4313      	orrs	r3, r2
 800209a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	431a      	orrs	r2, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6911      	ldr	r1, [r2, #16]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68d2      	ldr	r2, [r2, #12]
 80020ce:	4311      	orrs	r1, r2
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	6812      	ldr	r2, [r2, #0]
 80020d4:	430b      	orrs	r3, r1
 80020d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	695a      	ldr	r2, [r3, #20]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0201 	orr.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2220      	movs	r2, #32
 800210e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	000186a0 	.word	0x000186a0
 8002130:	001e847f 	.word	0x001e847f
 8002134:	003d08ff 	.word	0x003d08ff
 8002138:	431bde83 	.word	0x431bde83
 800213c:	10624dd3 	.word	0x10624dd3

08002140 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002140:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002142:	b08f      	sub	sp, #60	; 0x3c
 8002144:	af0a      	add	r7, sp, #40	; 0x28
 8002146:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e10f      	b.n	8002372 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800215e:	b2db      	uxtb	r3, r3
 8002160:	2b00      	cmp	r3, #0
 8002162:	d106      	bne.n	8002172 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f005 f8af 	bl	80072d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2203      	movs	r2, #3
 8002176:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d102      	bne.n	800218c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4618      	mov	r0, r3
 8002192:	f002 f93c 	bl	800440e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	687e      	ldr	r6, [r7, #4]
 800219e:	466d      	mov	r5, sp
 80021a0:	f106 0410 	add.w	r4, r6, #16
 80021a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021b4:	1d33      	adds	r3, r6, #4
 80021b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021b8:	6838      	ldr	r0, [r7, #0]
 80021ba:	f002 f813 	bl	80041e4 <USB_CoreInit>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d005      	beq.n	80021d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2202      	movs	r2, #2
 80021c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0d0      	b.n	8002372 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f002 f92a 	bl	8004430 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
 80021e0:	e04a      	b.n	8002278 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	333d      	adds	r3, #61	; 0x3d
 80021f2:	2201      	movs	r2, #1
 80021f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	4613      	mov	r3, r2
 80021fc:	00db      	lsls	r3, r3, #3
 80021fe:	1a9b      	subs	r3, r3, r2
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	440b      	add	r3, r1
 8002204:	333c      	adds	r3, #60	; 0x3c
 8002206:	7bfa      	ldrb	r2, [r7, #15]
 8002208:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800220a:	7bfa      	ldrb	r2, [r7, #15]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	b298      	uxth	r0, r3
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	3342      	adds	r3, #66	; 0x42
 800221e:	4602      	mov	r2, r0
 8002220:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002222:	7bfa      	ldrb	r2, [r7, #15]
 8002224:	6879      	ldr	r1, [r7, #4]
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a9b      	subs	r3, r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	333f      	adds	r3, #63	; 0x3f
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002236:	7bfa      	ldrb	r2, [r7, #15]
 8002238:	6879      	ldr	r1, [r7, #4]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	1a9b      	subs	r3, r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	440b      	add	r3, r1
 8002244:	3344      	adds	r3, #68	; 0x44
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	1a9b      	subs	r3, r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	3348      	adds	r3, #72	; 0x48
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	6879      	ldr	r1, [r7, #4]
 8002262:	4613      	mov	r3, r2
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	1a9b      	subs	r3, r3, r2
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	440b      	add	r3, r1
 800226c:	3350      	adds	r3, #80	; 0x50
 800226e:	2200      	movs	r2, #0
 8002270:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3301      	adds	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	7bfa      	ldrb	r2, [r7, #15]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	429a      	cmp	r2, r3
 8002280:	d3af      	bcc.n	80021e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
 8002286:	e044      	b.n	8002312 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800229e:	7bfa      	ldrb	r2, [r7, #15]
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	4613      	mov	r3, r2
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	1a9b      	subs	r3, r3, r2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	440b      	add	r3, r1
 80022ac:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80022b0:	7bfa      	ldrb	r2, [r7, #15]
 80022b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	1a9b      	subs	r3, r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80022c6:	2200      	movs	r2, #0
 80022c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfa      	ldrb	r2, [r7, #15]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	429a      	cmp	r2, r3
 800231a:	d3b5      	bcc.n	8002288 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	687e      	ldr	r6, [r7, #4]
 8002324:	466d      	mov	r5, sp
 8002326:	f106 0410 	add.w	r4, r6, #16
 800232a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800232c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800232e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002332:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002336:	e885 0003 	stmia.w	r5, {r0, r1}
 800233a:	1d33      	adds	r3, r6, #4
 800233c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800233e:	6838      	ldr	r0, [r7, #0]
 8002340:	f002 f8a0 	bl	8004484 <USB_DevInit>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d005      	beq.n	8002356 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e00d      	b.n	8002372 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	2200      	movs	r2, #0
 800235a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 f8e8 	bl	8005540 <USB_DevDisconnect>

  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800237a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b084      	sub	sp, #16
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800238e:	2b01      	cmp	r3, #1
 8002390:	d101      	bne.n	8002396 <HAL_PCD_Start+0x1c>
 8002392:	2302      	movs	r3, #2
 8002394:	e020      	b.n	80023d8 <HAL_PCD_Start+0x5e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d109      	bne.n	80023ba <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d005      	beq.n	80023ba <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 f814 	bl	80043ec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f003 f898 	bl	80054fe <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b08d      	sub	sp, #52	; 0x34
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f003 f956 	bl	80056a8 <USB_GetMode>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f040 839d 	bne.w	8002b3e <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f003 f8ba 	bl	8005582 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8393 	beq.w	8002b3c <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f003 f8b1 	bl	8005582 <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b02      	cmp	r3, #2
 8002428:	d107      	bne.n	800243a <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695a      	ldr	r2, [r3, #20]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f002 0202 	and.w	r2, r2, #2
 8002438:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f003 f89f 	bl	8005582 <USB_ReadInterrupts>
 8002444:	4603      	mov	r3, r0
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b10      	cmp	r3, #16
 800244c:	d161      	bne.n	8002512 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699a      	ldr	r2, [r3, #24]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 0210 	bic.w	r2, r2, #16
 800245c:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	f003 020f 	and.w	r2, r3, #15
 800246a:	4613      	mov	r3, r2
 800246c:	00db      	lsls	r3, r3, #3
 800246e:	1a9b      	subs	r3, r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	3304      	adds	r3, #4
 800247c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	0c5b      	lsrs	r3, r3, #17
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	2b02      	cmp	r3, #2
 8002488:	d124      	bne.n	80024d4 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002490:	4013      	ands	r3, r2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d035      	beq.n	8002502 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80024a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	461a      	mov	r2, r3
 80024a8:	6a38      	ldr	r0, [r7, #32]
 80024aa:	f002 ff05 	bl	80052b8 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	68da      	ldr	r2, [r3, #12]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024ba:	441a      	add	r2, r3
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	699a      	ldr	r2, [r3, #24]
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024cc:	441a      	add	r2, r3
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	619a      	str	r2, [r3, #24]
 80024d2:	e016      	b.n	8002502 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80024d4:	69bb      	ldr	r3, [r7, #24]
 80024d6:	0c5b      	lsrs	r3, r3, #17
 80024d8:	f003 030f 	and.w	r3, r3, #15
 80024dc:	2b06      	cmp	r3, #6
 80024de:	d110      	bne.n	8002502 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024e6:	2208      	movs	r2, #8
 80024e8:	4619      	mov	r1, r3
 80024ea:	6a38      	ldr	r0, [r7, #32]
 80024ec:	f002 fee4 	bl	80052b8 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024fc:	441a      	add	r2, r3
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699a      	ldr	r2, [r3, #24]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0210 	orr.w	r2, r2, #16
 8002510:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f003 f833 	bl	8005582 <USB_ReadInterrupts>
 800251c:	4603      	mov	r3, r0
 800251e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002522:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002526:	d16e      	bne.n	8002606 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002528:	2300      	movs	r3, #0
 800252a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4618      	mov	r0, r3
 8002532:	f003 f839 	bl	80055a8 <USB_ReadDevAllOutEpInterrupt>
 8002536:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002538:	e062      	b.n	8002600 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800253a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	d057      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f003 f85e 	bl	8005610 <USB_ReadDevOutEPInterrupt>
 8002554:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00c      	beq.n	800257a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	4413      	add	r3, r2
 8002568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800256c:	461a      	mov	r2, r3
 800256e:	2301      	movs	r3, #1
 8002570:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002572:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fd99 	bl	80030ac <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00c      	beq.n	800259e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	015a      	lsls	r2, r3, #5
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002590:	461a      	mov	r2, r3
 8002592:	2308      	movs	r3, #8
 8002594:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002596:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f000 fe93 	bl	80032c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80025a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025aa:	015a      	lsls	r2, r3, #5
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025b4:	461a      	mov	r2, r3
 80025b6:	2310      	movs	r3, #16
 80025b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	f003 0320 	and.w	r3, r3, #32
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d008      	beq.n	80025d6 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025d0:	461a      	mov	r2, r3
 80025d2:	2320      	movs	r3, #32
 80025d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d009      	beq.n	80025f4 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	015a      	lsls	r2, r3, #5
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ec:	461a      	mov	r2, r3
 80025ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025f2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	3301      	adds	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fc:	085b      	lsrs	r3, r3, #1
 80025fe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002602:	2b00      	cmp	r3, #0
 8002604:	d199      	bne.n	800253a <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4618      	mov	r0, r3
 800260c:	f002 ffb9 	bl	8005582 <USB_ReadInterrupts>
 8002610:	4603      	mov	r3, r0
 8002612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002616:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800261a:	f040 80c0 	bne.w	800279e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4618      	mov	r0, r3
 8002624:	f002 ffda 	bl	80055dc <USB_ReadDevAllInEpInterrupt>
 8002628:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800262e:	e0b2      	b.n	8002796 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80a7 	beq.w	800278a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	b2d2      	uxtb	r2, r2
 8002644:	4611      	mov	r1, r2
 8002646:	4618      	mov	r0, r3
 8002648:	f003 f800 	bl	800564c <USB_ReadDevInEPInterrupt>
 800264c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	2b00      	cmp	r3, #0
 8002656:	d057      	beq.n	8002708 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	2201      	movs	r2, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800266c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	43db      	mvns	r3, r3
 8002672:	69f9      	ldr	r1, [r7, #28]
 8002674:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002678:	4013      	ands	r3, r2
 800267a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	461a      	mov	r2, r3
 800268a:	2301      	movs	r3, #1
 800268c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d132      	bne.n	80026fc <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	3348      	adds	r3, #72	; 0x48
 80026a6:	6819      	ldr	r1, [r3, #0]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	4403      	add	r3, r0
 80026b6:	3344      	adds	r3, #68	; 0x44
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4419      	add	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	1a9b      	subs	r3, r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	4403      	add	r3, r0
 80026ca:	3348      	adds	r3, #72	; 0x48
 80026cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d113      	bne.n	80026fc <HAL_PCD_IRQHandler+0x31c>
 80026d4:	6879      	ldr	r1, [r7, #4]
 80026d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3350      	adds	r3, #80	; 0x50
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d108      	bne.n	80026fc <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80026f4:	461a      	mov	r2, r3
 80026f6:	2101      	movs	r1, #1
 80026f8:	f003 f808 	bl	800570c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4619      	mov	r1, r3
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f004 fe65 	bl	80073d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800271e:	461a      	mov	r2, r3
 8002720:	2308      	movs	r3, #8
 8002722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0310 	and.w	r3, r3, #16
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273a:	461a      	mov	r2, r3
 800273c:	2310      	movs	r3, #16
 800273e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002756:	461a      	mov	r2, r3
 8002758:	2340      	movs	r3, #64	; 0x40
 800275a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002772:	461a      	mov	r2, r3
 8002774:	2302      	movs	r3, #2
 8002776:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fc03 	bl	8002f90 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	3301      	adds	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	2b00      	cmp	r3, #0
 800279a:	f47f af49 	bne.w	8002630 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f002 feed 	bl	8005582 <USB_ReadInterrupts>
 80027a8:	4603      	mov	r3, r0
 80027aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80027ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80027b2:	d122      	bne.n	80027fa <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	69fa      	ldr	r2, [r7, #28]
 80027be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d108      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027da:	2100      	movs	r1, #0
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f000 fe0f 	bl	8003400 <HAL_PCDEx_LPM_Callback>
 80027e2:	e002      	b.n	80027ea <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f004 fe61 	bl	80074ac <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f002 febf 	bl	8005582 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800280a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800280e:	d112      	bne.n	8002836 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b01      	cmp	r3, #1
 800281e:	d102      	bne.n	8002826 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f004 fe1d 	bl	8007460 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002834:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f002 fea1 	bl	8005582 <USB_ReadInterrupts>
 8002840:	4603      	mov	r3, r0
 8002842:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800284a:	f040 80c7 	bne.w	80029dc <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800285c:	f023 0301 	bic.w	r3, r3, #1
 8002860:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2110      	movs	r1, #16
 8002868:	4618      	mov	r0, r3
 800286a:	f001 ff6f 	bl	800474c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286e:	2300      	movs	r3, #0
 8002870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002872:	e056      	b.n	8002922 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002876:	015a      	lsls	r2, r3, #5
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	4413      	add	r3, r2
 800287c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002880:	461a      	mov	r2, r3
 8002882:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002886:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	4413      	add	r3, r2
 8002890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002898:	0151      	lsls	r1, r2, #5
 800289a:	69fa      	ldr	r2, [r7, #28]
 800289c:	440a      	add	r2, r1
 800289e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028a6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b8:	0151      	lsls	r1, r2, #5
 80028ba:	69fa      	ldr	r2, [r7, #28]
 80028bc:	440a      	add	r2, r1
 80028be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ca:	015a      	lsls	r2, r3, #5
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	4413      	add	r3, r2
 80028d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d4:	461a      	mov	r2, r3
 80028d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ec:	0151      	lsls	r1, r2, #5
 80028ee:	69fa      	ldr	r2, [r7, #28]
 80028f0:	440a      	add	r2, r1
 80028f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800290c:	0151      	lsls	r1, r2, #5
 800290e:	69fa      	ldr	r2, [r7, #28]
 8002910:	440a      	add	r2, r1
 8002912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002916:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800291a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800291c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291e:	3301      	adds	r3, #1
 8002920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002928:	429a      	cmp	r2, r3
 800292a:	d3a3      	bcc.n	8002874 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	69fa      	ldr	r2, [r7, #28]
 8002936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800293a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800293e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	2b00      	cmp	r3, #0
 8002946:	d016      	beq.n	8002976 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002952:	69fa      	ldr	r2, [r7, #28]
 8002954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002958:	f043 030b 	orr.w	r3, r3, #11
 800295c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296e:	f043 030b 	orr.w	r3, r3, #11
 8002972:	6453      	str	r3, [r2, #68]	; 0x44
 8002974:	e015      	b.n	80029a2 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	69fa      	ldr	r2, [r7, #28]
 8002980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002988:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800298c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800299c:	f043 030b 	orr.w	r3, r3, #11
 80029a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	691b      	ldr	r3, [r3, #16]
 80029be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029c6:	461a      	mov	r2, r3
 80029c8:	f002 fea0 	bl	800570c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695a      	ldr	r2, [r3, #20]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f002 fdce 	bl	8005582 <USB_ReadInterrupts>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029f0:	d124      	bne.n	8002a3c <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	f002 fe64 	bl	80056c4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f001 ff04 	bl	800480e <USB_GetDevSpeed>
 8002a06:	4603      	mov	r3, r0
 8002a08:	461a      	mov	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681c      	ldr	r4, [r3, #0]
 8002a12:	f001 f915 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8002a16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f001 fc41 	bl	80042a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f004 fcfb 	bl	8007422 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695a      	ldr	r2, [r3, #20]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 fd9e 	bl	8005582 <USB_ReadInterrupts>
 8002a46:	4603      	mov	r3, r0
 8002a48:	f003 0308 	and.w	r3, r3, #8
 8002a4c:	2b08      	cmp	r3, #8
 8002a4e:	d10a      	bne.n	8002a66 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f004 fcd8 	bl	8007406 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695a      	ldr	r2, [r3, #20]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f002 0208 	and.w	r2, r2, #8
 8002a64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f002 fd89 	bl	8005582 <USB_ReadInterrupts>
 8002a70:	4603      	mov	r3, r0
 8002a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a7a:	d10f      	bne.n	8002a9c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	4619      	mov	r1, r3
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f004 fd30 	bl	80074ec <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002a9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 fd6e 	bl	8005582 <USB_ReadInterrupts>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ab0:	d10f      	bne.n	8002ad2 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	4619      	mov	r1, r3
 8002abc:	6878      	ldr	r0, [r7, #4]
 8002abe:	f004 fd03 	bl	80074c8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	695a      	ldr	r2, [r3, #20]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002ad0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f002 fd53 	bl	8005582 <USB_ReadInterrupts>
 8002adc:	4603      	mov	r3, r0
 8002ade:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ae6:	d10a      	bne.n	8002afe <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f004 fd11 	bl	8007510 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	695a      	ldr	r2, [r3, #20]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002afc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f002 fd3d 	bl	8005582 <USB_ReadInterrupts>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d115      	bne.n	8002b3e <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d002      	beq.n	8002b2a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f004 fd01 	bl	800752c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	605a      	str	r2, [r3, #4]
 8002b3a:	e000      	b.n	8002b3e <HAL_PCD_IRQHandler+0x75e>
      return;
 8002b3c:	bf00      	nop
    }
  }
}
 8002b3e:	3734      	adds	r7, #52	; 0x34
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd90      	pop	{r4, r7, pc}

08002b44 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d101      	bne.n	8002b5e <HAL_PCD_SetAddress+0x1a>
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	e013      	b.n	8002b86 <HAL_PCD_SetAddress+0x42>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	78fa      	ldrb	r2, [r7, #3]
 8002b74:	4611      	mov	r1, r2
 8002b76:	4618      	mov	r0, r3
 8002b78:	f002 fc9b 	bl	80054b2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b084      	sub	sp, #16
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
 8002b96:	4608      	mov	r0, r1
 8002b98:	4611      	mov	r1, r2
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	70fb      	strb	r3, [r7, #3]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	803b      	strh	r3, [r7, #0]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	da0f      	bge.n	8002bd4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bb4:	78fb      	ldrb	r3, [r7, #3]
 8002bb6:	f003 020f 	and.w	r2, r3, #15
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	3338      	adds	r3, #56	; 0x38
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2201      	movs	r2, #1
 8002bd0:	705a      	strb	r2, [r3, #1]
 8002bd2:	e00f      	b.n	8002bf4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	f003 020f 	and.w	r2, r3, #15
 8002bda:	4613      	mov	r3, r2
 8002bdc:	00db      	lsls	r3, r3, #3
 8002bde:	1a9b      	subs	r3, r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	3304      	adds	r3, #4
 8002bec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002bf4:	78fb      	ldrb	r3, [r7, #3]
 8002bf6:	f003 030f 	and.w	r3, r3, #15
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002c00:	883a      	ldrh	r2, [r7, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	78ba      	ldrb	r2, [r7, #2]
 8002c0a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	785b      	ldrb	r3, [r3, #1]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c1e:	78bb      	ldrb	r3, [r7, #2]
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d102      	bne.n	8002c2a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_PCD_EP_Open+0xaa>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e00e      	b.n	8002c56 <HAL_PCD_EP_Open+0xc8>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f001 fe06 	bl	8004858 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002c54:	7afb      	ldrb	r3, [r7, #11]
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b084      	sub	sp, #16
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	460b      	mov	r3, r1
 8002c68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da0f      	bge.n	8002c92 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3338      	adds	r3, #56	; 0x38
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	705a      	strb	r2, [r3, #1]
 8002c90:	e00f      	b.n	8002cb2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_PCD_EP_Close+0x6e>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e00e      	b.n	8002cea <HAL_PCD_EP_Close+0x8c>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68f9      	ldr	r1, [r7, #12]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 fe44 	bl	8004968 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}

08002cf2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002cf2:	b580      	push	{r7, lr}
 8002cf4:	b086      	sub	sp, #24
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	60f8      	str	r0, [r7, #12]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d02:	7afb      	ldrb	r3, [r7, #11]
 8002d04:	f003 020f 	and.w	r2, r3, #15
 8002d08:	4613      	mov	r3, r2
 8002d0a:	00db      	lsls	r3, r3, #3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	3304      	adds	r3, #4
 8002d1a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	683a      	ldr	r2, [r7, #0]
 8002d26:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	2200      	movs	r2, #0
 8002d32:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d34:	7afb      	ldrb	r3, [r7, #11]
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d102      	bne.n	8002d4e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002d4e:	7afb      	ldrb	r3, [r7, #11]
 8002d50:	f003 030f 	and.w	r3, r3, #15
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	6979      	ldr	r1, [r7, #20]
 8002d66:	f002 f91f 	bl	8004fa8 <USB_EP0StartXfer>
 8002d6a:	e008      	b.n	8002d7e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	461a      	mov	r2, r3
 8002d78:	6979      	ldr	r1, [r7, #20]
 8002d7a:	f001 fed1 	bl	8004b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	60f8      	str	r0, [r7, #12]
 8002d90:	607a      	str	r2, [r7, #4]
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	460b      	mov	r3, r1
 8002d96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	7afb      	ldrb	r3, [r7, #11]
 8002d9a:	f003 020f 	and.w	r2, r3, #15
 8002d9e:	4613      	mov	r3, r2
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	3338      	adds	r3, #56	; 0x38
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	3304      	adds	r3, #4
 8002dae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc8:	7afb      	ldrb	r3, [r7, #11]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d102      	bne.n	8002de2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002de2:	7afb      	ldrb	r3, [r7, #11]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d109      	bne.n	8002e00 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
 8002df8:	6979      	ldr	r1, [r7, #20]
 8002dfa:	f002 f8d5 	bl	8004fa8 <USB_EP0StartXfer>
 8002dfe:	e008      	b.n	8002e12 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6818      	ldr	r0, [r3, #0]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	6979      	ldr	r1, [r7, #20]
 8002e0e:	f001 fe87 	bl	8004b20 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	f003 020f 	and.w	r2, r3, #15
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d901      	bls.n	8002e3a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e050      	b.n	8002edc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da0f      	bge.n	8002e62 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e42:	78fb      	ldrb	r3, [r7, #3]
 8002e44:	f003 020f 	and.w	r2, r3, #15
 8002e48:	4613      	mov	r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	3338      	adds	r3, #56	; 0x38
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	3304      	adds	r3, #4
 8002e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	705a      	strb	r2, [r3, #1]
 8002e60:	e00d      	b.n	8002e7e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4613      	mov	r3, r2
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	4413      	add	r3, r2
 8002e74:	3304      	adds	r3, #4
 8002e76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e84:	78fb      	ldrb	r3, [r7, #3]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d101      	bne.n	8002e9e <HAL_PCD_EP_SetStall+0x82>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	e01e      	b.n	8002edc <HAL_PCD_EP_SetStall+0xc0>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68f9      	ldr	r1, [r7, #12]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f002 fa2c 	bl	800530a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002eb2:	78fb      	ldrb	r3, [r7, #3]
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6818      	ldr	r0, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	b2d9      	uxtb	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ecc:	461a      	mov	r2, r3
 8002ece:	f002 fc1d 	bl	800570c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3710      	adds	r7, #16
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 020f 	and.w	r2, r3, #15
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d901      	bls.n	8002f02 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e042      	b.n	8002f88 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da0f      	bge.n	8002f2a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 020f 	and.w	r2, r3, #15
 8002f10:	4613      	mov	r3, r2
 8002f12:	00db      	lsls	r3, r3, #3
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	3338      	adds	r3, #56	; 0x38
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3304      	adds	r3, #4
 8002f20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	705a      	strb	r2, [r3, #1]
 8002f28:	e00f      	b.n	8002f4a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f2a:	78fb      	ldrb	r3, [r7, #3]
 8002f2c:	f003 020f 	and.w	r2, r3, #15
 8002f30:	4613      	mov	r3, r2
 8002f32:	00db      	lsls	r3, r3, #3
 8002f34:	1a9b      	subs	r3, r3, r2
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	4413      	add	r3, r2
 8002f40:	3304      	adds	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	b2da      	uxtb	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_PCD_EP_ClrStall+0x86>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e00e      	b.n	8002f88 <HAL_PCD_EP_ClrStall+0xa4>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68f9      	ldr	r1, [r7, #12]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f002 fa34 	bl	80053e6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002fa4:	683a      	ldr	r2, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	3338      	adds	r3, #56	; 0x38
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	699a      	ldr	r2, [r3, #24]
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d901      	bls.n	8002fc8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e06c      	b.n	80030a2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	695a      	ldr	r2, [r3, #20]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d902      	bls.n	8002fe4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	3303      	adds	r3, #3
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002fec:	e02b      	b.n	8003046 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	695a      	ldr	r2, [r3, #20]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	69fa      	ldr	r2, [r7, #28]
 8003000:	429a      	cmp	r2, r3
 8003002:	d902      	bls.n	800300a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3303      	adds	r3, #3
 800300e:	089b      	lsrs	r3, r3, #2
 8003010:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	68d9      	ldr	r1, [r3, #12]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	b2da      	uxtb	r2, r3
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003022:	b2db      	uxtb	r3, r3
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	4603      	mov	r3, r0
 8003028:	6978      	ldr	r0, [r7, #20]
 800302a:	f002 f910 	bl	800524e <USB_WritePacket>

    ep->xfer_buff  += len;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	441a      	add	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	699a      	ldr	r2, [r3, #24]
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	441a      	add	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	015a      	lsls	r2, r3, #5
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	4413      	add	r3, r2
 800304e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	b29b      	uxth	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	429a      	cmp	r2, r3
 800305a:	d809      	bhi.n	8003070 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003064:	429a      	cmp	r2, r3
 8003066:	d203      	bcs.n	8003070 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d1be      	bne.n	8002fee <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	429a      	cmp	r2, r3
 800307a:	d811      	bhi.n	80030a0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	2201      	movs	r2, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	43db      	mvns	r3, r3
 8003096:	6939      	ldr	r1, [r7, #16]
 8003098:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800309c:	4013      	ands	r3, r2
 800309e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3720      	adds	r7, #32
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
	...

080030ac <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	333c      	adds	r3, #60	; 0x3c
 80030c4:	3304      	adds	r3, #4
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	f040 80a0 	bne.w	8003224 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d015      	beq.n	800311a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a72      	ldr	r2, [pc, #456]	; (80032bc <PCD_EP_OutXfrComplete_int+0x210>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	f240 80dd 	bls.w	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 80d7 	beq.w	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	015a      	lsls	r2, r3, #5
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	4413      	add	r3, r2
 800310c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003110:	461a      	mov	r2, r3
 8003112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003116:	6093      	str	r3, [r2, #8]
 8003118:	e0cb      	b.n	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d009      	beq.n	8003138 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	461a      	mov	r2, r3
 8003132:	2320      	movs	r3, #32
 8003134:	6093      	str	r3, [r2, #8]
 8003136:	e0bc      	b.n	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800313e:	2b00      	cmp	r3, #0
 8003140:	f040 80b7 	bne.w	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4a5d      	ldr	r2, [pc, #372]	; (80032bc <PCD_EP_OutXfrComplete_int+0x210>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d90f      	bls.n	800316c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	015a      	lsls	r2, r3, #5
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	4413      	add	r3, r2
 800315e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003162:	461a      	mov	r2, r3
 8003164:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003168:	6093      	str	r3, [r2, #8]
 800316a:	e0a2      	b.n	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800316c:	6879      	ldr	r1, [r7, #4]
 800316e:	683a      	ldr	r2, [r7, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800317e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	0159      	lsls	r1, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	440b      	add	r3, r1
 8003188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003192:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	683a      	ldr	r2, [r7, #0]
 8003198:	4613      	mov	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4403      	add	r3, r0
 80031a2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80031a6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80031a8:	6879      	ldr	r1, [r7, #4]
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	4613      	mov	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	4403      	add	r3, r0
 80031ca:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4419      	add	r1, r3
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	4613      	mov	r3, r2
 80031d8:	00db      	lsls	r3, r3, #3
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4403      	add	r3, r0
 80031e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031e4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d114      	bne.n	8003216 <PCD_EP_OutXfrComplete_int+0x16a>
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	1a9b      	subs	r3, r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d108      	bne.n	8003216 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800320e:	461a      	mov	r2, r3
 8003210:	2101      	movs	r1, #1
 8003212:	f002 fa7b 	bl	800570c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4619      	mov	r1, r3
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f004 f8bd 	bl	800739c <HAL_PCD_DataOutStageCallback>
 8003222:	e046      	b.n	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4a26      	ldr	r2, [pc, #152]	; (80032c0 <PCD_EP_OutXfrComplete_int+0x214>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d124      	bne.n	8003276 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d00a      	beq.n	800324c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003248:	6093      	str	r3, [r2, #8]
 800324a:	e032      	b.n	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0320 	and.w	r3, r3, #32
 8003252:	2b00      	cmp	r3, #0
 8003254:	d008      	beq.n	8003268 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	015a      	lsls	r2, r3, #5
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	4413      	add	r3, r2
 800325e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003262:	461a      	mov	r2, r3
 8003264:	2320      	movs	r3, #32
 8003266:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	4619      	mov	r1, r3
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f004 f894 	bl	800739c <HAL_PCD_DataOutStageCallback>
 8003274:	e01d      	b.n	80032b2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d114      	bne.n	80032a6 <PCD_EP_OutXfrComplete_int+0x1fa>
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	4613      	mov	r3, r2
 8003282:	00db      	lsls	r3, r3, #3
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d108      	bne.n	80032a6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6818      	ldr	r0, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800329e:	461a      	mov	r2, r3
 80032a0:	2100      	movs	r1, #0
 80032a2:	f002 fa33 	bl	800570c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	4619      	mov	r1, r3
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f004 f875 	bl	800739c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}
 80032bc:	4f54300a 	.word	0x4f54300a
 80032c0:	4f54310a 	.word	0x4f54310a

080032c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
 80032cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	333c      	adds	r3, #60	; 0x3c
 80032dc:	3304      	adds	r3, #4
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	015a      	lsls	r2, r3, #5
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	4413      	add	r3, r2
 80032ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	4a15      	ldr	r2, [pc, #84]	; (800334c <PCD_EP_OutSetupPacket_int+0x88>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d90e      	bls.n	8003318 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003300:	2b00      	cmp	r3, #0
 8003302:	d009      	beq.n	8003318 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	015a      	lsls	r2, r3, #5
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	4413      	add	r3, r2
 800330c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003310:	461a      	mov	r2, r3
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	f004 f82d 	bl	8007378 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4a0a      	ldr	r2, [pc, #40]	; (800334c <PCD_EP_OutSetupPacket_int+0x88>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d90c      	bls.n	8003340 <PCD_EP_OutSetupPacket_int+0x7c>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2b01      	cmp	r3, #1
 800332c:	d108      	bne.n	8003340 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6818      	ldr	r0, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003338:	461a      	mov	r2, r3
 800333a:	2101      	movs	r1, #1
 800333c:	f002 f9e6 	bl	800570c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	4f54300a 	.word	0x4f54300a

08003350 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	70fb      	strb	r3, [r7, #3]
 800335c:	4613      	mov	r3, r2
 800335e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d107      	bne.n	800337e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800336e:	883b      	ldrh	r3, [r7, #0]
 8003370:	0419      	lsls	r1, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	430a      	orrs	r2, r1
 800337a:	629a      	str	r2, [r3, #40]	; 0x28
 800337c:	e028      	b.n	80033d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	4413      	add	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800338c:	2300      	movs	r3, #0
 800338e:	73fb      	strb	r3, [r7, #15]
 8003390:	e00d      	b.n	80033ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	3340      	adds	r3, #64	; 0x40
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	4413      	add	r3, r2
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	0c1b      	lsrs	r3, r3, #16
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	4413      	add	r3, r2
 80033a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033a8:	7bfb      	ldrb	r3, [r7, #15]
 80033aa:	3301      	adds	r3, #1
 80033ac:	73fb      	strb	r3, [r7, #15]
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	3b01      	subs	r3, #1
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d3ec      	bcc.n	8003392 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033b8:	883b      	ldrh	r3, [r7, #0]
 80033ba:	0418      	lsls	r0, r3, #16
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6819      	ldr	r1, [r3, #0]
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4302      	orrs	r2, r0
 80033c8:	3340      	adds	r3, #64	; 0x40
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
 80033e6:	460b      	mov	r3, r1
 80033e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	887a      	ldrh	r2, [r7, #2]
 80033f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	460b      	mov	r3, r1
 800340a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e264      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0301 	and.w	r3, r3, #1
 8003432:	2b00      	cmp	r3, #0
 8003434:	d075      	beq.n	8003522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003436:	4ba3      	ldr	r3, [pc, #652]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b04      	cmp	r3, #4
 8003440:	d00c      	beq.n	800345c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003442:	4ba0      	ldr	r3, [pc, #640]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800344a:	2b08      	cmp	r3, #8
 800344c:	d112      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800344e:	4b9d      	ldr	r3, [pc, #628]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800345a:	d10b      	bne.n	8003474 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	4b99      	ldr	r3, [pc, #612]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d05b      	beq.n	8003520 <HAL_RCC_OscConfig+0x108>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d157      	bne.n	8003520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e23f      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800347c:	d106      	bne.n	800348c <HAL_RCC_OscConfig+0x74>
 800347e:	4b91      	ldr	r3, [pc, #580]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a90      	ldr	r2, [pc, #576]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e01d      	b.n	80034c8 <HAL_RCC_OscConfig+0xb0>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003494:	d10c      	bne.n	80034b0 <HAL_RCC_OscConfig+0x98>
 8003496:	4b8b      	ldr	r3, [pc, #556]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a8a      	ldr	r2, [pc, #552]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	4b88      	ldr	r3, [pc, #544]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a87      	ldr	r2, [pc, #540]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ac:	6013      	str	r3, [r2, #0]
 80034ae:	e00b      	b.n	80034c8 <HAL_RCC_OscConfig+0xb0>
 80034b0:	4b84      	ldr	r3, [pc, #528]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a83      	ldr	r2, [pc, #524]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b81      	ldr	r3, [pc, #516]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a80      	ldr	r2, [pc, #512]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d0:	f7fe fa12 	bl	80018f8 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe fa0e 	bl	80018f8 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e204      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ea:	4b76      	ldr	r3, [pc, #472]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0xc0>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f8:	f7fe f9fe 	bl	80018f8 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe f9fa 	bl	80018f8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1f0      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003512:	4b6c      	ldr	r3, [pc, #432]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0xe8>
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d063      	beq.n	80035f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800352e:	4b65      	ldr	r3, [pc, #404]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00b      	beq.n	8003552 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800353a:	4b62      	ldr	r3, [pc, #392]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003542:	2b08      	cmp	r3, #8
 8003544:	d11c      	bne.n	8003580 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003546:	4b5f      	ldr	r3, [pc, #380]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d116      	bne.n	8003580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003552:	4b5c      	ldr	r3, [pc, #368]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d005      	beq.n	800356a <HAL_RCC_OscConfig+0x152>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	2b01      	cmp	r3, #1
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e1c4      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356a:	4b56      	ldr	r3, [pc, #344]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	4952      	ldr	r1, [pc, #328]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800357e:	e03a      	b.n	80035f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003588:	4b4f      	ldr	r3, [pc, #316]	; (80036c8 <HAL_RCC_OscConfig+0x2b0>)
 800358a:	2201      	movs	r2, #1
 800358c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800358e:	f7fe f9b3 	bl	80018f8 <HAL_GetTick>
 8003592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003594:	e008      	b.n	80035a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003596:	f7fe f9af 	bl	80018f8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d901      	bls.n	80035a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e1a5      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035a8:	4b46      	ldr	r3, [pc, #280]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0f0      	beq.n	8003596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b4:	4b43      	ldr	r3, [pc, #268]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4940      	ldr	r1, [pc, #256]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	600b      	str	r3, [r1, #0]
 80035c8:	e015      	b.n	80035f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035ca:	4b3f      	ldr	r3, [pc, #252]	; (80036c8 <HAL_RCC_OscConfig+0x2b0>)
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035d0:	f7fe f992 	bl	80018f8 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035d8:	f7fe f98e 	bl	80018f8 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e184      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ea:	4b36      	ldr	r3, [pc, #216]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d030      	beq.n	8003664 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d016      	beq.n	8003638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800360a:	4b30      	ldr	r3, [pc, #192]	; (80036cc <HAL_RCC_OscConfig+0x2b4>)
 800360c:	2201      	movs	r2, #1
 800360e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003610:	f7fe f972 	bl	80018f8 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003618:	f7fe f96e 	bl	80018f8 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e164      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362a:	4b26      	ldr	r3, [pc, #152]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x200>
 8003636:	e015      	b.n	8003664 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003638:	4b24      	ldr	r3, [pc, #144]	; (80036cc <HAL_RCC_OscConfig+0x2b4>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fe f95b 	bl	80018f8 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003646:	f7fe f957 	bl	80018f8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e14d      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800365a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f0      	bne.n	8003646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 0304 	and.w	r3, r3, #4
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80a0 	beq.w	80037b2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003676:	4b13      	ldr	r3, [pc, #76]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10f      	bne.n	80036a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003682:	2300      	movs	r3, #0
 8003684:	60bb      	str	r3, [r7, #8]
 8003686:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	4a0e      	ldr	r2, [pc, #56]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 800368c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003690:	6413      	str	r3, [r2, #64]	; 0x40
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <HAL_RCC_OscConfig+0x2ac>)
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369a:	60bb      	str	r3, [r7, #8]
 800369c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800369e:	2301      	movs	r3, #1
 80036a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a2:	4b0b      	ldr	r3, [pc, #44]	; (80036d0 <HAL_RCC_OscConfig+0x2b8>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d121      	bne.n	80036f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ae:	4b08      	ldr	r3, [pc, #32]	; (80036d0 <HAL_RCC_OscConfig+0x2b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a07      	ldr	r2, [pc, #28]	; (80036d0 <HAL_RCC_OscConfig+0x2b8>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ba:	f7fe f91d 	bl	80018f8 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	e011      	b.n	80036e6 <HAL_RCC_OscConfig+0x2ce>
 80036c2:	bf00      	nop
 80036c4:	40023800 	.word	0x40023800
 80036c8:	42470000 	.word	0x42470000
 80036cc:	42470e80 	.word	0x42470e80
 80036d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d4:	f7fe f910 	bl	80018f8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e106      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e6:	4b85      	ldr	r3, [pc, #532]	; (80038fc <HAL_RCC_OscConfig+0x4e4>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d0f0      	beq.n	80036d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d106      	bne.n	8003708 <HAL_RCC_OscConfig+0x2f0>
 80036fa:	4b81      	ldr	r3, [pc, #516]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80036fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fe:	4a80      	ldr	r2, [pc, #512]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003700:	f043 0301 	orr.w	r3, r3, #1
 8003704:	6713      	str	r3, [r2, #112]	; 0x70
 8003706:	e01c      	b.n	8003742 <HAL_RCC_OscConfig+0x32a>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d10c      	bne.n	800372a <HAL_RCC_OscConfig+0x312>
 8003710:	4b7b      	ldr	r3, [pc, #492]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4a7a      	ldr	r2, [pc, #488]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	6713      	str	r3, [r2, #112]	; 0x70
 800371c:	4b78      	ldr	r3, [pc, #480]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800371e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003720:	4a77      	ldr	r2, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003722:	f043 0301 	orr.w	r3, r3, #1
 8003726:	6713      	str	r3, [r2, #112]	; 0x70
 8003728:	e00b      	b.n	8003742 <HAL_RCC_OscConfig+0x32a>
 800372a:	4b75      	ldr	r3, [pc, #468]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a74      	ldr	r2, [pc, #464]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	6713      	str	r3, [r2, #112]	; 0x70
 8003736:	4b72      	ldr	r3, [pc, #456]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	4a71      	ldr	r2, [pc, #452]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800373c:	f023 0304 	bic.w	r3, r3, #4
 8003740:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d015      	beq.n	8003776 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800374a:	f7fe f8d5 	bl	80018f8 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003750:	e00a      	b.n	8003768 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003752:	f7fe f8d1 	bl	80018f8 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003760:	4293      	cmp	r3, r2
 8003762:	d901      	bls.n	8003768 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e0c5      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003768:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0ee      	beq.n	8003752 <HAL_RCC_OscConfig+0x33a>
 8003774:	e014      	b.n	80037a0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003776:	f7fe f8bf 	bl	80018f8 <HAL_GetTick>
 800377a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800377c:	e00a      	b.n	8003794 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800377e:	f7fe f8bb 	bl	80018f8 <HAL_GetTick>
 8003782:	4602      	mov	r2, r0
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	1ad3      	subs	r3, r2, r3
 8003788:	f241 3288 	movw	r2, #5000	; 0x1388
 800378c:	4293      	cmp	r3, r2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e0af      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003794:	4b5a      	ldr	r3, [pc, #360]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1ee      	bne.n	800377e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a6:	4b56      	ldr	r3, [pc, #344]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	4a55      	ldr	r2, [pc, #340]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 809b 	beq.w	80038f2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037bc:	4b50      	ldr	r3, [pc, #320]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 030c 	and.w	r3, r3, #12
 80037c4:	2b08      	cmp	r3, #8
 80037c6:	d05c      	beq.n	8003882 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d141      	bne.n	8003854 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d0:	4b4c      	ldr	r3, [pc, #304]	; (8003904 <HAL_RCC_OscConfig+0x4ec>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d6:	f7fe f88f 	bl	80018f8 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037de:	f7fe f88b 	bl	80018f8 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e081      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037f0:	4b43      	ldr	r3, [pc, #268]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1f0      	bne.n	80037de <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	019b      	lsls	r3, r3, #6
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	3b01      	subs	r3, #1
 8003816:	041b      	lsls	r3, r3, #16
 8003818:	431a      	orrs	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381e:	061b      	lsls	r3, r3, #24
 8003820:	4937      	ldr	r1, [pc, #220]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003822:	4313      	orrs	r3, r2
 8003824:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_OscConfig+0x4ec>)
 8003828:	2201      	movs	r2, #1
 800382a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800382c:	f7fe f864 	bl	80018f8 <HAL_GetTick>
 8003830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003832:	e008      	b.n	8003846 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003834:	f7fe f860 	bl	80018f8 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	2b02      	cmp	r3, #2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e056      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003846:	4b2e      	ldr	r3, [pc, #184]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0f0      	beq.n	8003834 <HAL_RCC_OscConfig+0x41c>
 8003852:	e04e      	b.n	80038f2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003854:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_OscConfig+0x4ec>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800385a:	f7fe f84d 	bl	80018f8 <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003862:	f7fe f849 	bl	80018f8 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e03f      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x44a>
 8003880:	e037      	b.n	80038f2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d101      	bne.n	800388e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e032      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800388e:	4b1c      	ldr	r3, [pc, #112]	; (8003900 <HAL_RCC_OscConfig+0x4e8>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d028      	beq.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d121      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d11a      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80038be:	4013      	ands	r3, r2
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80038c4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d111      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	085b      	lsrs	r3, r3, #1
 80038d6:	3b01      	subs	r3, #1
 80038d8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038da:	429a      	cmp	r2, r3
 80038dc:	d107      	bne.n	80038ee <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d001      	beq.n	80038f2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40007000 	.word	0x40007000
 8003900:	40023800 	.word	0x40023800
 8003904:	42470060 	.word	0x42470060

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d101      	bne.n	800391c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0cc      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800391c:	4b68      	ldr	r3, [pc, #416]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	429a      	cmp	r2, r3
 8003928:	d90c      	bls.n	8003944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392a:	4b65      	ldr	r3, [pc, #404]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	683a      	ldr	r2, [r7, #0]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003932:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0307 	and.w	r3, r3, #7
 800393a:	683a      	ldr	r2, [r7, #0]
 800393c:	429a      	cmp	r2, r3
 800393e:	d001      	beq.n	8003944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0b8      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d020      	beq.n	8003992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0304 	and.w	r3, r3, #4
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800395c:	4b59      	ldr	r3, [pc, #356]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a58      	ldr	r2, [pc, #352]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003966:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0308 	and.w	r3, r3, #8
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a52      	ldr	r2, [pc, #328]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800397e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003980:	4b50      	ldr	r3, [pc, #320]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	494d      	ldr	r1, [pc, #308]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	4313      	orrs	r3, r2
 8003990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d044      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d107      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a6:	4b47      	ldr	r3, [pc, #284]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d119      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d003      	beq.n	80039c6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039c2:	2b03      	cmp	r3, #3
 80039c4:	d107      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c6:	4b3f      	ldr	r3, [pc, #252]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e06f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d6:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e067      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b37      	ldr	r3, [pc, #220]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4934      	ldr	r1, [pc, #208]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f8:	f7fd ff7e 	bl	80018f8 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e00a      	b.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fd ff7a 	bl	80018f8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e04f      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	4b2b      	ldr	r3, [pc, #172]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 020c 	and.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d1eb      	bne.n	8003a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a28:	4b25      	ldr	r3, [pc, #148]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d20c      	bcs.n	8003a50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a36:	4b22      	ldr	r3, [pc, #136]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3e:	4b20      	ldr	r3, [pc, #128]	; (8003ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0307 	and.w	r3, r3, #7
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d001      	beq.n	8003a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e032      	b.n	8003ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a5c:	4b19      	ldr	r3, [pc, #100]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	4916      	ldr	r1, [pc, #88]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0308 	and.w	r3, r3, #8
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d009      	beq.n	8003a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	490e      	ldr	r1, [pc, #56]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a8e:	f000 f821 	bl	8003ad4 <HAL_RCC_GetSysClockFreq>
 8003a92:	4602      	mov	r2, r0
 8003a94:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	f003 030f 	and.w	r3, r3, #15
 8003a9e:	490a      	ldr	r1, [pc, #40]	; (8003ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8003aa0:	5ccb      	ldrb	r3, [r1, r3]
 8003aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa6:	4a09      	ldr	r2, [pc, #36]	; (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aaa:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f7fd fede 	bl	8001870 <HAL_InitTick>

  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3710      	adds	r7, #16
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	40023c00 	.word	0x40023c00
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	08008c80 	.word	0x08008c80
 8003acc:	20000000 	.word	0x20000000
 8003ad0:	20000004 	.word	0x20000004

08003ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ad4:	b5b0      	push	{r4, r5, r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ada:	2100      	movs	r1, #0
 8003adc:	6079      	str	r1, [r7, #4]
 8003ade:	2100      	movs	r1, #0
 8003ae0:	60f9      	str	r1, [r7, #12]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aea:	4952      	ldr	r1, [pc, #328]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003aec:	6889      	ldr	r1, [r1, #8]
 8003aee:	f001 010c 	and.w	r1, r1, #12
 8003af2:	2908      	cmp	r1, #8
 8003af4:	d00d      	beq.n	8003b12 <HAL_RCC_GetSysClockFreq+0x3e>
 8003af6:	2908      	cmp	r1, #8
 8003af8:	f200 8094 	bhi.w	8003c24 <HAL_RCC_GetSysClockFreq+0x150>
 8003afc:	2900      	cmp	r1, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_RCC_GetSysClockFreq+0x32>
 8003b00:	2904      	cmp	r1, #4
 8003b02:	d003      	beq.n	8003b0c <HAL_RCC_GetSysClockFreq+0x38>
 8003b04:	e08e      	b.n	8003c24 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b06:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x164>)
 8003b08:	60bb      	str	r3, [r7, #8]
       break;
 8003b0a:	e08e      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b0c:	4b4b      	ldr	r3, [pc, #300]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b0e:	60bb      	str	r3, [r7, #8]
      break;
 8003b10:	e08b      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b12:	4948      	ldr	r1, [pc, #288]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b14:	6849      	ldr	r1, [r1, #4]
 8003b16:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8003b1a:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b1c:	4945      	ldr	r1, [pc, #276]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b1e:	6849      	ldr	r1, [r1, #4]
 8003b20:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003b24:	2900      	cmp	r1, #0
 8003b26:	d024      	beq.n	8003b72 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b28:	4942      	ldr	r1, [pc, #264]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b2a:	6849      	ldr	r1, [r1, #4]
 8003b2c:	0989      	lsrs	r1, r1, #6
 8003b2e:	4608      	mov	r0, r1
 8003b30:	f04f 0100 	mov.w	r1, #0
 8003b34:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003b38:	f04f 0500 	mov.w	r5, #0
 8003b3c:	ea00 0204 	and.w	r2, r0, r4
 8003b40:	ea01 0305 	and.w	r3, r1, r5
 8003b44:	493d      	ldr	r1, [pc, #244]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b46:	fb01 f003 	mul.w	r0, r1, r3
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	fb01 f102 	mul.w	r1, r1, r2
 8003b50:	1844      	adds	r4, r0, r1
 8003b52:	493a      	ldr	r1, [pc, #232]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x168>)
 8003b54:	fba2 0101 	umull	r0, r1, r2, r1
 8003b58:	1863      	adds	r3, r4, r1
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	f7fd f81c 	bl	8000ba0 <__aeabi_uldivmod>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e04a      	b.n	8003c08 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b72:	4b30      	ldr	r3, [pc, #192]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	099b      	lsrs	r3, r3, #6
 8003b78:	461a      	mov	r2, r3
 8003b7a:	f04f 0300 	mov.w	r3, #0
 8003b7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b82:	f04f 0100 	mov.w	r1, #0
 8003b86:	ea02 0400 	and.w	r4, r2, r0
 8003b8a:	ea03 0501 	and.w	r5, r3, r1
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	014b      	lsls	r3, r1, #5
 8003b9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ba0:	0142      	lsls	r2, r0, #5
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	1b00      	subs	r0, r0, r4
 8003ba8:	eb61 0105 	sbc.w	r1, r1, r5
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	018b      	lsls	r3, r1, #6
 8003bb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003bba:	0182      	lsls	r2, r0, #6
 8003bbc:	1a12      	subs	r2, r2, r0
 8003bbe:	eb63 0301 	sbc.w	r3, r3, r1
 8003bc2:	f04f 0000 	mov.w	r0, #0
 8003bc6:	f04f 0100 	mov.w	r1, #0
 8003bca:	00d9      	lsls	r1, r3, #3
 8003bcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bd0:	00d0      	lsls	r0, r2, #3
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	1912      	adds	r2, r2, r4
 8003bd8:	eb45 0303 	adc.w	r3, r5, r3
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0299      	lsls	r1, r3, #10
 8003be6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bea:	0290      	lsls	r0, r2, #10
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f04f 0300 	mov.w	r3, #0
 8003bfc:	f7fc ffd0 	bl	8000ba0 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c08:	4b0a      	ldr	r3, [pc, #40]	; (8003c34 <HAL_RCC_GetSysClockFreq+0x160>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	0c1b      	lsrs	r3, r3, #16
 8003c0e:	f003 0303 	and.w	r3, r3, #3
 8003c12:	3301      	adds	r3, #1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c20:	60bb      	str	r3, [r7, #8]
      break;
 8003c22:	e002      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c24:	4b04      	ldr	r3, [pc, #16]	; (8003c38 <HAL_RCC_GetSysClockFreq+0x164>)
 8003c26:	60bb      	str	r3, [r7, #8]
      break;
 8003c28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bdb0      	pop	{r4, r5, r7, pc}
 8003c34:	40023800 	.word	0x40023800
 8003c38:	00f42400 	.word	0x00f42400
 8003c3c:	00b71b00 	.word	0x00b71b00

08003c40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c44:	4b03      	ldr	r3, [pc, #12]	; (8003c54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	20000000 	.word	0x20000000

08003c58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c5c:	f7ff fff0 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0a9b      	lsrs	r3, r3, #10
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08008c90 	.word	0x08008c90

08003c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c84:	f7ff ffdc 	bl	8003c40 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	; (8003ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0b5b      	lsrs	r3, r3, #13
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	; (8003ca4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	08008c90 	.word	0x08008c90

08003ca8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b082      	sub	sp, #8
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d101      	bne.n	8003cba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	e07b      	b.n	8003db2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d108      	bne.n	8003cd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cca:	d009      	beq.n	8003ce0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	61da      	str	r2, [r3, #28]
 8003cd2:	e005      	b.n	8003ce0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd fc44 	bl	8001588 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d16:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0302 	and.w	r3, r3, #2
 8003d3c:	431a      	orrs	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d50:	431a      	orrs	r2, r3
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d64:	ea42 0103 	orr.w	r1, r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	430a      	orrs	r2, r1
 8003d76:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0104 	and.w	r1, r3, #4
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d86:	f003 0210 	and.w	r2, r3, #16
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e03f      	b.n	8003e4c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d106      	bne.n	8003de6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003de0:	6878      	ldr	r0, [r7, #4]
 8003de2:	f7fd fcb1 	bl	8001748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2224      	movs	r2, #36	; 0x24
 8003dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68da      	ldr	r2, [r3, #12]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dfc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f828 	bl	8003e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e12:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695a      	ldr	r2, [r3, #20]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e22:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e32:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2220      	movs	r2, #32
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}

08003e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	b09f      	sub	sp, #124	; 0x7c
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6a:	68d9      	ldr	r1, [r3, #12]
 8003e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	ea40 0301 	orr.w	r3, r0, r1
 8003e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e98:	f021 010c 	bic.w	r1, r1, #12
 8003e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea2:	430b      	orrs	r3, r1
 8003ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb2:	6999      	ldr	r1, [r3, #24]
 8003eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	ea40 0301 	orr.w	r3, r0, r1
 8003ebc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4bc5      	ldr	r3, [pc, #788]	; (80041d8 <UART_SetConfig+0x384>)
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d004      	beq.n	8003ed2 <UART_SetConfig+0x7e>
 8003ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4bc3      	ldr	r3, [pc, #780]	; (80041dc <UART_SetConfig+0x388>)
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d103      	bne.n	8003eda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ed2:	f7ff fed5 	bl	8003c80 <HAL_RCC_GetPCLK2Freq>
 8003ed6:	6778      	str	r0, [r7, #116]	; 0x74
 8003ed8:	e002      	b.n	8003ee0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eda:	f7ff febd 	bl	8003c58 <HAL_RCC_GetPCLK1Freq>
 8003ede:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee8:	f040 80b6 	bne.w	8004058 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eee:	461c      	mov	r4, r3
 8003ef0:	f04f 0500 	mov.w	r5, #0
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	462b      	mov	r3, r5
 8003ef8:	1891      	adds	r1, r2, r2
 8003efa:	6439      	str	r1, [r7, #64]	; 0x40
 8003efc:	415b      	adcs	r3, r3
 8003efe:	647b      	str	r3, [r7, #68]	; 0x44
 8003f00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f04:	1912      	adds	r2, r2, r4
 8003f06:	eb45 0303 	adc.w	r3, r5, r3
 8003f0a:	f04f 0000 	mov.w	r0, #0
 8003f0e:	f04f 0100 	mov.w	r1, #0
 8003f12:	00d9      	lsls	r1, r3, #3
 8003f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f18:	00d0      	lsls	r0, r2, #3
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	1911      	adds	r1, r2, r4
 8003f20:	6639      	str	r1, [r7, #96]	; 0x60
 8003f22:	416b      	adcs	r3, r5
 8003f24:	667b      	str	r3, [r7, #100]	; 0x64
 8003f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f04f 0300 	mov.w	r3, #0
 8003f30:	1891      	adds	r1, r2, r2
 8003f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f34:	415b      	adcs	r3, r3
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003f40:	f7fc fe2e 	bl	8000ba0 <__aeabi_uldivmod>
 8003f44:	4602      	mov	r2, r0
 8003f46:	460b      	mov	r3, r1
 8003f48:	4ba5      	ldr	r3, [pc, #660]	; (80041e0 <UART_SetConfig+0x38c>)
 8003f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	011e      	lsls	r6, r3, #4
 8003f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f54:	461c      	mov	r4, r3
 8003f56:	f04f 0500 	mov.w	r5, #0
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	462b      	mov	r3, r5
 8003f5e:	1891      	adds	r1, r2, r2
 8003f60:	6339      	str	r1, [r7, #48]	; 0x30
 8003f62:	415b      	adcs	r3, r3
 8003f64:	637b      	str	r3, [r7, #52]	; 0x34
 8003f66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f6a:	1912      	adds	r2, r2, r4
 8003f6c:	eb45 0303 	adc.w	r3, r5, r3
 8003f70:	f04f 0000 	mov.w	r0, #0
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	00d9      	lsls	r1, r3, #3
 8003f7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f7e:	00d0      	lsls	r0, r2, #3
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	1911      	adds	r1, r2, r4
 8003f86:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f88:	416b      	adcs	r3, r5
 8003f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f04f 0300 	mov.w	r3, #0
 8003f96:	1891      	adds	r1, r2, r2
 8003f98:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f9a:	415b      	adcs	r3, r3
 8003f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fa2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003fa6:	f7fc fdfb 	bl	8000ba0 <__aeabi_uldivmod>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4b8c      	ldr	r3, [pc, #560]	; (80041e0 <UART_SetConfig+0x38c>)
 8003fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fb4:	095b      	lsrs	r3, r3, #5
 8003fb6:	2164      	movs	r1, #100	; 0x64
 8003fb8:	fb01 f303 	mul.w	r3, r1, r3
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	3332      	adds	r3, #50	; 0x32
 8003fc2:	4a87      	ldr	r2, [pc, #540]	; (80041e0 <UART_SetConfig+0x38c>)
 8003fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	005b      	lsls	r3, r3, #1
 8003fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fd0:	441e      	add	r6, r3
 8003fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f04f 0100 	mov.w	r1, #0
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	1894      	adds	r4, r2, r2
 8003fe0:	623c      	str	r4, [r7, #32]
 8003fe2:	415b      	adcs	r3, r3
 8003fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003fea:	1812      	adds	r2, r2, r0
 8003fec:	eb41 0303 	adc.w	r3, r1, r3
 8003ff0:	f04f 0400 	mov.w	r4, #0
 8003ff4:	f04f 0500 	mov.w	r5, #0
 8003ff8:	00dd      	lsls	r5, r3, #3
 8003ffa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ffe:	00d4      	lsls	r4, r2, #3
 8004000:	4622      	mov	r2, r4
 8004002:	462b      	mov	r3, r5
 8004004:	1814      	adds	r4, r2, r0
 8004006:	653c      	str	r4, [r7, #80]	; 0x50
 8004008:	414b      	adcs	r3, r1
 800400a:	657b      	str	r3, [r7, #84]	; 0x54
 800400c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	461a      	mov	r2, r3
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	1891      	adds	r1, r2, r2
 8004018:	61b9      	str	r1, [r7, #24]
 800401a:	415b      	adcs	r3, r3
 800401c:	61fb      	str	r3, [r7, #28]
 800401e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004022:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004026:	f7fc fdbb 	bl	8000ba0 <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4b6c      	ldr	r3, [pc, #432]	; (80041e0 <UART_SetConfig+0x38c>)
 8004030:	fba3 1302 	umull	r1, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	2164      	movs	r1, #100	; 0x64
 8004038:	fb01 f303 	mul.w	r3, r1, r3
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	3332      	adds	r3, #50	; 0x32
 8004042:	4a67      	ldr	r2, [pc, #412]	; (80041e0 <UART_SetConfig+0x38c>)
 8004044:	fba2 2303 	umull	r2, r3, r2, r3
 8004048:	095b      	lsrs	r3, r3, #5
 800404a:	f003 0207 	and.w	r2, r3, #7
 800404e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4432      	add	r2, r6
 8004054:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004056:	e0b9      	b.n	80041cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405a:	461c      	mov	r4, r3
 800405c:	f04f 0500 	mov.w	r5, #0
 8004060:	4622      	mov	r2, r4
 8004062:	462b      	mov	r3, r5
 8004064:	1891      	adds	r1, r2, r2
 8004066:	6139      	str	r1, [r7, #16]
 8004068:	415b      	adcs	r3, r3
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004070:	1912      	adds	r2, r2, r4
 8004072:	eb45 0303 	adc.w	r3, r5, r3
 8004076:	f04f 0000 	mov.w	r0, #0
 800407a:	f04f 0100 	mov.w	r1, #0
 800407e:	00d9      	lsls	r1, r3, #3
 8004080:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004084:	00d0      	lsls	r0, r2, #3
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	eb12 0804 	adds.w	r8, r2, r4
 800408e:	eb43 0905 	adc.w	r9, r3, r5
 8004092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	4618      	mov	r0, r3
 8004098:	f04f 0100 	mov.w	r1, #0
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	008b      	lsls	r3, r1, #2
 80040a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040aa:	0082      	lsls	r2, r0, #2
 80040ac:	4640      	mov	r0, r8
 80040ae:	4649      	mov	r1, r9
 80040b0:	f7fc fd76 	bl	8000ba0 <__aeabi_uldivmod>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4b49      	ldr	r3, [pc, #292]	; (80041e0 <UART_SetConfig+0x38c>)
 80040ba:	fba3 2302 	umull	r2, r3, r3, r2
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	011e      	lsls	r6, r3, #4
 80040c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c4:	4618      	mov	r0, r3
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	1894      	adds	r4, r2, r2
 80040d0:	60bc      	str	r4, [r7, #8]
 80040d2:	415b      	adcs	r3, r3
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040da:	1812      	adds	r2, r2, r0
 80040dc:	eb41 0303 	adc.w	r3, r1, r3
 80040e0:	f04f 0400 	mov.w	r4, #0
 80040e4:	f04f 0500 	mov.w	r5, #0
 80040e8:	00dd      	lsls	r5, r3, #3
 80040ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040ee:	00d4      	lsls	r4, r2, #3
 80040f0:	4622      	mov	r2, r4
 80040f2:	462b      	mov	r3, r5
 80040f4:	1814      	adds	r4, r2, r0
 80040f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80040f8:	414b      	adcs	r3, r1
 80040fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	4618      	mov	r0, r3
 8004102:	f04f 0100 	mov.w	r1, #0
 8004106:	f04f 0200 	mov.w	r2, #0
 800410a:	f04f 0300 	mov.w	r3, #0
 800410e:	008b      	lsls	r3, r1, #2
 8004110:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004114:	0082      	lsls	r2, r0, #2
 8004116:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800411a:	f7fc fd41 	bl	8000ba0 <__aeabi_uldivmod>
 800411e:	4602      	mov	r2, r0
 8004120:	460b      	mov	r3, r1
 8004122:	4b2f      	ldr	r3, [pc, #188]	; (80041e0 <UART_SetConfig+0x38c>)
 8004124:	fba3 1302 	umull	r1, r3, r3, r2
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	2164      	movs	r1, #100	; 0x64
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	1ad3      	subs	r3, r2, r3
 8004132:	011b      	lsls	r3, r3, #4
 8004134:	3332      	adds	r3, #50	; 0x32
 8004136:	4a2a      	ldr	r2, [pc, #168]	; (80041e0 <UART_SetConfig+0x38c>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004142:	441e      	add	r6, r3
 8004144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004146:	4618      	mov	r0, r3
 8004148:	f04f 0100 	mov.w	r1, #0
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	1894      	adds	r4, r2, r2
 8004152:	603c      	str	r4, [r7, #0]
 8004154:	415b      	adcs	r3, r3
 8004156:	607b      	str	r3, [r7, #4]
 8004158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800415c:	1812      	adds	r2, r2, r0
 800415e:	eb41 0303 	adc.w	r3, r1, r3
 8004162:	f04f 0400 	mov.w	r4, #0
 8004166:	f04f 0500 	mov.w	r5, #0
 800416a:	00dd      	lsls	r5, r3, #3
 800416c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004170:	00d4      	lsls	r4, r2, #3
 8004172:	4622      	mov	r2, r4
 8004174:	462b      	mov	r3, r5
 8004176:	eb12 0a00 	adds.w	sl, r2, r0
 800417a:	eb43 0b01 	adc.w	fp, r3, r1
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4618      	mov	r0, r3
 8004184:	f04f 0100 	mov.w	r1, #0
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	008b      	lsls	r3, r1, #2
 8004192:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004196:	0082      	lsls	r2, r0, #2
 8004198:	4650      	mov	r0, sl
 800419a:	4659      	mov	r1, fp
 800419c:	f7fc fd00 	bl	8000ba0 <__aeabi_uldivmod>
 80041a0:	4602      	mov	r2, r0
 80041a2:	460b      	mov	r3, r1
 80041a4:	4b0e      	ldr	r3, [pc, #56]	; (80041e0 <UART_SetConfig+0x38c>)
 80041a6:	fba3 1302 	umull	r1, r3, r3, r2
 80041aa:	095b      	lsrs	r3, r3, #5
 80041ac:	2164      	movs	r1, #100	; 0x64
 80041ae:	fb01 f303 	mul.w	r3, r1, r3
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	3332      	adds	r3, #50	; 0x32
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <UART_SetConfig+0x38c>)
 80041ba:	fba2 2303 	umull	r2, r3, r2, r3
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	f003 020f 	and.w	r2, r3, #15
 80041c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4432      	add	r2, r6
 80041ca:	609a      	str	r2, [r3, #8]
}
 80041cc:	bf00      	nop
 80041ce:	377c      	adds	r7, #124	; 0x7c
 80041d0:	46bd      	mov	sp, r7
 80041d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041d6:	bf00      	nop
 80041d8:	40011000 	.word	0x40011000
 80041dc:	40011400 	.word	0x40011400
 80041e0:	51eb851f 	.word	0x51eb851f

080041e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80041e4:	b084      	sub	sp, #16
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b084      	sub	sp, #16
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	f107 001c 	add.w	r0, r7, #28
 80041f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80041f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d122      	bne.n	8004242 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004200:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004226:	2b01      	cmp	r3, #1
 8004228:	d105      	bne.n	8004236 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f001 fac6 	bl	80057c8 <USB_CoreReset>
 800423c:	4603      	mov	r3, r0
 800423e:	73fb      	strb	r3, [r7, #15]
 8004240:	e01a      	b.n	8004278 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f001 faba 	bl	80057c8 <USB_CoreReset>
 8004254:	4603      	mov	r3, r0
 8004256:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004258:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800425a:	2b00      	cmp	r3, #0
 800425c:	d106      	bne.n	800426c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
 800426a:	e005      	b.n	8004278 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	2b01      	cmp	r3, #1
 800427c:	d10b      	bne.n	8004296 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f043 0206 	orr.w	r2, r3, #6
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f043 0220 	orr.w	r2, r3, #32
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004296:	7bfb      	ldrb	r3, [r7, #15]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3710      	adds	r7, #16
 800429c:	46bd      	mov	sp, r7
 800429e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042a2:	b004      	add	sp, #16
 80042a4:	4770      	bx	lr
	...

080042a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	4613      	mov	r3, r2
 80042b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d165      	bne.n	8004388 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4a41      	ldr	r2, [pc, #260]	; (80043c4 <USB_SetTurnaroundTime+0x11c>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d906      	bls.n	80042d2 <USB_SetTurnaroundTime+0x2a>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4a40      	ldr	r2, [pc, #256]	; (80043c8 <USB_SetTurnaroundTime+0x120>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d202      	bcs.n	80042d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80042cc:	230f      	movs	r3, #15
 80042ce:	617b      	str	r3, [r7, #20]
 80042d0:	e062      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	4a3c      	ldr	r2, [pc, #240]	; (80043c8 <USB_SetTurnaroundTime+0x120>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d306      	bcc.n	80042e8 <USB_SetTurnaroundTime+0x40>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4a3b      	ldr	r2, [pc, #236]	; (80043cc <USB_SetTurnaroundTime+0x124>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d202      	bcs.n	80042e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80042e2:	230e      	movs	r3, #14
 80042e4:	617b      	str	r3, [r7, #20]
 80042e6:	e057      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4a38      	ldr	r2, [pc, #224]	; (80043cc <USB_SetTurnaroundTime+0x124>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d306      	bcc.n	80042fe <USB_SetTurnaroundTime+0x56>
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4a37      	ldr	r2, [pc, #220]	; (80043d0 <USB_SetTurnaroundTime+0x128>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d202      	bcs.n	80042fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80042f8:	230d      	movs	r3, #13
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	e04c      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	4a33      	ldr	r2, [pc, #204]	; (80043d0 <USB_SetTurnaroundTime+0x128>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d306      	bcc.n	8004314 <USB_SetTurnaroundTime+0x6c>
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	4a32      	ldr	r2, [pc, #200]	; (80043d4 <USB_SetTurnaroundTime+0x12c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d802      	bhi.n	8004314 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800430e:	230c      	movs	r3, #12
 8004310:	617b      	str	r3, [r7, #20]
 8004312:	e041      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a2f      	ldr	r2, [pc, #188]	; (80043d4 <USB_SetTurnaroundTime+0x12c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d906      	bls.n	800432a <USB_SetTurnaroundTime+0x82>
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4a2e      	ldr	r2, [pc, #184]	; (80043d8 <USB_SetTurnaroundTime+0x130>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d802      	bhi.n	800432a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004324:	230b      	movs	r3, #11
 8004326:	617b      	str	r3, [r7, #20]
 8004328:	e036      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a2a      	ldr	r2, [pc, #168]	; (80043d8 <USB_SetTurnaroundTime+0x130>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d906      	bls.n	8004340 <USB_SetTurnaroundTime+0x98>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4a29      	ldr	r2, [pc, #164]	; (80043dc <USB_SetTurnaroundTime+0x134>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d802      	bhi.n	8004340 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800433a:	230a      	movs	r3, #10
 800433c:	617b      	str	r3, [r7, #20]
 800433e:	e02b      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a26      	ldr	r2, [pc, #152]	; (80043dc <USB_SetTurnaroundTime+0x134>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d906      	bls.n	8004356 <USB_SetTurnaroundTime+0xae>
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	4a25      	ldr	r2, [pc, #148]	; (80043e0 <USB_SetTurnaroundTime+0x138>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d202      	bcs.n	8004356 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004350:	2309      	movs	r3, #9
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e020      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4a21      	ldr	r2, [pc, #132]	; (80043e0 <USB_SetTurnaroundTime+0x138>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d306      	bcc.n	800436c <USB_SetTurnaroundTime+0xc4>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	4a20      	ldr	r2, [pc, #128]	; (80043e4 <USB_SetTurnaroundTime+0x13c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d802      	bhi.n	800436c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004366:	2308      	movs	r3, #8
 8004368:	617b      	str	r3, [r7, #20]
 800436a:	e015      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4a1d      	ldr	r2, [pc, #116]	; (80043e4 <USB_SetTurnaroundTime+0x13c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d906      	bls.n	8004382 <USB_SetTurnaroundTime+0xda>
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	4a1c      	ldr	r2, [pc, #112]	; (80043e8 <USB_SetTurnaroundTime+0x140>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d202      	bcs.n	8004382 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800437c:	2307      	movs	r3, #7
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e00a      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004382:	2306      	movs	r3, #6
 8004384:	617b      	str	r3, [r7, #20]
 8004386:	e007      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d102      	bne.n	8004394 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800438e:	2309      	movs	r3, #9
 8004390:	617b      	str	r3, [r7, #20]
 8004392:	e001      	b.n	8004398 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004394:	2309      	movs	r3, #9
 8004396:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	029b      	lsls	r3, r3, #10
 80043ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80043b0:	431a      	orrs	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	371c      	adds	r7, #28
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr
 80043c4:	00d8acbf 	.word	0x00d8acbf
 80043c8:	00e4e1c0 	.word	0x00e4e1c0
 80043cc:	00f42400 	.word	0x00f42400
 80043d0:	01067380 	.word	0x01067380
 80043d4:	011a499f 	.word	0x011a499f
 80043d8:	01312cff 	.word	0x01312cff
 80043dc:	014ca43f 	.word	0x014ca43f
 80043e0:	016e3600 	.word	0x016e3600
 80043e4:	01a6ab1f 	.word	0x01a6ab1f
 80043e8:	01e84800 	.word	0x01e84800

080043ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f043 0201 	orr.w	r2, r3, #1
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	4618      	mov	r0, r3
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f023 0201 	bic.w	r2, r3, #1
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	370c      	adds	r7, #12
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr

08004430 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d106      	bne.n	800445c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e00b      	b.n	8004474 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	60da      	str	r2, [r3, #12]
 800446e:	e001      	b.n	8004474 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e003      	b.n	800447c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004474:	2032      	movs	r0, #50	; 0x32
 8004476:	f7fd fa4b 	bl	8001910 <HAL_Delay>

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3708      	adds	r7, #8
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004484:	b084      	sub	sp, #16
 8004486:	b580      	push	{r7, lr}
 8004488:	b086      	sub	sp, #24
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
 800448e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	e009      	b.n	80044b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	3340      	adds	r3, #64	; 0x40
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	4413      	add	r3, r2
 80044ae:	2200      	movs	r2, #0
 80044b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	3301      	adds	r3, #1
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b0e      	cmp	r3, #14
 80044bc:	d9f2      	bls.n	80044a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80044be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d11c      	bne.n	80044fe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d2:	f043 0302 	orr.w	r3, r3, #2
 80044d6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	639a      	str	r2, [r3, #56]	; 0x38
 80044fc:	e00b      	b.n	8004516 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800451c:	461a      	mov	r2, r3
 800451e:	2300      	movs	r3, #0
 8004520:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004528:	4619      	mov	r1, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004530:	461a      	mov	r2, r3
 8004532:	680b      	ldr	r3, [r1, #0]
 8004534:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004538:	2b01      	cmp	r3, #1
 800453a:	d10c      	bne.n	8004556 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	2b00      	cmp	r3, #0
 8004540:	d104      	bne.n	800454c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004542:	2100      	movs	r1, #0
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f000 f949 	bl	80047dc <USB_SetDevSpeed>
 800454a:	e008      	b.n	800455e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800454c:	2101      	movs	r1, #1
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f944 	bl	80047dc <USB_SetDevSpeed>
 8004554:	e003      	b.n	800455e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004556:	2103      	movs	r1, #3
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f93f 	bl	80047dc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800455e:	2110      	movs	r1, #16
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f8f3 	bl	800474c <USB_FlushTxFifo>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f911 	bl	8004798 <USB_FlushRxFifo>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d001      	beq.n	8004580 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004586:	461a      	mov	r2, r3
 8004588:	2300      	movs	r3, #0
 800458a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004592:	461a      	mov	r2, r3
 8004594:	2300      	movs	r3, #0
 8004596:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800459e:	461a      	mov	r2, r3
 80045a0:	2300      	movs	r3, #0
 80045a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e043      	b.n	8004632 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045c0:	d118      	bne.n	80045f4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d4:	461a      	mov	r2, r3
 80045d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e013      	b.n	8004606 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ea:	461a      	mov	r2, r3
 80045ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045f0:	6013      	str	r3, [r2, #0]
 80045f2:	e008      	b.n	8004606 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004600:	461a      	mov	r2, r3
 8004602:	2300      	movs	r3, #0
 8004604:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	2300      	movs	r3, #0
 8004616:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	461a      	mov	r2, r3
 8004626:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800462a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	3301      	adds	r3, #1
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	429a      	cmp	r2, r3
 8004638:	d3b7      	bcc.n	80045aa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800463a:	2300      	movs	r3, #0
 800463c:	613b      	str	r3, [r7, #16]
 800463e:	e043      	b.n	80046c8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004656:	d118      	bne.n	800468a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	461a      	mov	r2, r3
 800466c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e013      	b.n	800469c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004680:	461a      	mov	r2, r3
 8004682:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004686:	6013      	str	r3, [r2, #0]
 8004688:	e008      	b.n	800469c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004696:	461a      	mov	r2, r3
 8004698:	2300      	movs	r3, #0
 800469a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	015a      	lsls	r2, r3, #5
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4413      	add	r3, r2
 80046a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a8:	461a      	mov	r2, r3
 80046aa:	2300      	movs	r3, #0
 80046ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	461a      	mov	r2, r3
 80046bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	3301      	adds	r3, #1
 80046c6:	613b      	str	r3, [r7, #16]
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	693a      	ldr	r2, [r7, #16]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3b7      	bcc.n	8004640 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	691b      	ldr	r3, [r3, #16]
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80046f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80046f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	f043 0210 	orr.w	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	699a      	ldr	r2, [r3, #24]
 8004708:	4b0f      	ldr	r3, [pc, #60]	; (8004748 <USB_DevInit+0x2c4>)
 800470a:	4313      	orrs	r3, r2
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004712:	2b00      	cmp	r3, #0
 8004714:	d005      	beq.n	8004722 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	f043 0208 	orr.w	r2, r3, #8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d107      	bne.n	8004738 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004730:	f043 0304 	orr.w	r3, r3, #4
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004738:	7dfb      	ldrb	r3, [r7, #23]
}
 800473a:	4618      	mov	r0, r3
 800473c:	3718      	adds	r7, #24
 800473e:	46bd      	mov	sp, r7
 8004740:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004744:	b004      	add	sp, #16
 8004746:	4770      	bx	lr
 8004748:	803c3800 	.word	0x803c3800

0800474c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	f043 0220 	orr.w	r2, r3, #32
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3301      	adds	r3, #1
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <USB_FlushTxFifo+0x48>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d901      	bls.n	8004778 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	e006      	b.n	8004786 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	691b      	ldr	r3, [r3, #16]
 800477c:	f003 0320 	and.w	r3, r3, #32
 8004780:	2b20      	cmp	r3, #32
 8004782:	d0f0      	beq.n	8004766 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	00030d40 	.word	0x00030d40

08004798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80047a0:	2300      	movs	r3, #0
 80047a2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2210      	movs	r2, #16
 80047a8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	3301      	adds	r3, #1
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a09      	ldr	r2, [pc, #36]	; (80047d8 <USB_FlushRxFifo+0x40>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e006      	b.n	80047ca <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b10      	cmp	r3, #16
 80047c6:	d0f0      	beq.n	80047aa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3714      	adds	r7, #20
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	00030d40 	.word	0x00030d40

080047dc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	460b      	mov	r3, r1
 80047e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	78fb      	ldrb	r3, [r7, #3]
 80047f6:	68f9      	ldr	r1, [r7, #12]
 80047f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047fc:	4313      	orrs	r3, r2
 80047fe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr

0800480e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800480e:	b480      	push	{r7}
 8004810:	b087      	sub	sp, #28
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0306 	and.w	r3, r3, #6
 8004826:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800482e:	2300      	movs	r3, #0
 8004830:	75fb      	strb	r3, [r7, #23]
 8004832:	e00a      	b.n	800484a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b02      	cmp	r3, #2
 8004838:	d002      	beq.n	8004840 <USB_GetDevSpeed+0x32>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d102      	bne.n	8004846 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004840:	2302      	movs	r3, #2
 8004842:	75fb      	strb	r3, [r7, #23]
 8004844:	e001      	b.n	800484a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004846:	230f      	movs	r3, #15
 8004848:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800484a:	7dfb      	ldrb	r3, [r7, #23]
}
 800484c:	4618      	mov	r0, r3
 800484e:	371c      	adds	r7, #28
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	785b      	ldrb	r3, [r3, #1]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d13a      	bne.n	80048ea <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	b29b      	uxth	r3, r3
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004892:	4313      	orrs	r3, r2
 8004894:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d155      	bne.n	8004958 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	015a      	lsls	r2, r3, #5
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	4413      	add	r3, r2
 80048b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	78db      	ldrb	r3, [r3, #3]
 80048c6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048c8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	059b      	lsls	r3, r3, #22
 80048ce:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80048d0:	4313      	orrs	r3, r2
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	6013      	str	r3, [r2, #0]
 80048e8:	e036      	b.n	8004958 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	041b      	lsls	r3, r3, #16
 8004902:	68f9      	ldr	r1, [r7, #12]
 8004904:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004908:	4313      	orrs	r3, r2
 800490a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d11a      	bne.n	8004958 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	78db      	ldrb	r3, [r3, #3]
 800493c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800493e:	430b      	orrs	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	68ba      	ldr	r2, [r7, #8]
 8004944:	0151      	lsls	r1, r2, #5
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	440a      	add	r2, r1
 800494a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800494e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004956:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
	...

08004968 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004968:	b480      	push	{r7}
 800496a:	b085      	sub	sp, #20
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	785b      	ldrb	r3, [r3, #1]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d161      	bne.n	8004a48 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499a:	d11f      	bne.n	80049dc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049ba:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	0151      	lsls	r1, r2, #5
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	440a      	add	r2, r1
 80049d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049d6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049da:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	f003 030f 	and.w	r3, r3, #15
 80049ec:	2101      	movs	r1, #1
 80049ee:	fa01 f303 	lsl.w	r3, r1, r3
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	43db      	mvns	r3, r3
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049fc:	4013      	ands	r3, r2
 80049fe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a06:	69da      	ldr	r2, [r3, #28]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	2101      	movs	r1, #1
 8004a12:	fa01 f303 	lsl.w	r3, r1, r3
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	43db      	mvns	r3, r3
 8004a1a:	68f9      	ldr	r1, [r7, #12]
 8004a1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a20:	4013      	ands	r3, r2
 8004a22:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	015a      	lsls	r2, r3, #5
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	0159      	lsls	r1, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	440b      	add	r3, r1
 8004a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3e:	4619      	mov	r1, r3
 8004a40:	4b35      	ldr	r3, [pc, #212]	; (8004b18 <USB_DeactivateEndpoint+0x1b0>)
 8004a42:	4013      	ands	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
 8004a46:	e060      	b.n	8004b0a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	015a      	lsls	r2, r3, #5
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5e:	d11f      	bne.n	8004aa0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a7e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	0151      	lsls	r1, r2, #5
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	440a      	add	r2, r1
 8004a96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a9e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	2101      	movs	r1, #1
 8004ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ab6:	041b      	lsls	r3, r3, #16
 8004ab8:	43db      	mvns	r3, r3
 8004aba:	68f9      	ldr	r1, [r7, #12]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aca:	69da      	ldr	r2, [r3, #28]
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	f003 030f 	and.w	r3, r3, #15
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	041b      	lsls	r3, r3, #16
 8004adc:	43db      	mvns	r3, r3
 8004ade:	68f9      	ldr	r1, [r7, #12]
 8004ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	0159      	lsls	r1, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	4619      	mov	r1, r3
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <USB_DeactivateEndpoint+0x1b4>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr
 8004b18:	ec337800 	.word	0xec337800
 8004b1c:	eff37800 	.word	0xeff37800

08004b20 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b08a      	sub	sp, #40	; 0x28
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	785b      	ldrb	r3, [r3, #1]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	f040 815c 	bne.w	8004dfa <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d132      	bne.n	8004bb0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	69ba      	ldr	r2, [r7, #24]
 8004b5a:	0151      	lsls	r1, r2, #5
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	440a      	add	r2, r1
 8004b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b64:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b68:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	0151      	lsls	r1, r2, #5
 8004b80:	69fa      	ldr	r2, [r7, #28]
 8004b82:	440a      	add	r2, r1
 8004b84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	69fb      	ldr	r3, [r7, #28]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	69ba      	ldr	r2, [r7, #24]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	69fa      	ldr	r2, [r7, #28]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba8:	0cdb      	lsrs	r3, r3, #19
 8004baa:	04db      	lsls	r3, r3, #19
 8004bac:	6113      	str	r3, [r2, #16]
 8004bae:	e074      	b.n	8004c9a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	0151      	lsls	r1, r2, #5
 8004bc2:	69fa      	ldr	r2, [r7, #28]
 8004bc4:	440a      	add	r2, r1
 8004bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bca:	0cdb      	lsrs	r3, r3, #19
 8004bcc:	04db      	lsls	r3, r3, #19
 8004bce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	015a      	lsls	r2, r3, #5
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	0151      	lsls	r1, r2, #5
 8004be2:	69fa      	ldr	r2, [r7, #28]
 8004be4:	440a      	add	r2, r1
 8004be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bea:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bee:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	015a      	lsls	r2, r3, #5
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	4413      	add	r3, r2
 8004bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c00:	691a      	ldr	r2, [r3, #16]
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	6959      	ldr	r1, [r3, #20]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	440b      	add	r3, r1
 8004c0c:	1e59      	subs	r1, r3, #1
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c16:	04d9      	lsls	r1, r3, #19
 8004c18:	4b9d      	ldr	r3, [pc, #628]	; (8004e90 <USB_EPStartXfer+0x370>)
 8004c1a:	400b      	ands	r3, r1
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	0148      	lsls	r0, r1, #5
 8004c20:	69f9      	ldr	r1, [r7, #28]
 8004c22:	4401      	add	r1, r0
 8004c24:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	015a      	lsls	r2, r3, #5
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	4413      	add	r3, r2
 8004c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c38:	691a      	ldr	r2, [r3, #16]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c42:	69b9      	ldr	r1, [r7, #24]
 8004c44:	0148      	lsls	r0, r1, #5
 8004c46:	69f9      	ldr	r1, [r7, #28]
 8004c48:	4401      	add	r1, r0
 8004c4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	78db      	ldrb	r3, [r3, #3]
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d11f      	bne.n	8004c9a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c78:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	69ba      	ldr	r2, [r7, #24]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c94:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c98:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c9a:	79fb      	ldrb	r3, [r7, #7]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d14b      	bne.n	8004d38 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d009      	beq.n	8004cbc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	78db      	ldrb	r3, [r3, #3]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d128      	bne.n	8004d16 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d110      	bne.n	8004cf6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	0151      	lsls	r1, r2, #5
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	440a      	add	r2, r1
 8004cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	e00f      	b.n	8004d16 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	015a      	lsls	r2, r3, #5
 8004cfa:	69fb      	ldr	r3, [r7, #28]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	0151      	lsls	r1, r2, #5
 8004d08:	69fa      	ldr	r2, [r7, #28]
 8004d0a:	440a      	add	r2, r1
 8004d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d14:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	015a      	lsls	r2, r3, #5
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	0151      	lsls	r1, r2, #5
 8004d28:	69fa      	ldr	r2, [r7, #28]
 8004d2a:	440a      	add	r2, r1
 8004d2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	e12f      	b.n	8004f98 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	0151      	lsls	r1, r2, #5
 8004d4a:	69fa      	ldr	r2, [r7, #28]
 8004d4c:	440a      	add	r2, r1
 8004d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d52:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d56:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	78db      	ldrb	r3, [r3, #3]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d015      	beq.n	8004d8c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8117 	beq.w	8004f98 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	2101      	movs	r1, #1
 8004d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d80:	69f9      	ldr	r1, [r7, #28]
 8004d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d86:	4313      	orrs	r3, r2
 8004d88:	634b      	str	r3, [r1, #52]	; 0x34
 8004d8a:	e105      	b.n	8004f98 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d110      	bne.n	8004dbe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69ba      	ldr	r2, [r7, #24]
 8004dac:	0151      	lsls	r1, r2, #5
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	440a      	add	r2, r1
 8004db2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	e00f      	b.n	8004dde <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	015a      	lsls	r2, r3, #5
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	69ba      	ldr	r2, [r7, #24]
 8004dce:	0151      	lsls	r1, r2, #5
 8004dd0:	69fa      	ldr	r2, [r7, #28]
 8004dd2:	440a      	add	r2, r1
 8004dd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ddc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	68d9      	ldr	r1, [r3, #12]
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	781a      	ldrb	r2, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	b298      	uxth	r0, r3
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4603      	mov	r3, r0
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fa2b 	bl	800524e <USB_WritePacket>
 8004df8:	e0ce      	b.n	8004f98 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	015a      	lsls	r2, r3, #5
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e06:	691b      	ldr	r3, [r3, #16]
 8004e08:	69ba      	ldr	r2, [r7, #24]
 8004e0a:	0151      	lsls	r1, r2, #5
 8004e0c:	69fa      	ldr	r2, [r7, #28]
 8004e0e:	440a      	add	r2, r1
 8004e10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e14:	0cdb      	lsrs	r3, r3, #19
 8004e16:	04db      	lsls	r3, r3, #19
 8004e18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	69ba      	ldr	r2, [r7, #24]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	69fa      	ldr	r2, [r7, #28]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e3c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d126      	bne.n	8004e94 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004e46:	69bb      	ldr	r3, [r7, #24]
 8004e48:	015a      	lsls	r2, r3, #5
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	0148      	lsls	r0, r1, #5
 8004e60:	69f9      	ldr	r1, [r7, #28]
 8004e62:	4401      	add	r1, r0
 8004e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	69ba      	ldr	r2, [r7, #24]
 8004e7c:	0151      	lsls	r1, r2, #5
 8004e7e:	69fa      	ldr	r2, [r7, #28]
 8004e80:	440a      	add	r2, r1
 8004e82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e8a:	6113      	str	r3, [r2, #16]
 8004e8c:	e036      	b.n	8004efc <USB_EPStartXfer+0x3dc>
 8004e8e:	bf00      	nop
 8004e90:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	1e5a      	subs	r2, r3, #1
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	015a      	lsls	r2, r3, #5
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb6:	691a      	ldr	r2, [r3, #16]
 8004eb8:	8afb      	ldrh	r3, [r7, #22]
 8004eba:	04d9      	lsls	r1, r3, #19
 8004ebc:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <USB_EPStartXfer+0x484>)
 8004ebe:	400b      	ands	r3, r1
 8004ec0:	69b9      	ldr	r1, [r7, #24]
 8004ec2:	0148      	lsls	r0, r1, #5
 8004ec4:	69f9      	ldr	r1, [r7, #28]
 8004ec6:	4401      	add	r1, r0
 8004ec8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	015a      	lsls	r2, r3, #5
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	8af9      	ldrh	r1, [r7, #22]
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eec:	69b9      	ldr	r1, [r7, #24]
 8004eee:	0148      	lsls	r0, r1, #5
 8004ef0:	69f9      	ldr	r1, [r7, #28]
 8004ef2:	4401      	add	r1, r0
 8004ef4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d10d      	bne.n	8004f1e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	68d9      	ldr	r1, [r3, #12]
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	015a      	lsls	r2, r3, #5
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	4413      	add	r3, r2
 8004f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	78db      	ldrb	r3, [r3, #3]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d128      	bne.n	8004f78 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d110      	bne.n	8004f58 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	015a      	lsls	r2, r3, #5
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	4413      	add	r3, r2
 8004f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f50:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e00f      	b.n	8004f78 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	0151      	lsls	r1, r2, #5
 8004f6a:	69fa      	ldr	r2, [r7, #28]
 8004f6c:	440a      	add	r2, r1
 8004f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	0151      	lsls	r1, r2, #5
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	440a      	add	r2, r1
 8004f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f92:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3720      	adds	r7, #32
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	1ff80000 	.word	0x1ff80000

08004fa8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	f040 80cd 	bne.w	8005164 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d132      	bne.n	8005038 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	015a      	lsls	r2, r3, #5
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	4413      	add	r3, r2
 8004fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fde:	691b      	ldr	r3, [r3, #16]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	0151      	lsls	r1, r2, #5
 8004fe4:	697a      	ldr	r2, [r7, #20]
 8004fe6:	440a      	add	r2, r1
 8004fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ff4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	693a      	ldr	r2, [r7, #16]
 8005006:	0151      	lsls	r1, r2, #5
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	440a      	add	r2, r1
 800500c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005010:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005014:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	0cdb      	lsrs	r3, r3, #19
 8005032:	04db      	lsls	r3, r3, #19
 8005034:	6113      	str	r3, [r2, #16]
 8005036:	e04e      	b.n	80050d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005044:	691b      	ldr	r3, [r3, #16]
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005052:	0cdb      	lsrs	r3, r3, #19
 8005054:	04db      	lsls	r3, r3, #19
 8005056:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005072:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005076:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800507a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	695a      	ldr	r2, [r3, #20]
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	429a      	cmp	r2, r3
 8005086:	d903      	bls.n	8005090 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	689a      	ldr	r2, [r3, #8]
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	015a      	lsls	r2, r3, #5
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	4413      	add	r3, r2
 80050b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050c6:	6939      	ldr	r1, [r7, #16]
 80050c8:	0148      	lsls	r0, r1, #5
 80050ca:	6979      	ldr	r1, [r7, #20]
 80050cc:	4401      	add	r1, r0
 80050ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80050d2:	4313      	orrs	r3, r2
 80050d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80050d6:	79fb      	ldrb	r3, [r7, #7]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d11e      	bne.n	800511a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d009      	beq.n	80050f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	461a      	mov	r2, r3
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	697a      	ldr	r2, [r7, #20]
 800510c:	440a      	add	r2, r1
 800510e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005112:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e092      	b.n	8005240 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005134:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005138:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d07e      	beq.n	8005240 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005148:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	2101      	movs	r1, #1
 8005154:	fa01 f303 	lsl.w	r3, r1, r3
 8005158:	6979      	ldr	r1, [r7, #20]
 800515a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800515e:	4313      	orrs	r3, r2
 8005160:	634b      	str	r3, [r1, #52]	; 0x34
 8005162:	e06d      	b.n	8005240 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517e:	0cdb      	lsrs	r3, r3, #19
 8005180:	04db      	lsls	r3, r3, #19
 8005182:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	693a      	ldr	r2, [r7, #16]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	440a      	add	r2, r1
 800519a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800519e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051a6:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d003      	beq.n	80051b8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	0151      	lsls	r1, r2, #5
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	440a      	add	r2, r1
 80051ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e4:	691a      	ldr	r2, [r3, #16]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051ee:	6939      	ldr	r1, [r7, #16]
 80051f0:	0148      	lsls	r0, r1, #5
 80051f2:	6979      	ldr	r1, [r7, #20]
 80051f4:	4401      	add	r1, r0
 80051f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80051fa:	4313      	orrs	r3, r2
 80051fc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d10d      	bne.n	8005220 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d009      	beq.n	8005220 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	68d9      	ldr	r1, [r3, #12]
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	4413      	add	r3, r2
 8005218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521c:	460a      	mov	r2, r1
 800521e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	015a      	lsls	r2, r3, #5
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	0151      	lsls	r1, r2, #5
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	440a      	add	r2, r1
 8005236:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800523e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800524e:	b480      	push	{r7}
 8005250:	b089      	sub	sp, #36	; 0x24
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	4611      	mov	r1, r2
 800525a:	461a      	mov	r2, r3
 800525c:	460b      	mov	r3, r1
 800525e:	71fb      	strb	r3, [r7, #7]
 8005260:	4613      	mov	r3, r2
 8005262:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800526c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11a      	bne.n	80052aa <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005274:	88bb      	ldrh	r3, [r7, #4]
 8005276:	3303      	adds	r3, #3
 8005278:	089b      	lsrs	r3, r3, #2
 800527a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800527c:	2300      	movs	r3, #0
 800527e:	61bb      	str	r3, [r7, #24]
 8005280:	e00f      	b.n	80052a2 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005282:	79fb      	ldrb	r3, [r7, #7]
 8005284:	031a      	lsls	r2, r3, #12
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	4413      	add	r3, r2
 800528a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800528e:	461a      	mov	r2, r3
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	3304      	adds	r3, #4
 800529a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	3301      	adds	r3, #1
 80052a0:	61bb      	str	r3, [r7, #24]
 80052a2:	69ba      	ldr	r2, [r7, #24]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d3eb      	bcc.n	8005282 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052aa:	2300      	movs	r3, #0
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3724      	adds	r7, #36	; 0x24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b089      	sub	sp, #36	; 0x24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	4613      	mov	r3, r2
 80052c4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80052ce:	88fb      	ldrh	r3, [r7, #6]
 80052d0:	3303      	adds	r3, #3
 80052d2:	089b      	lsrs	r3, r3, #2
 80052d4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80052d6:	2300      	movs	r3, #0
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e00b      	b.n	80052f4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	3304      	adds	r3, #4
 80052ec:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	3301      	adds	r3, #1
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	69ba      	ldr	r2, [r7, #24]
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d3ef      	bcc.n	80052dc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80052fc:	69fb      	ldr	r3, [r7, #28]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3724      	adds	r7, #36	; 0x24
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr

0800530a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	6078      	str	r0, [r7, #4]
 8005312:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d12c      	bne.n	8005380 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	015a      	lsls	r2, r3, #5
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	4413      	add	r3, r2
 800532e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	db12      	blt.n	800535e <USB_EPSetStall+0x54>
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00f      	beq.n	800535e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	0151      	lsls	r1, r2, #5
 8005350:	68fa      	ldr	r2, [r7, #12]
 8005352:	440a      	add	r2, r1
 8005354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005358:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800535c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	0151      	lsls	r1, r2, #5
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	440a      	add	r2, r1
 8005374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	e02b      	b.n	80053d8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	015a      	lsls	r2, r3, #5
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	db12      	blt.n	80053b8 <USB_EPSetStall+0xae>
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00f      	beq.n	80053b8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	0151      	lsls	r1, r2, #5
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	440a      	add	r2, r1
 80053ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053b6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	015a      	lsls	r2, r3, #5
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4413      	add	r3, r2
 80053c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	0151      	lsls	r1, r2, #5
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	440a      	add	r2, r1
 80053ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr

080053e6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053e6:	b480      	push	{r7}
 80053e8:	b085      	sub	sp, #20
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
 80053ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	785b      	ldrb	r3, [r3, #1]
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d128      	bne.n	8005454 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68ba      	ldr	r2, [r7, #8]
 8005412:	0151      	lsls	r1, r2, #5
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	440a      	add	r2, r1
 8005418:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005420:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	78db      	ldrb	r3, [r3, #3]
 8005426:	2b03      	cmp	r3, #3
 8005428:	d003      	beq.n	8005432 <USB_EPClearStall+0x4c>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	78db      	ldrb	r3, [r3, #3]
 800542e:	2b02      	cmp	r3, #2
 8005430:	d138      	bne.n	80054a4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e027      	b.n	80054a4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800546e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005472:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	78db      	ldrb	r3, [r3, #3]
 8005478:	2b03      	cmp	r3, #3
 800547a:	d003      	beq.n	8005484 <USB_EPClearStall+0x9e>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	78db      	ldrb	r3, [r3, #3]
 8005480:	2b02      	cmp	r3, #2
 8005482:	d10f      	bne.n	80054a4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800549e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80054a4:	2300      	movs	r3, #0
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3714      	adds	r7, #20
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b085      	sub	sp, #20
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
 80054ba:	460b      	mov	r3, r1
 80054bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054d4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80054e6:	68f9      	ldr	r1, [r7, #12]
 80054e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054ec:	4313      	orrs	r3, r2
 80054ee:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3714      	adds	r7, #20
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr

080054fe <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054fe:	b480      	push	{r7}
 8005500:	b085      	sub	sp, #20
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005518:	f023 0303 	bic.w	r3, r3, #3
 800551c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005524:	685b      	ldr	r3, [r3, #4]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800552c:	f023 0302 	bic.w	r3, r3, #2
 8005530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3714      	adds	r7, #20
 8005538:	46bd      	mov	sp, r7
 800553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553e:	4770      	bx	lr

08005540 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800555a:	f023 0303 	bic.w	r3, r3, #3
 800555e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800556e:	f043 0302 	orr.w	r3, r3, #2
 8005572:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3714      	adds	r7, #20
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr

08005582 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4013      	ands	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800559a:	68fb      	ldr	r3, [r7, #12]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3714      	adds	r7, #20
 80055a0:	46bd      	mov	sp, r7
 80055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a6:	4770      	bx	lr

080055a8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b085      	sub	sp, #20
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c4:	69db      	ldr	r3, [r3, #28]
 80055c6:	68ba      	ldr	r2, [r7, #8]
 80055c8:	4013      	ands	r3, r2
 80055ca:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	0c1b      	lsrs	r3, r3, #16
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3714      	adds	r7, #20
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr

080055dc <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	4013      	ands	r3, r2
 80055fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	b29b      	uxth	r3, r3
}
 8005604:	4618      	mov	r0, r3
 8005606:	3714      	adds	r7, #20
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005620:	78fb      	ldrb	r3, [r7, #3]
 8005622:	015a      	lsls	r2, r3, #5
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	4413      	add	r3, r2
 8005628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800563e:	68bb      	ldr	r3, [r7, #8]
}
 8005640:	4618      	mov	r0, r3
 8005642:	3714      	adds	r7, #20
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005662:	691b      	ldr	r3, [r3, #16]
 8005664:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800566c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800566e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005670:	78fb      	ldrb	r3, [r7, #3]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	fa22 f303 	lsr.w	r3, r2, r3
 800567c:	01db      	lsls	r3, r3, #7
 800567e:	b2db      	uxtb	r3, r3
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	4413      	add	r3, r2
 800568e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4013      	ands	r3, r2
 8005698:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800569a:	68bb      	ldr	r3, [r7, #8]
}
 800569c:	4618      	mov	r0, r3
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f003 0301 	and.w	r3, r3, #1
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b085      	sub	sp, #20
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056de:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80056e2:	f023 0307 	bic.w	r3, r3, #7
 80056e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056fc:	2300      	movs	r3, #0
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr
	...

0800570c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	460b      	mov	r3, r1
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	333c      	adds	r3, #60	; 0x3c
 8005722:	3304      	adds	r3, #4
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	4a26      	ldr	r2, [pc, #152]	; (80057c4 <USB_EP0_OutStart+0xb8>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d90a      	bls.n	8005746 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005740:	d101      	bne.n	8005746 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	e037      	b.n	80057b6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800574c:	461a      	mov	r2, r3
 800574e:	2300      	movs	r3, #0
 8005750:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005764:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005774:	f043 0318 	orr.w	r3, r3, #24
 8005778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005788:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800578c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800578e:	7afb      	ldrb	r3, [r7, #11]
 8005790:	2b01      	cmp	r3, #1
 8005792:	d10f      	bne.n	80057b4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ae:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80057b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057b4:	2300      	movs	r3, #0
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	4f54300a 	.word	0x4f54300a

080057c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80057d0:	2300      	movs	r3, #0
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	3301      	adds	r3, #1
 80057d8:	60fb      	str	r3, [r7, #12]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	4a13      	ldr	r2, [pc, #76]	; (800582c <USB_CoreReset+0x64>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d901      	bls.n	80057e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e01b      	b.n	800581e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	691b      	ldr	r3, [r3, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	daf2      	bge.n	80057d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80057ee:	2300      	movs	r3, #0
 80057f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f043 0201 	orr.w	r2, r3, #1
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	4a09      	ldr	r2, [pc, #36]	; (800582c <USB_CoreReset+0x64>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d901      	bls.n	8005810 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e006      	b.n	800581e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	691b      	ldr	r3, [r3, #16]
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b01      	cmp	r3, #1
 800581a:	d0f0      	beq.n	80057fe <USB_CoreReset+0x36>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	00030d40 	.word	0x00030d40

08005830 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b084      	sub	sp, #16
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800583c:	2030      	movs	r0, #48	; 0x30
 800583e:	f001 fffb 	bl	8007838 <USBD_static_malloc>
 8005842:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005852:	2302      	movs	r3, #2
 8005854:	e039      	b.n	80058ca <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	7c1b      	ldrb	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d107      	bne.n	8005876 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2205      	movs	r2, #5
 800586a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2205      	movs	r2, #5
 8005870:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8005874:	e006      	b.n	8005884 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2205      	movs	r2, #5
 800587a:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2205      	movs	r2, #5
 8005880:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8005884:	2302      	movs	r3, #2
 8005886:	2203      	movs	r2, #3
 8005888:	2181      	movs	r1, #129	; 0x81
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f001 fec3 	bl	8007616 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2201      	movs	r2, #1
 8005894:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8005896:	2302      	movs	r3, #2
 8005898:	2203      	movs	r2, #3
 800589a:	2101      	movs	r1, #1
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f001 feba 	bl	8007616 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2201      	movs	r2, #1
 80058a6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	231c      	movs	r3, #28
 80058c0:	2101      	movs	r1, #1
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f001 ff96 	bl	80077f4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058d2:	b580      	push	{r7, lr}
 80058d4:	b082      	sub	sp, #8
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
 80058da:	460b      	mov	r3, r1
 80058dc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80058de:	2181      	movs	r1, #129	; 0x81
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 febe 	bl	8007662 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80058f2:	2101      	movs	r1, #1
 80058f4:	6878      	ldr	r0, [r7, #4]
 80058f6:	f001 feb4 	bl	8007662 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005924:	4618      	mov	r0, r3
 8005926:	f001 ff95 	bl	8007854 <USBD_static_free>
    pdev->pClassData = NULL;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3708      	adds	r7, #8
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b088      	sub	sp, #32
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800594c:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005952:	2300      	movs	r3, #0
 8005954:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005964:	2303      	movs	r3, #3
 8005966:	e0ed      	b.n	8005b44 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005970:	2b00      	cmp	r3, #0
 8005972:	d052      	beq.n	8005a1a <USBD_CUSTOM_HID_Setup+0xde>
 8005974:	2b20      	cmp	r3, #32
 8005976:	f040 80dd 	bne.w	8005b34 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	3b02      	subs	r3, #2
 8005980:	2b09      	cmp	r3, #9
 8005982:	d842      	bhi.n	8005a0a <USBD_CUSTOM_HID_Setup+0xce>
 8005984:	a201      	add	r2, pc, #4	; (adr r2, 800598c <USBD_CUSTOM_HID_Setup+0x50>)
 8005986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598a:	bf00      	nop
 800598c:	080059e5 	.word	0x080059e5
 8005990:	080059c3 	.word	0x080059c3
 8005994:	08005a0b 	.word	0x08005a0b
 8005998:	08005a0b 	.word	0x08005a0b
 800599c:	08005a0b 	.word	0x08005a0b
 80059a0:	08005a0b 	.word	0x08005a0b
 80059a4:	08005a0b 	.word	0x08005a0b
 80059a8:	080059f5 	.word	0x080059f5
 80059ac:	080059d3 	.word	0x080059d3
 80059b0:	080059b5 	.word	0x080059b5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	885b      	ldrh	r3, [r3, #2]
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	61da      	str	r2, [r3, #28]
          break;
 80059c0:	e02a      	b.n	8005a18 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	331c      	adds	r3, #28
 80059c6:	2201      	movs	r2, #1
 80059c8:	4619      	mov	r1, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f001 fa9d 	bl	8006f0a <USBD_CtlSendData>
          break;
 80059d0:	e022      	b.n	8005a18 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	885b      	ldrh	r3, [r3, #2]
 80059d6:	0a1b      	lsrs	r3, r3, #8
 80059d8:	b29b      	uxth	r3, r3
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	621a      	str	r2, [r3, #32]
          break;
 80059e2:	e019      	b.n	8005a18 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	3320      	adds	r3, #32
 80059e8:	2201      	movs	r2, #1
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f001 fa8c 	bl	8006f0a <USBD_CtlSendData>
          break;
 80059f2:	e011      	b.n	8005a18 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	2201      	movs	r2, #1
 80059f8:	629a      	str	r2, [r3, #40]	; 0x28
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80059fa:	6939      	ldr	r1, [r7, #16]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	88db      	ldrh	r3, [r3, #6]
 8005a00:	461a      	mov	r2, r3
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f001 faad 	bl	8006f62 <USBD_CtlPrepareRx>
          break;
 8005a08:	e006      	b.n	8005a18 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f001 fa0b 	bl	8006e28 <USBD_CtlError>
          ret = USBD_FAIL;
 8005a12:	2303      	movs	r3, #3
 8005a14:	75fb      	strb	r3, [r7, #23]
          break;
 8005a16:	bf00      	nop
      }
      break;
 8005a18:	e093      	b.n	8005b42 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	785b      	ldrb	r3, [r3, #1]
 8005a1e:	2b0b      	cmp	r3, #11
 8005a20:	d87f      	bhi.n	8005b22 <USBD_CUSTOM_HID_Setup+0x1e6>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <USBD_CUSTOM_HID_Setup+0xec>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005a59 	.word	0x08005a59
 8005a2c:	08005b31 	.word	0x08005b31
 8005a30:	08005b23 	.word	0x08005b23
 8005a34:	08005b23 	.word	0x08005b23
 8005a38:	08005b23 	.word	0x08005b23
 8005a3c:	08005b23 	.word	0x08005b23
 8005a40:	08005a83 	.word	0x08005a83
 8005a44:	08005b23 	.word	0x08005b23
 8005a48:	08005b23 	.word	0x08005b23
 8005a4c:	08005b23 	.word	0x08005b23
 8005a50:	08005ad1 	.word	0x08005ad1
 8005a54:	08005afb 	.word	0x08005afb
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b03      	cmp	r3, #3
 8005a62:	d107      	bne.n	8005a74 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005a64:	f107 030e 	add.w	r3, r7, #14
 8005a68:	2202      	movs	r2, #2
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f001 fa4c 	bl	8006f0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005a72:	e05e      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005a74:	6839      	ldr	r1, [r7, #0]
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f001 f9d6 	bl	8006e28 <USBD_CtlError>
            ret = USBD_FAIL;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	75fb      	strb	r3, [r7, #23]
          break;
 8005a80:	e057      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	885b      	ldrh	r3, [r3, #2]
 8005a86:	0a1b      	lsrs	r3, r3, #8
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b22      	cmp	r3, #34	; 0x22
 8005a8c:	d10b      	bne.n	8005aa6 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	88db      	ldrh	r3, [r3, #6]
 8005a92:	2b22      	cmp	r3, #34	; 0x22
 8005a94:	bf28      	it	cs
 8005a96:	2322      	movcs	r3, #34	; 0x22
 8005a98:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	e00d      	b.n	8005ac2 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	885b      	ldrh	r3, [r3, #2]
 8005aaa:	0a1b      	lsrs	r3, r3, #8
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	2b21      	cmp	r3, #33	; 0x21
 8005ab0:	d107      	bne.n	8005ac2 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8005ab2:	4b26      	ldr	r3, [pc, #152]	; (8005b4c <USBD_CUSTOM_HID_Setup+0x210>)
 8005ab4:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	88db      	ldrh	r3, [r3, #6]
 8005aba:	2b09      	cmp	r3, #9
 8005abc:	bf28      	it	cs
 8005abe:	2309      	movcs	r3, #9
 8005ac0:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005ac2:	8bfb      	ldrh	r3, [r7, #30]
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	69b9      	ldr	r1, [r7, #24]
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fa1e 	bl	8006f0a <USBD_CtlSendData>
          break;
 8005ace:	e030      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	d107      	bne.n	8005aec <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 fa10 	bl	8006f0a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005aea:	e022      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f001 f99a 	bl	8006e28 <USBD_CtlError>
            ret = USBD_FAIL;
 8005af4:	2303      	movs	r3, #3
 8005af6:	75fb      	strb	r3, [r7, #23]
          break;
 8005af8:	e01b      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	2b03      	cmp	r3, #3
 8005b04:	d106      	bne.n	8005b14 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	885b      	ldrh	r3, [r3, #2]
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	625a      	str	r2, [r3, #36]	; 0x24
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005b12:	e00e      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8005b14:	6839      	ldr	r1, [r7, #0]
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f001 f986 	bl	8006e28 <USBD_CtlError>
            ret = USBD_FAIL;
 8005b1c:	2303      	movs	r3, #3
 8005b1e:	75fb      	strb	r3, [r7, #23]
          break;
 8005b20:	e007      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005b22:	6839      	ldr	r1, [r7, #0]
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f001 f97f 	bl	8006e28 <USBD_CtlError>
          ret = USBD_FAIL;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8005b2e:	e000      	b.n	8005b32 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8005b30:	bf00      	nop
      }
      break;
 8005b32:	e006      	b.n	8005b42 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8005b34:	6839      	ldr	r1, [r7, #0]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f001 f976 	bl	8006e28 <USBD_CtlError>
      ret = USBD_FAIL;
 8005b3c:	2303      	movs	r3, #3
 8005b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8005b40:	bf00      	nop
  }
  return (uint8_t)ret;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3720      	adds	r7, #32
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	200000c8 	.word	0x200000c8

08005b50 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e01c      	b.n	8005ba6 <USBD_CUSTOM_HID_SendReport+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b72:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d111      	bne.n	8005ba4 <USBD_CUSTOM_HID_SendReport+0x54>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d10a      	bne.n	8005ba0 <USBD_CUSTOM_HID_SendReport+0x50>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8005b92:	88fb      	ldrh	r3, [r7, #6]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	2181      	movs	r1, #129	; 0x81
 8005b98:	68f8      	ldr	r0, [r7, #12]
 8005b9a:	f001 fe0a 	bl	80077b2 <USBD_LL_Transmit>
 8005b9e:	e001      	b.n	8005ba4 <USBD_CUSTOM_HID_SendReport+0x54>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e000      	b.n	8005ba6 <USBD_CUSTOM_HID_SendReport+0x56>
    }
  }
  return (uint8_t)USBD_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
	...

08005bb0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	b083      	sub	sp, #12
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2229      	movs	r2, #41	; 0x29
 8005bbc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8005bbe:	4b03      	ldr	r3, [pc, #12]	; (8005bcc <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	370c      	adds	r7, #12
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bca:	4770      	bx	lr
 8005bcc:	20000044 	.word	0x20000044

08005bd0 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2229      	movs	r2, #41	; 0x29
 8005bdc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8005bde:	4b03      	ldr	r3, [pc, #12]	; (8005bec <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	20000070 	.word	0x20000070

08005bf0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2229      	movs	r2, #41	; 0x29
 8005bfc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8005bfe:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	2000009c 	.word	0x2000009c

08005c10 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return (uint8_t)USBD_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b084      	sub	sp, #16
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d101      	bne.n	8005c50 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e00e      	b.n	8005c6e <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c56:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	7810      	ldrb	r0, [r2, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	7852      	ldrb	r2, [r2, #1]
 8005c68:	4611      	mov	r1, r2
 8005c6a:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	e00a      	b.n	8005ca2 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	231c      	movs	r3, #28
 8005c98:	2101      	movs	r1, #1
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fdaa 	bl	80077f4 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005cb8:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	e011      	b.n	8005ce8 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d10c      	bne.n	8005ce6 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	7810      	ldrb	r0, [r2, #0]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	7852      	ldrb	r2, [r2, #1]
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  return (uint8_t)USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	220a      	movs	r2, #10
 8005cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005cfe:	4b03      	ldr	r3, [pc, #12]	; (8005d0c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr
 8005d0c:	200000d4 	.word	0x200000d4

08005d10 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e004      	b.n	8005d2e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	683a      	ldr	r2, [r7, #0]
 8005d28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005d2c:	2300      	movs	r3, #0
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	60f8      	str	r0, [r7, #12]
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	4613      	mov	r3, r2
 8005d46:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e01f      	b.n	8005d92 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	79fa      	ldrb	r2, [r7, #7]
 8005d84:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f001 fbde 	bl	8007548 <USBD_LL_Init>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
 8005da2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005da4:	2300      	movs	r3, #0
 8005da6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e016      	b.n	8005de0 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	683a      	ldr	r2, [r7, #0]
 8005db6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00b      	beq.n	8005dde <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dce:	f107 020e 	add.w	r2, r7, #14
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4798      	blx	r3
 8005dd6:	4602      	mov	r2, r0
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f001 fbf5 	bl	80075e0 <USBD_LL_Start>
 8005df6:	4603      	mov	r3, r0
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005e22:	2303      	movs	r3, #3
 8005e24:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d009      	beq.n	8005e44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	78fa      	ldrb	r2, [r7, #3]
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	4798      	blx	r3
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3710      	adds	r7, #16
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}

08005e4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
 8005e54:	6078      	str	r0, [r7, #4]
 8005e56:	460b      	mov	r3, r1
 8005e58:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d007      	beq.n	8005e74 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	78fa      	ldrb	r2, [r7, #3]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	4798      	blx	r3
  }

  return USBD_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f000 ff8f 	bl	8006db4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2b02      	cmp	r3, #2
 8005eb8:	d01a      	beq.n	8005ef0 <USBD_LL_SetupStage+0x72>
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d822      	bhi.n	8005f04 <USBD_LL_SetupStage+0x86>
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d002      	beq.n	8005ec8 <USBD_LL_SetupStage+0x4a>
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d00a      	beq.n	8005edc <USBD_LL_SetupStage+0x5e>
 8005ec6:	e01d      	b.n	8005f04 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fa61 	bl	8006398 <USBD_StdDevReq>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eda:	e020      	b.n	8005f1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fac5 	bl	8006474 <USBD_StdItfReq>
 8005eea:	4603      	mov	r3, r0
 8005eec:	73fb      	strb	r3, [r7, #15]
      break;
 8005eee:	e016      	b.n	8005f1e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fb04 	bl	8006506 <USBD_StdEPReq>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
      break;
 8005f02:	e00c      	b.n	8005f1e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f0a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	4619      	mov	r1, r3
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f001 fbc4 	bl	80076a0 <USBD_LL_StallEP>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1c:	bf00      	nop
  }

  return ret;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	3710      	adds	r7, #16
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	60f8      	str	r0, [r7, #12]
 8005f30:	460b      	mov	r3, r1
 8005f32:	607a      	str	r2, [r7, #4]
 8005f34:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005f36:	7afb      	ldrb	r3, [r7, #11]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d138      	bne.n	8005fae <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f4a:	2b03      	cmp	r3, #3
 8005f4c:	d14a      	bne.n	8005fe4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	689a      	ldr	r2, [r3, #8]
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d913      	bls.n	8005f82 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	1ad2      	subs	r2, r2, r3
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	68da      	ldr	r2, [r3, #12]
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	4293      	cmp	r3, r2
 8005f72:	bf28      	it	cs
 8005f74:	4613      	movcs	r3, r2
 8005f76:	461a      	mov	r2, r3
 8005f78:	6879      	ldr	r1, [r7, #4]
 8005f7a:	68f8      	ldr	r0, [r7, #12]
 8005f7c:	f001 f80e 	bl	8006f9c <USBD_CtlContinueRx>
 8005f80:	e030      	b.n	8005fe4 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d10b      	bne.n	8005fa6 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f94:	691b      	ldr	r3, [r3, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f001 f809 	bl	8006fbe <USBD_CtlSendStatus>
 8005fac:	e01a      	b.n	8005fe4 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d114      	bne.n	8005fe4 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00e      	beq.n	8005fe4 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fcc:	699b      	ldr	r3, [r3, #24]
 8005fce:	7afa      	ldrb	r2, [r7, #11]
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	4798      	blx	r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005fda:	7dfb      	ldrb	r3, [r7, #23]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8005fe0:	7dfb      	ldrb	r3, [r7, #23]
 8005fe2:	e000      	b.n	8005fe6 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3718      	adds	r7, #24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	60f8      	str	r0, [r7, #12]
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d16b      	bne.n	80060da <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3314      	adds	r3, #20
 8006006:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800600e:	2b02      	cmp	r3, #2
 8006010:	d156      	bne.n	80060c0 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	68db      	ldr	r3, [r3, #12]
 800601a:	429a      	cmp	r2, r3
 800601c:	d914      	bls.n	8006048 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800601e:	693b      	ldr	r3, [r7, #16]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	1ad2      	subs	r2, r2, r3
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	461a      	mov	r2, r3
 8006032:	6879      	ldr	r1, [r7, #4]
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 ff83 	bl	8006f40 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800603a:	2300      	movs	r3, #0
 800603c:	2200      	movs	r2, #0
 800603e:	2100      	movs	r1, #0
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f001 fbd7 	bl	80077f4 <USBD_LL_PrepareReceive>
 8006046:	e03b      	b.n	80060c0 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	68da      	ldr	r2, [r3, #12]
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	429a      	cmp	r2, r3
 8006052:	d11c      	bne.n	800608e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800605c:	429a      	cmp	r2, r3
 800605e:	d316      	bcc.n	800608e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	685a      	ldr	r2, [r3, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800606a:	429a      	cmp	r2, r3
 800606c:	d20f      	bcs.n	800608e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800606e:	2200      	movs	r2, #0
 8006070:	2100      	movs	r1, #0
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f000 ff64 	bl	8006f40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006080:	2300      	movs	r3, #0
 8006082:	2200      	movs	r2, #0
 8006084:	2100      	movs	r1, #0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f001 fbb4 	bl	80077f4 <USBD_LL_PrepareReceive>
 800608c:	e018      	b.n	80060c0 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006094:	b2db      	uxtb	r3, r3
 8006096:	2b03      	cmp	r3, #3
 8006098:	d10b      	bne.n	80060b2 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80060b2:	2180      	movs	r1, #128	; 0x80
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f001 faf3 	bl	80076a0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 ff92 	bl	8006fe4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d122      	bne.n	8006110 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff fe98 	bl	8005e00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80060d8:	e01a      	b.n	8006110 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b03      	cmp	r3, #3
 80060e4:	d114      	bne.n	8006110 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00e      	beq.n	8006110 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	7afa      	ldrb	r2, [r7, #11]
 80060fc:	4611      	mov	r1, r2
 80060fe:	68f8      	ldr	r0, [r7, #12]
 8006100:	4798      	blx	r3
 8006102:	4603      	mov	r3, r0
 8006104:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006106:	7dfb      	ldrb	r3, [r7, #23]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	e000      	b.n	8006112 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006146:	2b00      	cmp	r3, #0
 8006148:	d101      	bne.n	800614e <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800614a:	2303      	movs	r3, #3
 800614c:	e02f      	b.n	80061ae <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00f      	beq.n	8006178 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d009      	beq.n	8006178 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6852      	ldr	r2, [r2, #4]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	4611      	mov	r1, r2
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006178:	2340      	movs	r3, #64	; 0x40
 800617a:	2200      	movs	r2, #0
 800617c:	2100      	movs	r1, #0
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 fa49 	bl	8007616 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2240      	movs	r2, #64	; 0x40
 8006190:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006194:	2340      	movs	r3, #64	; 0x40
 8006196:	2200      	movs	r2, #0
 8006198:	2180      	movs	r1, #128	; 0x80
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f001 fa3b 	bl	8007616 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2240      	movs	r2, #64	; 0x40
 80061aa:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b083      	sub	sp, #12
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	460b      	mov	r3, r1
 80061c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	78fa      	ldrb	r2, [r7, #3]
 80061c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	370c      	adds	r7, #12
 80061ce:	46bd      	mov	sp, r7
 80061d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d4:	4770      	bx	lr

080061d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b083      	sub	sp, #12
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2204      	movs	r2, #4
 80061f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006202:	b480      	push	{r7}
 8006204:	b083      	sub	sp, #12
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006210:	b2db      	uxtb	r3, r3
 8006212:	2b04      	cmp	r3, #4
 8006214:	d106      	bne.n	8006224 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800621c:	b2da      	uxtb	r2, r3
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b082      	sub	sp, #8
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d101      	bne.n	8006248 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	e012      	b.n	800626e <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b03      	cmp	r3, #3
 8006252:	d10b      	bne.n	800626c <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d005      	beq.n	800626c <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3708      	adds	r7, #8
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b082      	sub	sp, #8
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800628c:	2303      	movs	r3, #3
 800628e:	e014      	b.n	80062ba <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006296:	b2db      	uxtb	r3, r3
 8006298:	2b03      	cmp	r3, #3
 800629a:	d10d      	bne.n	80062b8 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a2:	6a1b      	ldr	r3, [r3, #32]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d007      	beq.n	80062b8 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	78fa      	ldrb	r2, [r7, #3]
 80062b2:	4611      	mov	r1, r2
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b082      	sub	sp, #8
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80062d8:	2303      	movs	r3, #3
 80062da:	e014      	b.n	8006306 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b03      	cmp	r3, #3
 80062e6:	d10d      	bne.n	8006304 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d007      	beq.n	8006304 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	78fa      	ldrb	r2, [r7, #3]
 80062fe:	4611      	mov	r1, r2
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800633a:	2b00      	cmp	r3, #0
 800633c:	d009      	beq.n	8006352 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6852      	ldr	r2, [r2, #4]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	4611      	mov	r1, r2
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	4798      	blx	r3
  }

  return USBD_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800635c:	b480      	push	{r7}
 800635e:	b087      	sub	sp, #28
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	3301      	adds	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800637a:	8a3b      	ldrh	r3, [r7, #16]
 800637c:	021b      	lsls	r3, r3, #8
 800637e:	b21a      	sxth	r2, r3
 8006380:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006384:	4313      	orrs	r3, r2
 8006386:	b21b      	sxth	r3, r3
 8006388:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800638a:	89fb      	ldrh	r3, [r7, #14]
}
 800638c:	4618      	mov	r0, r3
 800638e:	371c      	adds	r7, #28
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063ae:	2b40      	cmp	r3, #64	; 0x40
 80063b0:	d005      	beq.n	80063be <USBD_StdDevReq+0x26>
 80063b2:	2b40      	cmp	r3, #64	; 0x40
 80063b4:	d853      	bhi.n	800645e <USBD_StdDevReq+0xc6>
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00b      	beq.n	80063d2 <USBD_StdDevReq+0x3a>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d14f      	bne.n	800645e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	4798      	blx	r3
 80063cc:	4603      	mov	r3, r0
 80063ce:	73fb      	strb	r3, [r7, #15]
      break;
 80063d0:	e04a      	b.n	8006468 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	785b      	ldrb	r3, [r3, #1]
 80063d6:	2b09      	cmp	r3, #9
 80063d8:	d83b      	bhi.n	8006452 <USBD_StdDevReq+0xba>
 80063da:	a201      	add	r2, pc, #4	; (adr r2, 80063e0 <USBD_StdDevReq+0x48>)
 80063dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e0:	08006435 	.word	0x08006435
 80063e4:	08006449 	.word	0x08006449
 80063e8:	08006453 	.word	0x08006453
 80063ec:	0800643f 	.word	0x0800643f
 80063f0:	08006453 	.word	0x08006453
 80063f4:	08006413 	.word	0x08006413
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006453 	.word	0x08006453
 8006400:	0800642b 	.word	0x0800642b
 8006404:	0800641d 	.word	0x0800641d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006408:	6839      	ldr	r1, [r7, #0]
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f9de 	bl	80067cc <USBD_GetDescriptor>
          break;
 8006410:	e024      	b.n	800645c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006412:	6839      	ldr	r1, [r7, #0]
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fb43 	bl	8006aa0 <USBD_SetAddress>
          break;
 800641a:	e01f      	b.n	800645c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fb82 	bl	8006b28 <USBD_SetConfig>
 8006424:	4603      	mov	r3, r0
 8006426:	73fb      	strb	r3, [r7, #15]
          break;
 8006428:	e018      	b.n	800645c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800642a:	6839      	ldr	r1, [r7, #0]
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fc21 	bl	8006c74 <USBD_GetConfig>
          break;
 8006432:	e013      	b.n	800645c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fc52 	bl	8006ce0 <USBD_GetStatus>
          break;
 800643c:	e00e      	b.n	800645c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800643e:	6839      	ldr	r1, [r7, #0]
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fc81 	bl	8006d48 <USBD_SetFeature>
          break;
 8006446:	e009      	b.n	800645c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fc90 	bl	8006d70 <USBD_ClrFeature>
          break;
 8006450:	e004      	b.n	800645c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006452:	6839      	ldr	r1, [r7, #0]
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fce7 	bl	8006e28 <USBD_CtlError>
          break;
 800645a:	bf00      	nop
      }
      break;
 800645c:	e004      	b.n	8006468 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800645e:	6839      	ldr	r1, [r7, #0]
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fce1 	bl	8006e28 <USBD_CtlError>
      break;
 8006466:	bf00      	nop
  }

  return ret;
 8006468:	7bfb      	ldrb	r3, [r7, #15]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop

08006474 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800647e:	2300      	movs	r3, #0
 8006480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800648a:	2b40      	cmp	r3, #64	; 0x40
 800648c:	d005      	beq.n	800649a <USBD_StdItfReq+0x26>
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d82f      	bhi.n	80064f2 <USBD_StdItfReq+0x7e>
 8006492:	2b00      	cmp	r3, #0
 8006494:	d001      	beq.n	800649a <USBD_StdItfReq+0x26>
 8006496:	2b20      	cmp	r3, #32
 8006498:	d12b      	bne.n	80064f2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064a0:	b2db      	uxtb	r3, r3
 80064a2:	3b01      	subs	r3, #1
 80064a4:	2b02      	cmp	r3, #2
 80064a6:	d81d      	bhi.n	80064e4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	889b      	ldrh	r3, [r3, #4]
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d813      	bhi.n	80064da <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	6839      	ldr	r1, [r7, #0]
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	4798      	blx	r3
 80064c0:	4603      	mov	r3, r0
 80064c2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	88db      	ldrh	r3, [r3, #6]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d110      	bne.n	80064ee <USBD_StdItfReq+0x7a>
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10d      	bne.n	80064ee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 fd73 	bl	8006fbe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064d8:	e009      	b.n	80064ee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 80064da:	6839      	ldr	r1, [r7, #0]
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 fca3 	bl	8006e28 <USBD_CtlError>
          break;
 80064e2:	e004      	b.n	80064ee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80064e4:	6839      	ldr	r1, [r7, #0]
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 fc9e 	bl	8006e28 <USBD_CtlError>
          break;
 80064ec:	e000      	b.n	80064f0 <USBD_StdItfReq+0x7c>
          break;
 80064ee:	bf00      	nop
      }
      break;
 80064f0:	e004      	b.n	80064fc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80064f2:	6839      	ldr	r1, [r7, #0]
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fc97 	bl	8006e28 <USBD_CtlError>
      break;
 80064fa:	bf00      	nop
  }

  return ret;
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006506:	b580      	push	{r7, lr}
 8006508:	b084      	sub	sp, #16
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	889b      	ldrh	r3, [r3, #4]
 8006518:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d007      	beq.n	8006536 <USBD_StdEPReq+0x30>
 8006526:	2b40      	cmp	r3, #64	; 0x40
 8006528:	f200 8145 	bhi.w	80067b6 <USBD_StdEPReq+0x2b0>
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00c      	beq.n	800654a <USBD_StdEPReq+0x44>
 8006530:	2b20      	cmp	r3, #32
 8006532:	f040 8140 	bne.w	80067b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	6839      	ldr	r1, [r7, #0]
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	4798      	blx	r3
 8006544:	4603      	mov	r3, r0
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	e13a      	b.n	80067c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	785b      	ldrb	r3, [r3, #1]
 800654e:	2b03      	cmp	r3, #3
 8006550:	d007      	beq.n	8006562 <USBD_StdEPReq+0x5c>
 8006552:	2b03      	cmp	r3, #3
 8006554:	f300 8129 	bgt.w	80067aa <USBD_StdEPReq+0x2a4>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d07f      	beq.n	800665c <USBD_StdEPReq+0x156>
 800655c:	2b01      	cmp	r3, #1
 800655e:	d03c      	beq.n	80065da <USBD_StdEPReq+0xd4>
 8006560:	e123      	b.n	80067aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b02      	cmp	r3, #2
 800656c:	d002      	beq.n	8006574 <USBD_StdEPReq+0x6e>
 800656e:	2b03      	cmp	r3, #3
 8006570:	d016      	beq.n	80065a0 <USBD_StdEPReq+0x9a>
 8006572:	e02c      	b.n	80065ce <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006574:	7bbb      	ldrb	r3, [r7, #14]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00d      	beq.n	8006596 <USBD_StdEPReq+0x90>
 800657a:	7bbb      	ldrb	r3, [r7, #14]
 800657c:	2b80      	cmp	r3, #128	; 0x80
 800657e:	d00a      	beq.n	8006596 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006580:	7bbb      	ldrb	r3, [r7, #14]
 8006582:	4619      	mov	r1, r3
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 f88b 	bl	80076a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800658a:	2180      	movs	r1, #128	; 0x80
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f001 f887 	bl	80076a0 <USBD_LL_StallEP>
 8006592:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006594:	e020      	b.n	80065d8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 fc45 	bl	8006e28 <USBD_CtlError>
              break;
 800659e:	e01b      	b.n	80065d8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	885b      	ldrh	r3, [r3, #2]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d10e      	bne.n	80065c6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065a8:	7bbb      	ldrb	r3, [r7, #14]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00b      	beq.n	80065c6 <USBD_StdEPReq+0xc0>
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	2b80      	cmp	r3, #128	; 0x80
 80065b2:	d008      	beq.n	80065c6 <USBD_StdEPReq+0xc0>
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	88db      	ldrh	r3, [r3, #6]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065bc:	7bbb      	ldrb	r3, [r7, #14]
 80065be:	4619      	mov	r1, r3
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f001 f86d 	bl	80076a0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 fcf9 	bl	8006fbe <USBD_CtlSendStatus>

              break;
 80065cc:	e004      	b.n	80065d8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fc29 	bl	8006e28 <USBD_CtlError>
              break;
 80065d6:	bf00      	nop
          }
          break;
 80065d8:	e0ec      	b.n	80067b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d002      	beq.n	80065ec <USBD_StdEPReq+0xe6>
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d016      	beq.n	8006618 <USBD_StdEPReq+0x112>
 80065ea:	e030      	b.n	800664e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065ec:	7bbb      	ldrb	r3, [r7, #14]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00d      	beq.n	800660e <USBD_StdEPReq+0x108>
 80065f2:	7bbb      	ldrb	r3, [r7, #14]
 80065f4:	2b80      	cmp	r3, #128	; 0x80
 80065f6:	d00a      	beq.n	800660e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80065f8:	7bbb      	ldrb	r3, [r7, #14]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f84f 	bl	80076a0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006602:	2180      	movs	r1, #128	; 0x80
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f001 f84b 	bl	80076a0 <USBD_LL_StallEP>
 800660a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800660c:	e025      	b.n	800665a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fc09 	bl	8006e28 <USBD_CtlError>
              break;
 8006616:	e020      	b.n	800665a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	885b      	ldrh	r3, [r3, #2]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d11b      	bne.n	8006658 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006620:	7bbb      	ldrb	r3, [r7, #14]
 8006622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006626:	2b00      	cmp	r3, #0
 8006628:	d004      	beq.n	8006634 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f001 f855 	bl	80076de <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fcc2 	bl	8006fbe <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	4798      	blx	r3
 8006648:	4603      	mov	r3, r0
 800664a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800664c:	e004      	b.n	8006658 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800664e:	6839      	ldr	r1, [r7, #0]
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fbe9 	bl	8006e28 <USBD_CtlError>
              break;
 8006656:	e000      	b.n	800665a <USBD_StdEPReq+0x154>
              break;
 8006658:	bf00      	nop
          }
          break;
 800665a:	e0ab      	b.n	80067b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006662:	b2db      	uxtb	r3, r3
 8006664:	2b02      	cmp	r3, #2
 8006666:	d002      	beq.n	800666e <USBD_StdEPReq+0x168>
 8006668:	2b03      	cmp	r3, #3
 800666a:	d032      	beq.n	80066d2 <USBD_StdEPReq+0x1cc>
 800666c:	e097      	b.n	800679e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d007      	beq.n	8006684 <USBD_StdEPReq+0x17e>
 8006674:	7bbb      	ldrb	r3, [r7, #14]
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d004      	beq.n	8006684 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800667a:	6839      	ldr	r1, [r7, #0]
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 fbd3 	bl	8006e28 <USBD_CtlError>
                break;
 8006682:	e091      	b.n	80067a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006684:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006688:	2b00      	cmp	r3, #0
 800668a:	da0b      	bge.n	80066a4 <USBD_StdEPReq+0x19e>
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	3310      	adds	r3, #16
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	4413      	add	r3, r2
 80066a0:	3304      	adds	r3, #4
 80066a2:	e00b      	b.n	80066bc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4413      	add	r3, r2
 80066ba:	3304      	adds	r3, #4
 80066bc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	2202      	movs	r2, #2
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 fc1d 	bl	8006f0a <USBD_CtlSendData>
              break;
 80066d0:	e06a      	b.n	80067a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80066d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	da11      	bge.n	80066fe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	f003 020f 	and.w	r2, r3, #15
 80066e0:	6879      	ldr	r1, [r7, #4]
 80066e2:	4613      	mov	r3, r2
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	4413      	add	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	440b      	add	r3, r1
 80066ec:	3324      	adds	r3, #36	; 0x24
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d117      	bne.n	8006724 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fb96 	bl	8006e28 <USBD_CtlError>
                  break;
 80066fc:	e054      	b.n	80067a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066fe:	7bbb      	ldrb	r3, [r7, #14]
 8006700:	f003 020f 	and.w	r2, r3, #15
 8006704:	6879      	ldr	r1, [r7, #4]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d104      	bne.n	8006724 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800671a:	6839      	ldr	r1, [r7, #0]
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 fb83 	bl	8006e28 <USBD_CtlError>
                  break;
 8006722:	e041      	b.n	80067a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006728:	2b00      	cmp	r3, #0
 800672a:	da0b      	bge.n	8006744 <USBD_StdEPReq+0x23e>
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	3310      	adds	r3, #16
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4413      	add	r3, r2
 8006740:	3304      	adds	r3, #4
 8006742:	e00b      	b.n	800675c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800674a:	4613      	mov	r3, r2
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	4413      	add	r3, r2
 800675a:	3304      	adds	r3, #4
 800675c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800675e:	7bbb      	ldrb	r3, [r7, #14]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <USBD_StdEPReq+0x264>
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b80      	cmp	r3, #128	; 0x80
 8006768:	d103      	bne.n	8006772 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	e00e      	b.n	8006790 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 ffd0 	bl	800771c <USBD_LL_IsStallEP>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	2201      	movs	r2, #1
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	e002      	b.n	8006790 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2202      	movs	r2, #2
 8006794:	4619      	mov	r1, r3
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fbb7 	bl	8006f0a <USBD_CtlSendData>
              break;
 800679c:	e004      	b.n	80067a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fb41 	bl	8006e28 <USBD_CtlError>
              break;
 80067a6:	bf00      	nop
          }
          break;
 80067a8:	e004      	b.n	80067b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fb3b 	bl	8006e28 <USBD_CtlError>
          break;
 80067b2:	bf00      	nop
      }
      break;
 80067b4:	e004      	b.n	80067c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80067b6:	6839      	ldr	r1, [r7, #0]
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f000 fb35 	bl	8006e28 <USBD_CtlError>
      break;
 80067be:	bf00      	nop
  }

  return ret;
 80067c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
	...

080067cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	6078      	str	r0, [r7, #4]
 80067d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80067da:	2300      	movs	r3, #0
 80067dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	885b      	ldrh	r3, [r3, #2]
 80067e6:	0a1b      	lsrs	r3, r3, #8
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	3b01      	subs	r3, #1
 80067ec:	2b06      	cmp	r3, #6
 80067ee:	f200 8128 	bhi.w	8006a42 <USBD_GetDescriptor+0x276>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <USBD_GetDescriptor+0x2c>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	08006815 	.word	0x08006815
 80067fc:	0800682d 	.word	0x0800682d
 8006800:	0800686d 	.word	0x0800686d
 8006804:	08006a43 	.word	0x08006a43
 8006808:	08006a43 	.word	0x08006a43
 800680c:	080069e3 	.word	0x080069e3
 8006810:	08006a0f 	.word	0x08006a0f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	7c12      	ldrb	r2, [r2, #16]
 8006820:	f107 0108 	add.w	r1, r7, #8
 8006824:	4610      	mov	r0, r2
 8006826:	4798      	blx	r3
 8006828:	60f8      	str	r0, [r7, #12]
      break;
 800682a:	e112      	b.n	8006a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	7c1b      	ldrb	r3, [r3, #16]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10d      	bne.n	8006850 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800683a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683c:	f107 0208 	add.w	r2, r7, #8
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
 8006844:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	2202      	movs	r2, #2
 800684c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800684e:	e100      	b.n	8006a52 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	f107 0208 	add.w	r2, r7, #8
 800685c:	4610      	mov	r0, r2
 800685e:	4798      	blx	r3
 8006860:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	3301      	adds	r3, #1
 8006866:	2202      	movs	r2, #2
 8006868:	701a      	strb	r2, [r3, #0]
      break;
 800686a:	e0f2      	b.n	8006a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	885b      	ldrh	r3, [r3, #2]
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b05      	cmp	r3, #5
 8006874:	f200 80ac 	bhi.w	80069d0 <USBD_GetDescriptor+0x204>
 8006878:	a201      	add	r2, pc, #4	; (adr r2, 8006880 <USBD_GetDescriptor+0xb4>)
 800687a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687e:	bf00      	nop
 8006880:	08006899 	.word	0x08006899
 8006884:	080068cd 	.word	0x080068cd
 8006888:	08006901 	.word	0x08006901
 800688c:	08006935 	.word	0x08006935
 8006890:	08006969 	.word	0x08006969
 8006894:	0800699d 	.word	0x0800699d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	7c12      	ldrb	r2, [r2, #16]
 80068b0:	f107 0108 	add.w	r1, r7, #8
 80068b4:	4610      	mov	r0, r2
 80068b6:	4798      	blx	r3
 80068b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ba:	e091      	b.n	80069e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 fab2 	bl	8006e28 <USBD_CtlError>
            err++;
 80068c4:	7afb      	ldrb	r3, [r7, #11]
 80068c6:	3301      	adds	r3, #1
 80068c8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ca:	e089      	b.n	80069e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	7c12      	ldrb	r2, [r2, #16]
 80068e4:	f107 0108 	add.w	r1, r7, #8
 80068e8:	4610      	mov	r0, r2
 80068ea:	4798      	blx	r3
 80068ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068ee:	e077      	b.n	80069e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f000 fa98 	bl	8006e28 <USBD_CtlError>
            err++;
 80068f8:	7afb      	ldrb	r3, [r7, #11]
 80068fa:	3301      	adds	r3, #1
 80068fc:	72fb      	strb	r3, [r7, #11]
          break;
 80068fe:	e06f      	b.n	80069e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	7c12      	ldrb	r2, [r2, #16]
 8006918:	f107 0108 	add.w	r1, r7, #8
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
 8006920:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006922:	e05d      	b.n	80069e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006924:	6839      	ldr	r1, [r7, #0]
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa7e 	bl	8006e28 <USBD_CtlError>
            err++;
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	3301      	adds	r3, #1
 8006930:	72fb      	strb	r3, [r7, #11]
          break;
 8006932:	e055      	b.n	80069e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	7c12      	ldrb	r2, [r2, #16]
 800694c:	f107 0108 	add.w	r1, r7, #8
 8006950:	4610      	mov	r0, r2
 8006952:	4798      	blx	r3
 8006954:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006956:	e043      	b.n	80069e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006958:	6839      	ldr	r1, [r7, #0]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 fa64 	bl	8006e28 <USBD_CtlError>
            err++;
 8006960:	7afb      	ldrb	r3, [r7, #11]
 8006962:	3301      	adds	r3, #1
 8006964:	72fb      	strb	r3, [r7, #11]
          break;
 8006966:	e03b      	b.n	80069e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d00b      	beq.n	800698c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	687a      	ldr	r2, [r7, #4]
 800697e:	7c12      	ldrb	r2, [r2, #16]
 8006980:	f107 0108 	add.w	r1, r7, #8
 8006984:	4610      	mov	r0, r2
 8006986:	4798      	blx	r3
 8006988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800698a:	e029      	b.n	80069e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800698c:	6839      	ldr	r1, [r7, #0]
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 fa4a 	bl	8006e28 <USBD_CtlError>
            err++;
 8006994:	7afb      	ldrb	r3, [r7, #11]
 8006996:	3301      	adds	r3, #1
 8006998:	72fb      	strb	r3, [r7, #11]
          break;
 800699a:	e021      	b.n	80069e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d00b      	beq.n	80069c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	7c12      	ldrb	r2, [r2, #16]
 80069b4:	f107 0108 	add.w	r1, r7, #8
 80069b8:	4610      	mov	r0, r2
 80069ba:	4798      	blx	r3
 80069bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069be:	e00f      	b.n	80069e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 fa30 	bl	8006e28 <USBD_CtlError>
            err++;
 80069c8:	7afb      	ldrb	r3, [r7, #11]
 80069ca:	3301      	adds	r3, #1
 80069cc:	72fb      	strb	r3, [r7, #11]
          break;
 80069ce:	e007      	b.n	80069e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa28 	bl	8006e28 <USBD_CtlError>
          err++;
 80069d8:	7afb      	ldrb	r3, [r7, #11]
 80069da:	3301      	adds	r3, #1
 80069dc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80069de:	bf00      	nop
      }
      break;
 80069e0:	e037      	b.n	8006a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	7c1b      	ldrb	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d109      	bne.n	80069fe <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069f2:	f107 0208 	add.w	r2, r7, #8
 80069f6:	4610      	mov	r0, r2
 80069f8:	4798      	blx	r3
 80069fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069fc:	e029      	b.n	8006a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069fe:	6839      	ldr	r1, [r7, #0]
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f000 fa11 	bl	8006e28 <USBD_CtlError>
        err++;
 8006a06:	7afb      	ldrb	r3, [r7, #11]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006a0c:	e021      	b.n	8006a52 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	7c1b      	ldrb	r3, [r3, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d10d      	bne.n	8006a32 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1e:	f107 0208 	add.w	r2, r7, #8
 8006a22:	4610      	mov	r0, r2
 8006a24:	4798      	blx	r3
 8006a26:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	2207      	movs	r2, #7
 8006a2e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a30:	e00f      	b.n	8006a52 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f9f7 	bl	8006e28 <USBD_CtlError>
        err++;
 8006a3a:	7afb      	ldrb	r3, [r7, #11]
 8006a3c:	3301      	adds	r3, #1
 8006a3e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a40:	e007      	b.n	8006a52 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a42:	6839      	ldr	r1, [r7, #0]
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 f9ef 	bl	8006e28 <USBD_CtlError>
      err++;
 8006a4a:	7afb      	ldrb	r3, [r7, #11]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	72fb      	strb	r3, [r7, #11]
      break;
 8006a50:	bf00      	nop
  }

  if (err != 0U)
 8006a52:	7afb      	ldrb	r3, [r7, #11]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d11e      	bne.n	8006a96 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	88db      	ldrh	r3, [r3, #6]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d016      	beq.n	8006a8e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a60:	893b      	ldrh	r3, [r7, #8]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00e      	beq.n	8006a84 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	88da      	ldrh	r2, [r3, #6]
 8006a6a:	893b      	ldrh	r3, [r7, #8]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	bf28      	it	cs
 8006a70:	4613      	movcs	r3, r2
 8006a72:	b29b      	uxth	r3, r3
 8006a74:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a76:	893b      	ldrh	r3, [r7, #8]
 8006a78:	461a      	mov	r2, r3
 8006a7a:	68f9      	ldr	r1, [r7, #12]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa44 	bl	8006f0a <USBD_CtlSendData>
 8006a82:	e009      	b.n	8006a98 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9ce 	bl	8006e28 <USBD_CtlError>
 8006a8c:	e004      	b.n	8006a98 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fa95 	bl	8006fbe <USBD_CtlSendStatus>
 8006a94:	e000      	b.n	8006a98 <USBD_GetDescriptor+0x2cc>
    return;
 8006a96:	bf00      	nop
  }
}
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop

08006aa0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	889b      	ldrh	r3, [r3, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d131      	bne.n	8006b16 <USBD_SetAddress+0x76>
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	88db      	ldrh	r3, [r3, #6]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d12d      	bne.n	8006b16 <USBD_SetAddress+0x76>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	885b      	ldrh	r3, [r3, #2]
 8006abe:	2b7f      	cmp	r3, #127	; 0x7f
 8006ac0:	d829      	bhi.n	8006b16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	885b      	ldrh	r3, [r3, #2]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006acc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	2b03      	cmp	r3, #3
 8006ad8:	d104      	bne.n	8006ae4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 f9a3 	bl	8006e28 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ae2:	e01d      	b.n	8006b20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	7bfa      	ldrb	r2, [r7, #15]
 8006ae8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	4619      	mov	r1, r3
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 fe3f 	bl	8007774 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 fa61 	bl	8006fbe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006afc:	7bfb      	ldrb	r3, [r7, #15]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d004      	beq.n	8006b0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2202      	movs	r2, #2
 8006b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b0a:	e009      	b.n	8006b20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b14:	e004      	b.n	8006b20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f000 f985 	bl	8006e28 <USBD_CtlError>
  }
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	885b      	ldrh	r3, [r3, #2]
 8006b3a:	b2da      	uxtb	r2, r3
 8006b3c:	4b4c      	ldr	r3, [pc, #304]	; (8006c70 <USBD_SetConfig+0x148>)
 8006b3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b40:	4b4b      	ldr	r3, [pc, #300]	; (8006c70 <USBD_SetConfig+0x148>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d905      	bls.n	8006b54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f96c 	bl	8006e28 <USBD_CtlError>
    return USBD_FAIL;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e088      	b.n	8006c66 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d002      	beq.n	8006b66 <USBD_SetConfig+0x3e>
 8006b60:	2b03      	cmp	r3, #3
 8006b62:	d025      	beq.n	8006bb0 <USBD_SetConfig+0x88>
 8006b64:	e071      	b.n	8006c4a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b66:	4b42      	ldr	r3, [pc, #264]	; (8006c70 <USBD_SetConfig+0x148>)
 8006b68:	781b      	ldrb	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d01c      	beq.n	8006ba8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8006b6e:	4b40      	ldr	r3, [pc, #256]	; (8006c70 <USBD_SetConfig+0x148>)
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b78:	4b3d      	ldr	r3, [pc, #244]	; (8006c70 <USBD_SetConfig+0x148>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff f949 	bl	8005e16 <USBD_SetClassConfig>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 f949 	bl	8006e28 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b96:	e065      	b.n	8006c64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	f000 fa10 	bl	8006fbe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2203      	movs	r2, #3
 8006ba2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ba6:	e05d      	b.n	8006c64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fa08 	bl	8006fbe <USBD_CtlSendStatus>
      break;
 8006bae:	e059      	b.n	8006c64 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006bb0:	4b2f      	ldr	r3, [pc, #188]	; (8006c70 <USBD_SetConfig+0x148>)
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d112      	bne.n	8006bde <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2202      	movs	r2, #2
 8006bbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006bc0:	4b2b      	ldr	r3, [pc, #172]	; (8006c70 <USBD_SetConfig+0x148>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006bca:	4b29      	ldr	r3, [pc, #164]	; (8006c70 <USBD_SetConfig+0x148>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	4619      	mov	r1, r3
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7ff f93c 	bl	8005e4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f9f1 	bl	8006fbe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006bdc:	e042      	b.n	8006c64 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006bde:	4b24      	ldr	r3, [pc, #144]	; (8006c70 <USBD_SetConfig+0x148>)
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d02a      	beq.n	8006c42 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f7ff f92a 	bl	8005e4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006bfa:	4b1d      	ldr	r3, [pc, #116]	; (8006c70 <USBD_SetConfig+0x148>)
 8006bfc:	781b      	ldrb	r3, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c04:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <USBD_SetConfig+0x148>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	4619      	mov	r1, r3
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f7ff f903 	bl	8005e16 <USBD_SetClassConfig>
 8006c10:	4603      	mov	r3, r0
 8006c12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00f      	beq.n	8006c3a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f903 	bl	8006e28 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	4619      	mov	r1, r3
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f7ff f90f 	bl	8005e4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c38:	e014      	b.n	8006c64 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 f9bf 	bl	8006fbe <USBD_CtlSendStatus>
      break;
 8006c40:	e010      	b.n	8006c64 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f9bb 	bl	8006fbe <USBD_CtlSendStatus>
      break;
 8006c48:	e00c      	b.n	8006c64 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006c4a:	6839      	ldr	r1, [r7, #0]
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f8eb 	bl	8006e28 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c52:	4b07      	ldr	r3, [pc, #28]	; (8006c70 <USBD_SetConfig+0x148>)
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff f8f8 	bl	8005e4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c5e:	2303      	movs	r3, #3
 8006c60:	73fb      	strb	r3, [r7, #15]
      break;
 8006c62:	bf00      	nop
  }

  return ret;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	200001e8 	.word	0x200001e8

08006c74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	88db      	ldrh	r3, [r3, #6]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d004      	beq.n	8006c90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f8cd 	bl	8006e28 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c8e:	e023      	b.n	8006cd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c96:	b2db      	uxtb	r3, r3
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	dc02      	bgt.n	8006ca2 <USBD_GetConfig+0x2e>
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	dc03      	bgt.n	8006ca8 <USBD_GetConfig+0x34>
 8006ca0:	e015      	b.n	8006cce <USBD_GetConfig+0x5a>
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d00b      	beq.n	8006cbe <USBD_GetConfig+0x4a>
 8006ca6:	e012      	b.n	8006cce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f927 	bl	8006f0a <USBD_CtlSendData>
        break;
 8006cbc:	e00c      	b.n	8006cd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f91f 	bl	8006f0a <USBD_CtlSendData>
        break;
 8006ccc:	e004      	b.n	8006cd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 f8a9 	bl	8006e28 <USBD_CtlError>
        break;
 8006cd6:	bf00      	nop
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b082      	sub	sp, #8
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	2b02      	cmp	r3, #2
 8006cf6:	d81e      	bhi.n	8006d36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	88db      	ldrh	r3, [r3, #6]
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d004      	beq.n	8006d0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f890 	bl	8006e28 <USBD_CtlError>
        break;
 8006d08:	e01a      	b.n	8006d40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d005      	beq.n	8006d26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	f043 0202 	orr.w	r2, r3, #2
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	2202      	movs	r2, #2
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f8eb 	bl	8006f0a <USBD_CtlSendData>
      break;
 8006d34:	e004      	b.n	8006d40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f875 	bl	8006e28 <USBD_CtlError>
      break;
 8006d3e:	bf00      	nop
  }
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	885b      	ldrh	r3, [r3, #2]
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d106      	bne.n	8006d68 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 f92b 	bl	8006fbe <USBD_CtlSendStatus>
  }
}
 8006d68:	bf00      	nop
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	2b02      	cmp	r3, #2
 8006d86:	d80b      	bhi.n	8006da0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	885b      	ldrh	r3, [r3, #2]
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d10c      	bne.n	8006daa <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f910 	bl	8006fbe <USBD_CtlSendStatus>
      }
      break;
 8006d9e:	e004      	b.n	8006daa <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006da0:	6839      	ldr	r1, [r7, #0]
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f840 	bl	8006e28 <USBD_CtlError>
      break;
 8006da8:	e000      	b.n	8006dac <USBD_ClrFeature+0x3c>
      break;
 8006daa:	bf00      	nop
  }
}
 8006dac:	bf00      	nop
 8006dae:	3708      	adds	r7, #8
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	781a      	ldrb	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	781a      	ldrb	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	3301      	adds	r3, #1
 8006ddc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff fabc 	bl	800635c <SWAPBYTE>
 8006de4:	4603      	mov	r3, r0
 8006de6:	461a      	mov	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	3301      	adds	r3, #1
 8006df0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3301      	adds	r3, #1
 8006df6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f7ff faaf 	bl	800635c <SWAPBYTE>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461a      	mov	r2, r3
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	3301      	adds	r3, #1
 8006e0a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	3301      	adds	r3, #1
 8006e10:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff faa2 	bl	800635c <SWAPBYTE>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	80da      	strh	r2, [r3, #6]
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 fc33 	bl	80076a0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fc2f 	bl	80076a0 <USBD_LL_StallEP>
}
 8006e42:	bf00      	nop
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}

08006e4a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e4a:	b580      	push	{r7, lr}
 8006e4c:	b086      	sub	sp, #24
 8006e4e:	af00      	add	r7, sp, #0
 8006e50:	60f8      	str	r0, [r7, #12]
 8006e52:	60b9      	str	r1, [r7, #8]
 8006e54:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e56:	2300      	movs	r3, #0
 8006e58:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d036      	beq.n	8006ece <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e64:	6938      	ldr	r0, [r7, #16]
 8006e66:	f000 f836 	bl	8006ed6 <USBD_GetLen>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	005b      	lsls	r3, r3, #1
 8006e72:	b29a      	uxth	r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	7812      	ldrb	r2, [r2, #0]
 8006e82:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e84:	7dfb      	ldrb	r3, [r7, #23]
 8006e86:	3301      	adds	r3, #1
 8006e88:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e8a:	7dfb      	ldrb	r3, [r7, #23]
 8006e8c:	68ba      	ldr	r2, [r7, #8]
 8006e8e:	4413      	add	r3, r2
 8006e90:	2203      	movs	r2, #3
 8006e92:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e94:	7dfb      	ldrb	r3, [r7, #23]
 8006e96:	3301      	adds	r3, #1
 8006e98:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e9a:	e013      	b.n	8006ec4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e9c:	7dfb      	ldrb	r3, [r7, #23]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	7812      	ldrb	r2, [r2, #0]
 8006ea6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	613b      	str	r3, [r7, #16]
    idx++;
 8006eae:	7dfb      	ldrb	r3, [r7, #23]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	4413      	add	r3, r2
 8006eba:	2200      	movs	r2, #0
 8006ebc:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ebe:	7dfb      	ldrb	r3, [r7, #23]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d1e7      	bne.n	8006e9c <USBD_GetString+0x52>
 8006ecc:	e000      	b.n	8006ed0 <USBD_GetString+0x86>
    return;
 8006ece:	bf00      	nop
  }
}
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b085      	sub	sp, #20
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ee6:	e005      	b.n	8006ef4 <USBD_GetLen+0x1e>
  {
    len++;
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	3301      	adds	r3, #1
 8006eec:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1f5      	bne.n	8006ee8 <USBD_GetLen+0x12>
  }

  return len;
 8006efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f0a:	b580      	push	{r7, lr}
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	60f8      	str	r0, [r7, #12]
 8006f12:	60b9      	str	r1, [r7, #8]
 8006f14:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	68ba      	ldr	r2, [r7, #8]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f000 fc3e 	bl	80077b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f36:	2300      	movs	r3, #0
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	2100      	movs	r1, #0
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fc2d 	bl	80077b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3710      	adds	r7, #16
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	60f8      	str	r0, [r7, #12]
 8006f6a:	60b9      	str	r1, [r7, #8]
 8006f6c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2203      	movs	r2, #3
 8006f72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fc31 	bl	80077f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f92:	2300      	movs	r3, #0
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	2100      	movs	r1, #0
 8006fae:	68f8      	ldr	r0, [r7, #12]
 8006fb0:	f000 fc20 	bl	80077f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2204      	movs	r2, #4
 8006fca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fce:	2300      	movs	r3, #0
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 fbec 	bl	80077b2 <USBD_LL_Transmit>

  return USBD_OK;
 8006fda:	2300      	movs	r3, #0
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3708      	adds	r7, #8
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2205      	movs	r2, #5
 8006ff0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	f000 fbfa 	bl	80077f4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3708      	adds	r7, #8
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
	...

0800700c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007010:	2200      	movs	r2, #0
 8007012:	4912      	ldr	r1, [pc, #72]	; (800705c <MX_USB_DEVICE_Init+0x50>)
 8007014:	4812      	ldr	r0, [pc, #72]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 8007016:	f7fe fe90 	bl	8005d3a <USBD_Init>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007020:	f7fa fa76 	bl	8001510 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8007024:	490f      	ldr	r1, [pc, #60]	; (8007064 <MX_USB_DEVICE_Init+0x58>)
 8007026:	480e      	ldr	r0, [pc, #56]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 8007028:	f7fe feb7 	bl	8005d9a <USBD_RegisterClass>
 800702c:	4603      	mov	r3, r0
 800702e:	2b00      	cmp	r3, #0
 8007030:	d001      	beq.n	8007036 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007032:	f7fa fa6d 	bl	8001510 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8007036:	490c      	ldr	r1, [pc, #48]	; (8007068 <MX_USB_DEVICE_Init+0x5c>)
 8007038:	4809      	ldr	r0, [pc, #36]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 800703a:	f7fe fe69 	bl	8005d10 <USBD_CUSTOM_HID_RegisterInterface>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007044:	f7fa fa64 	bl	8001510 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007048:	4805      	ldr	r0, [pc, #20]	; (8007060 <MX_USB_DEVICE_Init+0x54>)
 800704a:	f7fe fecd 	bl	8005de8 <USBD_Start>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	d001      	beq.n	8007058 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007054:	f7fa fa5c 	bl	8001510 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007058:	bf00      	nop
 800705a:	bd80      	pop	{r7, pc}
 800705c:	20000114 	.word	0x20000114
 8007060:	20000368 	.word	0x20000368
 8007064:	2000000c 	.word	0x2000000c
 8007068:	20000104 	.word	0x20000104

0800706c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007070:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007072:	4618      	mov	r0, r3
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8007080:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007082:	4618      	mov	r0, r3
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	460a      	mov	r2, r1
 8007096:	71fb      	strb	r3, [r7, #7]
 8007098:	4613      	mov	r3, r2
 800709a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800709c:	4803      	ldr	r0, [pc, #12]	; (80070ac <CUSTOM_HID_OutEvent_FS+0x20>)
 800709e:	f7fe fdea 	bl	8005c76 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80070a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}
 80070ac:	20000368 	.word	0x20000368

080070b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b083      	sub	sp, #12
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	6039      	str	r1, [r7, #0]
 80070ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	2212      	movs	r2, #18
 80070c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070c2:	4b03      	ldr	r3, [pc, #12]	; (80070d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	20000130 	.word	0x20000130

080070d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	4603      	mov	r3, r0
 80070dc:	6039      	str	r1, [r7, #0]
 80070de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2204      	movs	r2, #4
 80070e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070e6:	4b03      	ldr	r3, [pc, #12]	; (80070f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	20000144 	.word	0x20000144

080070f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b082      	sub	sp, #8
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	4603      	mov	r3, r0
 8007100:	6039      	str	r1, [r7, #0]
 8007102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007104:	79fb      	ldrb	r3, [r7, #7]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d105      	bne.n	8007116 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800710a:	683a      	ldr	r2, [r7, #0]
 800710c:	4907      	ldr	r1, [pc, #28]	; (800712c <USBD_FS_ProductStrDescriptor+0x34>)
 800710e:	4808      	ldr	r0, [pc, #32]	; (8007130 <USBD_FS_ProductStrDescriptor+0x38>)
 8007110:	f7ff fe9b 	bl	8006e4a <USBD_GetString>
 8007114:	e004      	b.n	8007120 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007116:	683a      	ldr	r2, [r7, #0]
 8007118:	4904      	ldr	r1, [pc, #16]	; (800712c <USBD_FS_ProductStrDescriptor+0x34>)
 800711a:	4805      	ldr	r0, [pc, #20]	; (8007130 <USBD_FS_ProductStrDescriptor+0x38>)
 800711c:	f7ff fe95 	bl	8006e4a <USBD_GetString>
  }
  return USBD_StrDesc;
 8007120:	4b02      	ldr	r3, [pc, #8]	; (800712c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007122:	4618      	mov	r0, r3
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	20000638 	.word	0x20000638
 8007130:	08008c20 	.word	0x08008c20

08007134 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	4603      	mov	r3, r0
 800713c:	6039      	str	r1, [r7, #0]
 800713e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	4904      	ldr	r1, [pc, #16]	; (8007154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007144:	4804      	ldr	r0, [pc, #16]	; (8007158 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007146:	f7ff fe80 	bl	8006e4a <USBD_GetString>
  return USBD_StrDesc;
 800714a:	4b02      	ldr	r3, [pc, #8]	; (8007154 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800714c:	4618      	mov	r0, r3
 800714e:	3708      	adds	r7, #8
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}
 8007154:	20000638 	.word	0x20000638
 8007158:	08008c40 	.word	0x08008c40

0800715c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	6039      	str	r1, [r7, #0]
 8007166:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	221a      	movs	r2, #26
 800716c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800716e:	f000 f843 	bl	80071f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007172:	4b02      	ldr	r3, [pc, #8]	; (800717c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007174:	4618      	mov	r0, r3
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20000148 	.word	0x20000148

08007180 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	6039      	str	r1, [r7, #0]
 800718a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800718c:	79fb      	ldrb	r3, [r7, #7]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d105      	bne.n	800719e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	4907      	ldr	r1, [pc, #28]	; (80071b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007196:	4808      	ldr	r0, [pc, #32]	; (80071b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007198:	f7ff fe57 	bl	8006e4a <USBD_GetString>
 800719c:	e004      	b.n	80071a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4904      	ldr	r1, [pc, #16]	; (80071b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80071a2:	4805      	ldr	r0, [pc, #20]	; (80071b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80071a4:	f7ff fe51 	bl	8006e4a <USBD_GetString>
  }
  return USBD_StrDesc;
 80071a8:	4b02      	ldr	r3, [pc, #8]	; (80071b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80071aa:	4618      	mov	r0, r3
 80071ac:	3708      	adds	r7, #8
 80071ae:	46bd      	mov	sp, r7
 80071b0:	bd80      	pop	{r7, pc}
 80071b2:	bf00      	nop
 80071b4:	20000638 	.word	0x20000638
 80071b8:	08008c54 	.word	0x08008c54

080071bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	4603      	mov	r3, r0
 80071c4:	6039      	str	r1, [r7, #0]
 80071c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071c8:	79fb      	ldrb	r3, [r7, #7]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d105      	bne.n	80071da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	4907      	ldr	r1, [pc, #28]	; (80071f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071d2:	4808      	ldr	r0, [pc, #32]	; (80071f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071d4:	f7ff fe39 	bl	8006e4a <USBD_GetString>
 80071d8:	e004      	b.n	80071e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	4904      	ldr	r1, [pc, #16]	; (80071f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071de:	4805      	ldr	r0, [pc, #20]	; (80071f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071e0:	f7ff fe33 	bl	8006e4a <USBD_GetString>
  }
  return USBD_StrDesc;
 80071e4:	4b02      	ldr	r3, [pc, #8]	; (80071f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	20000638 	.word	0x20000638
 80071f4:	08008c68 	.word	0x08008c68

080071f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071fe:	4b0f      	ldr	r3, [pc, #60]	; (800723c <Get_SerialNum+0x44>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <Get_SerialNum+0x48>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800720a:	4b0e      	ldr	r3, [pc, #56]	; (8007244 <Get_SerialNum+0x4c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007210:	68fa      	ldr	r2, [r7, #12]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4413      	add	r3, r2
 8007216:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d009      	beq.n	8007232 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800721e:	2208      	movs	r2, #8
 8007220:	4909      	ldr	r1, [pc, #36]	; (8007248 <Get_SerialNum+0x50>)
 8007222:	68f8      	ldr	r0, [r7, #12]
 8007224:	f000 f814 	bl	8007250 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007228:	2204      	movs	r2, #4
 800722a:	4908      	ldr	r1, [pc, #32]	; (800724c <Get_SerialNum+0x54>)
 800722c:	68b8      	ldr	r0, [r7, #8]
 800722e:	f000 f80f 	bl	8007250 <IntToUnicode>
  }
}
 8007232:	bf00      	nop
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	1fff7a10 	.word	0x1fff7a10
 8007240:	1fff7a14 	.word	0x1fff7a14
 8007244:	1fff7a18 	.word	0x1fff7a18
 8007248:	2000014a 	.word	0x2000014a
 800724c:	2000015a 	.word	0x2000015a

08007250 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007250:	b480      	push	{r7}
 8007252:	b087      	sub	sp, #28
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	4613      	mov	r3, r2
 800725c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007262:	2300      	movs	r3, #0
 8007264:	75fb      	strb	r3, [r7, #23]
 8007266:	e027      	b.n	80072b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	0f1b      	lsrs	r3, r3, #28
 800726c:	2b09      	cmp	r3, #9
 800726e:	d80b      	bhi.n	8007288 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	0f1b      	lsrs	r3, r3, #28
 8007274:	b2da      	uxtb	r2, r3
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4619      	mov	r1, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	440b      	add	r3, r1
 8007280:	3230      	adds	r2, #48	; 0x30
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e00a      	b.n	800729e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	0f1b      	lsrs	r3, r3, #28
 800728c:	b2da      	uxtb	r2, r3
 800728e:	7dfb      	ldrb	r3, [r7, #23]
 8007290:	005b      	lsls	r3, r3, #1
 8007292:	4619      	mov	r1, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	440b      	add	r3, r1
 8007298:	3237      	adds	r2, #55	; 0x37
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	005b      	lsls	r3, r3, #1
 80072a8:	3301      	adds	r3, #1
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4413      	add	r3, r2
 80072ae:	2200      	movs	r2, #0
 80072b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80072b2:	7dfb      	ldrb	r3, [r7, #23]
 80072b4:	3301      	adds	r3, #1
 80072b6:	75fb      	strb	r3, [r7, #23]
 80072b8:	7dfa      	ldrb	r2, [r7, #23]
 80072ba:	79fb      	ldrb	r3, [r7, #7]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d3d3      	bcc.n	8007268 <IntToUnicode+0x18>
  }
}
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	371c      	adds	r7, #28
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr
	...

080072d0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072d8:	f107 0314 	add.w	r3, r7, #20
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	605a      	str	r2, [r3, #4]
 80072e2:	609a      	str	r2, [r3, #8]
 80072e4:	60da      	str	r2, [r3, #12]
 80072e6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072f0:	d13a      	bne.n	8007368 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072f2:	2300      	movs	r3, #0
 80072f4:	613b      	str	r3, [r7, #16]
 80072f6:	4b1e      	ldr	r3, [pc, #120]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 80072f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fa:	4a1d      	ldr	r2, [pc, #116]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 80072fc:	f043 0301 	orr.w	r3, r3, #1
 8007300:	6313      	str	r3, [r2, #48]	; 0x30
 8007302:	4b1b      	ldr	r3, [pc, #108]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 8007304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	613b      	str	r3, [r7, #16]
 800730c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800730e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007314:	2302      	movs	r3, #2
 8007316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007318:	2300      	movs	r3, #0
 800731a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800731c:	2303      	movs	r3, #3
 800731e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007320:	230a      	movs	r3, #10
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007324:	f107 0314 	add.w	r3, r7, #20
 8007328:	4619      	mov	r1, r3
 800732a:	4812      	ldr	r0, [pc, #72]	; (8007374 <HAL_PCD_MspInit+0xa4>)
 800732c:	f7fa fc26 	bl	8001b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007330:	4b0f      	ldr	r3, [pc, #60]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 8007332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007334:	4a0e      	ldr	r2, [pc, #56]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 8007336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733a:	6353      	str	r3, [r2, #52]	; 0x34
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 8007342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007344:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 8007346:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800734a:	6453      	str	r3, [r2, #68]	; 0x44
 800734c:	4b08      	ldr	r3, [pc, #32]	; (8007370 <HAL_PCD_MspInit+0xa0>)
 800734e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007358:	2200      	movs	r2, #0
 800735a:	2100      	movs	r1, #0
 800735c:	2043      	movs	r0, #67	; 0x43
 800735e:	f7fa fbd6 	bl	8001b0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007362:	2043      	movs	r0, #67	; 0x43
 8007364:	f7fa fbef 	bl	8001b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007368:	bf00      	nop
 800736a:	3728      	adds	r7, #40	; 0x28
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40023800 	.word	0x40023800
 8007374:	40020000 	.word	0x40020000

08007378 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800738c:	4619      	mov	r1, r3
 800738e:	4610      	mov	r0, r2
 8007390:	f7fe fd75 	bl	8005e7e <USBD_LL_SetupStage>
}
 8007394:	bf00      	nop
 8007396:	3708      	adds	r7, #8
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073ae:	78fa      	ldrb	r2, [r7, #3]
 80073b0:	6879      	ldr	r1, [r7, #4]
 80073b2:	4613      	mov	r3, r2
 80073b4:	00db      	lsls	r3, r3, #3
 80073b6:	1a9b      	subs	r3, r3, r2
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	440b      	add	r3, r1
 80073bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	78fb      	ldrb	r3, [r7, #3]
 80073c4:	4619      	mov	r1, r3
 80073c6:	f7fe fdaf 	bl	8005f28 <USBD_LL_DataOutStage>
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073d2:	b580      	push	{r7, lr}
 80073d4:	b082      	sub	sp, #8
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	460b      	mov	r3, r1
 80073dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80073e4:	78fa      	ldrb	r2, [r7, #3]
 80073e6:	6879      	ldr	r1, [r7, #4]
 80073e8:	4613      	mov	r3, r2
 80073ea:	00db      	lsls	r3, r3, #3
 80073ec:	1a9b      	subs	r3, r3, r2
 80073ee:	009b      	lsls	r3, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	3348      	adds	r3, #72	; 0x48
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7fe fdf8 	bl	8005fee <USBD_LL_DataInStage>
}
 80073fe:	bf00      	nop
 8007400:	3708      	adds	r7, #8
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b082      	sub	sp, #8
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007414:	4618      	mov	r0, r3
 8007416:	f7fe ff0c 	bl	8006232 <USBD_LL_SOF>
}
 800741a:	bf00      	nop
 800741c:	3708      	adds	r7, #8
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}

08007422 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007422:	b580      	push	{r7, lr}
 8007424:	b084      	sub	sp, #16
 8007426:	af00      	add	r7, sp, #0
 8007428:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800742a:	2301      	movs	r3, #1
 800742c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	2b02      	cmp	r3, #2
 8007434:	d001      	beq.n	800743a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007436:	f7fa f86b 	bl	8001510 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007440:	7bfa      	ldrb	r2, [r7, #15]
 8007442:	4611      	mov	r1, r2
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe feb6 	bl	80061b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007450:	4618      	mov	r0, r3
 8007452:	f7fe fe62 	bl	800611a <USBD_LL_Reset>
}
 8007456:	bf00      	nop
 8007458:	3710      	adds	r7, #16
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}
	...

08007460 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800746e:	4618      	mov	r0, r3
 8007470:	f7fe feb1 	bl	80061d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6812      	ldr	r2, [r2, #0]
 8007482:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007486:	f043 0301 	orr.w	r3, r3, #1
 800748a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007494:	4b04      	ldr	r3, [pc, #16]	; (80074a8 <HAL_PCD_SuspendCallback+0x48>)
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	4a03      	ldr	r2, [pc, #12]	; (80074a8 <HAL_PCD_SuspendCallback+0x48>)
 800749a:	f043 0306 	orr.w	r3, r3, #6
 800749e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80074a0:	bf00      	nop
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	e000ed00 	.word	0xe000ed00

080074ac <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7fe fea1 	bl	8006202 <USBD_LL_Resume>
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074da:	78fa      	ldrb	r2, [r7, #3]
 80074dc:	4611      	mov	r1, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f7fe feef 	bl	80062c2 <USBD_LL_IsoOUTIncomplete>
}
 80074e4:	bf00      	nop
 80074e6:	3708      	adds	r7, #8
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}

080074ec <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	4611      	mov	r1, r2
 8007502:	4618      	mov	r0, r3
 8007504:	f7fe feb7 	bl	8006276 <USBD_LL_IsoINIncomplete>
}
 8007508:	bf00      	nop
 800750a:	3708      	adds	r7, #8
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fef5 	bl	800630e <USBD_LL_DevConnected>
}
 8007524:	bf00      	nop
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800753a:	4618      	mov	r0, r3
 800753c:	f7fe fef2 	bl	8006324 <USBD_LL_DevDisconnected>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d13c      	bne.n	80075d2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007558:	4a20      	ldr	r2, [pc, #128]	; (80075dc <USBD_LL_Init+0x94>)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <USBD_LL_Init+0x94>)
 8007564:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007568:	4b1c      	ldr	r3, [pc, #112]	; (80075dc <USBD_LL_Init+0x94>)
 800756a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800756e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007570:	4b1a      	ldr	r3, [pc, #104]	; (80075dc <USBD_LL_Init+0x94>)
 8007572:	2204      	movs	r2, #4
 8007574:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007576:	4b19      	ldr	r3, [pc, #100]	; (80075dc <USBD_LL_Init+0x94>)
 8007578:	2202      	movs	r2, #2
 800757a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800757c:	4b17      	ldr	r3, [pc, #92]	; (80075dc <USBD_LL_Init+0x94>)
 800757e:	2200      	movs	r2, #0
 8007580:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007582:	4b16      	ldr	r3, [pc, #88]	; (80075dc <USBD_LL_Init+0x94>)
 8007584:	2202      	movs	r2, #2
 8007586:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007588:	4b14      	ldr	r3, [pc, #80]	; (80075dc <USBD_LL_Init+0x94>)
 800758a:	2200      	movs	r2, #0
 800758c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800758e:	4b13      	ldr	r3, [pc, #76]	; (80075dc <USBD_LL_Init+0x94>)
 8007590:	2200      	movs	r2, #0
 8007592:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007594:	4b11      	ldr	r3, [pc, #68]	; (80075dc <USBD_LL_Init+0x94>)
 8007596:	2200      	movs	r2, #0
 8007598:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800759a:	4b10      	ldr	r3, [pc, #64]	; (80075dc <USBD_LL_Init+0x94>)
 800759c:	2200      	movs	r2, #0
 800759e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80075a0:	4b0e      	ldr	r3, [pc, #56]	; (80075dc <USBD_LL_Init+0x94>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80075a6:	480d      	ldr	r0, [pc, #52]	; (80075dc <USBD_LL_Init+0x94>)
 80075a8:	f7fa fdca 	bl	8002140 <HAL_PCD_Init>
 80075ac:	4603      	mov	r3, r0
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d001      	beq.n	80075b6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80075b2:	f7f9 ffad 	bl	8001510 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80075b6:	2180      	movs	r1, #128	; 0x80
 80075b8:	4808      	ldr	r0, [pc, #32]	; (80075dc <USBD_LL_Init+0x94>)
 80075ba:	f7fb ff10 	bl	80033de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075be:	2240      	movs	r2, #64	; 0x40
 80075c0:	2100      	movs	r1, #0
 80075c2:	4806      	ldr	r0, [pc, #24]	; (80075dc <USBD_LL_Init+0x94>)
 80075c4:	f7fb fec4 	bl	8003350 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075c8:	2280      	movs	r2, #128	; 0x80
 80075ca:	2101      	movs	r1, #1
 80075cc:	4803      	ldr	r0, [pc, #12]	; (80075dc <USBD_LL_Init+0x94>)
 80075ce:	f7fb febf 	bl	8003350 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	20000838 	.word	0x20000838

080075e0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80075f6:	4618      	mov	r0, r3
 80075f8:	f7fa febf 	bl	800237a <HAL_PCD_Start>
 80075fc:	4603      	mov	r3, r0
 80075fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	4618      	mov	r0, r3
 8007604:	f000 f930 	bl	8007868 <USBD_Get_USB_Status>
 8007608:	4603      	mov	r3, r0
 800760a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800760c:	7bbb      	ldrb	r3, [r7, #14]
}
 800760e:	4618      	mov	r0, r3
 8007610:	3710      	adds	r7, #16
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b084      	sub	sp, #16
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	4608      	mov	r0, r1
 8007620:	4611      	mov	r1, r2
 8007622:	461a      	mov	r2, r3
 8007624:	4603      	mov	r3, r0
 8007626:	70fb      	strb	r3, [r7, #3]
 8007628:	460b      	mov	r3, r1
 800762a:	70bb      	strb	r3, [r7, #2]
 800762c:	4613      	mov	r3, r2
 800762e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007634:	2300      	movs	r3, #0
 8007636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800763e:	78bb      	ldrb	r3, [r7, #2]
 8007640:	883a      	ldrh	r2, [r7, #0]
 8007642:	78f9      	ldrb	r1, [r7, #3]
 8007644:	f7fb faa3 	bl	8002b8e <HAL_PCD_EP_Open>
 8007648:	4603      	mov	r3, r0
 800764a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764c:	7bfb      	ldrb	r3, [r7, #15]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f90a 	bl	8007868 <USBD_Get_USB_Status>
 8007654:	4603      	mov	r3, r0
 8007656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007658:	7bbb      	ldrb	r3, [r7, #14]
}
 800765a:	4618      	mov	r0, r3
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}

08007662 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b084      	sub	sp, #16
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
 800766a:	460b      	mov	r3, r1
 800766c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800766e:	2300      	movs	r3, #0
 8007670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007672:	2300      	movs	r3, #0
 8007674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800767c:	78fa      	ldrb	r2, [r7, #3]
 800767e:	4611      	mov	r1, r2
 8007680:	4618      	mov	r0, r3
 8007682:	f7fb faec 	bl	8002c5e <HAL_PCD_EP_Close>
 8007686:	4603      	mov	r3, r0
 8007688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	4618      	mov	r0, r3
 800768e:	f000 f8eb 	bl	8007868 <USBD_Get_USB_Status>
 8007692:	4603      	mov	r3, r0
 8007694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007696:	7bbb      	ldrb	r3, [r7, #14]
}
 8007698:	4618      	mov	r0, r3
 800769a:	3710      	adds	r7, #16
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	460b      	mov	r3, r1
 80076aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ac:	2300      	movs	r3, #0
 80076ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076ba:	78fa      	ldrb	r2, [r7, #3]
 80076bc:	4611      	mov	r1, r2
 80076be:	4618      	mov	r0, r3
 80076c0:	f7fb fbac 	bl	8002e1c <HAL_PCD_EP_SetStall>
 80076c4:	4603      	mov	r3, r0
 80076c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076c8:	7bfb      	ldrb	r3, [r7, #15]
 80076ca:	4618      	mov	r0, r3
 80076cc:	f000 f8cc 	bl	8007868 <USBD_Get_USB_Status>
 80076d0:	4603      	mov	r3, r0
 80076d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3710      	adds	r7, #16
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	6078      	str	r0, [r7, #4]
 80076e6:	460b      	mov	r3, r1
 80076e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ee:	2300      	movs	r3, #0
 80076f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80076f8:	78fa      	ldrb	r2, [r7, #3]
 80076fa:	4611      	mov	r1, r2
 80076fc:	4618      	mov	r0, r3
 80076fe:	f7fb fbf1 	bl	8002ee4 <HAL_PCD_EP_ClrStall>
 8007702:	4603      	mov	r3, r0
 8007704:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	4618      	mov	r0, r3
 800770a:	f000 f8ad 	bl	8007868 <USBD_Get_USB_Status>
 800770e:	4603      	mov	r3, r0
 8007710:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007712:	7bbb      	ldrb	r3, [r7, #14]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3710      	adds	r7, #16
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}

0800771c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	460b      	mov	r3, r1
 8007726:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800772e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007730:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007734:	2b00      	cmp	r3, #0
 8007736:	da0b      	bge.n	8007750 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	4613      	mov	r3, r2
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	1a9b      	subs	r3, r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	333e      	adds	r3, #62	; 0x3e
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	e00b      	b.n	8007768 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007750:	78fb      	ldrb	r3, [r7, #3]
 8007752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	4613      	mov	r3, r2
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	1a9b      	subs	r3, r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	440b      	add	r3, r1
 8007762:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007766:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007768:	4618      	mov	r0, r3
 800776a:	3714      	adds	r7, #20
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007784:	2300      	movs	r3, #0
 8007786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800778e:	78fa      	ldrb	r2, [r7, #3]
 8007790:	4611      	mov	r1, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f7fb f9d6 	bl	8002b44 <HAL_PCD_SetAddress>
 8007798:	4603      	mov	r3, r0
 800779a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800779c:	7bfb      	ldrb	r3, [r7, #15]
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 f862 	bl	8007868 <USBD_Get_USB_Status>
 80077a4:	4603      	mov	r3, r0
 80077a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	607a      	str	r2, [r7, #4]
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	460b      	mov	r3, r1
 80077c0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80077d0:	7af9      	ldrb	r1, [r7, #11]
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	f7fb fad7 	bl	8002d88 <HAL_PCD_EP_Transmit>
 80077da:	4603      	mov	r3, r0
 80077dc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077de:	7dfb      	ldrb	r3, [r7, #23]
 80077e0:	4618      	mov	r0, r3
 80077e2:	f000 f841 	bl	8007868 <USBD_Get_USB_Status>
 80077e6:	4603      	mov	r3, r0
 80077e8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077ea:	7dbb      	ldrb	r3, [r7, #22]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}

080077f4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	607a      	str	r2, [r7, #4]
 80077fe:	603b      	str	r3, [r7, #0]
 8007800:	460b      	mov	r3, r1
 8007802:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007804:	2300      	movs	r3, #0
 8007806:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007808:	2300      	movs	r3, #0
 800780a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007812:	7af9      	ldrb	r1, [r7, #11]
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	f7fb fa6b 	bl	8002cf2 <HAL_PCD_EP_Receive>
 800781c:	4603      	mov	r3, r0
 800781e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007820:	7dfb      	ldrb	r3, [r7, #23]
 8007822:	4618      	mov	r0, r3
 8007824:	f000 f820 	bl	8007868 <USBD_Get_USB_Status>
 8007828:	4603      	mov	r3, r0
 800782a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800782c:	7dbb      	ldrb	r3, [r7, #22]
}
 800782e:	4618      	mov	r0, r3
 8007830:	3718      	adds	r7, #24
 8007832:	46bd      	mov	sp, r7
 8007834:	bd80      	pop	{r7, pc}
	...

08007838 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8007840:	4b03      	ldr	r3, [pc, #12]	; (8007850 <USBD_static_malloc+0x18>)
}
 8007842:	4618      	mov	r0, r3
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	200001ec 	.word	0x200001ec

08007854 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]

}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007872:	2300      	movs	r3, #0
 8007874:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	2b03      	cmp	r3, #3
 800787a:	d817      	bhi.n	80078ac <USBD_Get_USB_Status+0x44>
 800787c:	a201      	add	r2, pc, #4	; (adr r2, 8007884 <USBD_Get_USB_Status+0x1c>)
 800787e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007882:	bf00      	nop
 8007884:	08007895 	.word	0x08007895
 8007888:	0800789b 	.word	0x0800789b
 800788c:	080078a1 	.word	0x080078a1
 8007890:	080078a7 	.word	0x080078a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007894:	2300      	movs	r3, #0
 8007896:	73fb      	strb	r3, [r7, #15]
    break;
 8007898:	e00b      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800789a:	2303      	movs	r3, #3
 800789c:	73fb      	strb	r3, [r7, #15]
    break;
 800789e:	e008      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80078a0:	2301      	movs	r3, #1
 80078a2:	73fb      	strb	r3, [r7, #15]
    break;
 80078a4:	e005      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80078a6:	2303      	movs	r3, #3
 80078a8:	73fb      	strb	r3, [r7, #15]
    break;
 80078aa:	e002      	b.n	80078b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80078ac:	2303      	movs	r3, #3
 80078ae:	73fb      	strb	r3, [r7, #15]
    break;
 80078b0:	bf00      	nop
  }
  return usb_status;
 80078b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	3714      	adds	r7, #20
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <__errno>:
 80078c0:	4b01      	ldr	r3, [pc, #4]	; (80078c8 <__errno+0x8>)
 80078c2:	6818      	ldr	r0, [r3, #0]
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	20000164 	.word	0x20000164

080078cc <__libc_init_array>:
 80078cc:	b570      	push	{r4, r5, r6, lr}
 80078ce:	4d0d      	ldr	r5, [pc, #52]	; (8007904 <__libc_init_array+0x38>)
 80078d0:	4c0d      	ldr	r4, [pc, #52]	; (8007908 <__libc_init_array+0x3c>)
 80078d2:	1b64      	subs	r4, r4, r5
 80078d4:	10a4      	asrs	r4, r4, #2
 80078d6:	2600      	movs	r6, #0
 80078d8:	42a6      	cmp	r6, r4
 80078da:	d109      	bne.n	80078f0 <__libc_init_array+0x24>
 80078dc:	4d0b      	ldr	r5, [pc, #44]	; (800790c <__libc_init_array+0x40>)
 80078de:	4c0c      	ldr	r4, [pc, #48]	; (8007910 <__libc_init_array+0x44>)
 80078e0:	f001 f990 	bl	8008c04 <_init>
 80078e4:	1b64      	subs	r4, r4, r5
 80078e6:	10a4      	asrs	r4, r4, #2
 80078e8:	2600      	movs	r6, #0
 80078ea:	42a6      	cmp	r6, r4
 80078ec:	d105      	bne.n	80078fa <__libc_init_array+0x2e>
 80078ee:	bd70      	pop	{r4, r5, r6, pc}
 80078f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80078f4:	4798      	blx	r3
 80078f6:	3601      	adds	r6, #1
 80078f8:	e7ee      	b.n	80078d8 <__libc_init_array+0xc>
 80078fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80078fe:	4798      	blx	r3
 8007900:	3601      	adds	r6, #1
 8007902:	e7f2      	b.n	80078ea <__libc_init_array+0x1e>
 8007904:	08008e78 	.word	0x08008e78
 8007908:	08008e78 	.word	0x08008e78
 800790c:	08008e78 	.word	0x08008e78
 8007910:	08008e7c 	.word	0x08008e7c

08007914 <memset>:
 8007914:	4402      	add	r2, r0
 8007916:	4603      	mov	r3, r0
 8007918:	4293      	cmp	r3, r2
 800791a:	d100      	bne.n	800791e <memset+0xa>
 800791c:	4770      	bx	lr
 800791e:	f803 1b01 	strb.w	r1, [r3], #1
 8007922:	e7f9      	b.n	8007918 <memset+0x4>
 8007924:	0000      	movs	r0, r0
	...

08007928 <cos>:
 8007928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800792a:	ec53 2b10 	vmov	r2, r3, d0
 800792e:	4824      	ldr	r0, [pc, #144]	; (80079c0 <cos+0x98>)
 8007930:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007934:	4281      	cmp	r1, r0
 8007936:	dc06      	bgt.n	8007946 <cos+0x1e>
 8007938:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 80079b8 <cos+0x90>
 800793c:	f000 fb8c 	bl	8008058 <__kernel_cos>
 8007940:	ec51 0b10 	vmov	r0, r1, d0
 8007944:	e007      	b.n	8007956 <cos+0x2e>
 8007946:	481f      	ldr	r0, [pc, #124]	; (80079c4 <cos+0x9c>)
 8007948:	4281      	cmp	r1, r0
 800794a:	dd09      	ble.n	8007960 <cos+0x38>
 800794c:	ee10 0a10 	vmov	r0, s0
 8007950:	4619      	mov	r1, r3
 8007952:	f7f8 fc45 	bl	80001e0 <__aeabi_dsub>
 8007956:	ec41 0b10 	vmov	d0, r0, r1
 800795a:	b005      	add	sp, #20
 800795c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007960:	4668      	mov	r0, sp
 8007962:	f000 f8b9 	bl	8007ad8 <__ieee754_rem_pio2>
 8007966:	f000 0003 	and.w	r0, r0, #3
 800796a:	2801      	cmp	r0, #1
 800796c:	d007      	beq.n	800797e <cos+0x56>
 800796e:	2802      	cmp	r0, #2
 8007970:	d012      	beq.n	8007998 <cos+0x70>
 8007972:	b9c0      	cbnz	r0, 80079a6 <cos+0x7e>
 8007974:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007978:	ed9d 0b00 	vldr	d0, [sp]
 800797c:	e7de      	b.n	800793c <cos+0x14>
 800797e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007982:	ed9d 0b00 	vldr	d0, [sp]
 8007986:	f000 ff6f 	bl	8008868 <__kernel_sin>
 800798a:	ec53 2b10 	vmov	r2, r3, d0
 800798e:	ee10 0a10 	vmov	r0, s0
 8007992:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007996:	e7de      	b.n	8007956 <cos+0x2e>
 8007998:	ed9d 1b02 	vldr	d1, [sp, #8]
 800799c:	ed9d 0b00 	vldr	d0, [sp]
 80079a0:	f000 fb5a 	bl	8008058 <__kernel_cos>
 80079a4:	e7f1      	b.n	800798a <cos+0x62>
 80079a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80079aa:	ed9d 0b00 	vldr	d0, [sp]
 80079ae:	2001      	movs	r0, #1
 80079b0:	f000 ff5a 	bl	8008868 <__kernel_sin>
 80079b4:	e7c4      	b.n	8007940 <cos+0x18>
 80079b6:	bf00      	nop
	...
 80079c0:	3fe921fb 	.word	0x3fe921fb
 80079c4:	7fefffff 	.word	0x7fefffff

080079c8 <sin>:
 80079c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80079ca:	ec53 2b10 	vmov	r2, r3, d0
 80079ce:	4826      	ldr	r0, [pc, #152]	; (8007a68 <sin+0xa0>)
 80079d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80079d4:	4281      	cmp	r1, r0
 80079d6:	dc07      	bgt.n	80079e8 <sin+0x20>
 80079d8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8007a60 <sin+0x98>
 80079dc:	2000      	movs	r0, #0
 80079de:	f000 ff43 	bl	8008868 <__kernel_sin>
 80079e2:	ec51 0b10 	vmov	r0, r1, d0
 80079e6:	e007      	b.n	80079f8 <sin+0x30>
 80079e8:	4820      	ldr	r0, [pc, #128]	; (8007a6c <sin+0xa4>)
 80079ea:	4281      	cmp	r1, r0
 80079ec:	dd09      	ble.n	8007a02 <sin+0x3a>
 80079ee:	ee10 0a10 	vmov	r0, s0
 80079f2:	4619      	mov	r1, r3
 80079f4:	f7f8 fbf4 	bl	80001e0 <__aeabi_dsub>
 80079f8:	ec41 0b10 	vmov	d0, r0, r1
 80079fc:	b005      	add	sp, #20
 80079fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8007a02:	4668      	mov	r0, sp
 8007a04:	f000 f868 	bl	8007ad8 <__ieee754_rem_pio2>
 8007a08:	f000 0003 	and.w	r0, r0, #3
 8007a0c:	2801      	cmp	r0, #1
 8007a0e:	d008      	beq.n	8007a22 <sin+0x5a>
 8007a10:	2802      	cmp	r0, #2
 8007a12:	d00d      	beq.n	8007a30 <sin+0x68>
 8007a14:	b9d0      	cbnz	r0, 8007a4c <sin+0x84>
 8007a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a1a:	ed9d 0b00 	vldr	d0, [sp]
 8007a1e:	2001      	movs	r0, #1
 8007a20:	e7dd      	b.n	80079de <sin+0x16>
 8007a22:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a26:	ed9d 0b00 	vldr	d0, [sp]
 8007a2a:	f000 fb15 	bl	8008058 <__kernel_cos>
 8007a2e:	e7d8      	b.n	80079e2 <sin+0x1a>
 8007a30:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a34:	ed9d 0b00 	vldr	d0, [sp]
 8007a38:	2001      	movs	r0, #1
 8007a3a:	f000 ff15 	bl	8008868 <__kernel_sin>
 8007a3e:	ec53 2b10 	vmov	r2, r3, d0
 8007a42:	ee10 0a10 	vmov	r0, s0
 8007a46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007a4a:	e7d5      	b.n	80079f8 <sin+0x30>
 8007a4c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007a50:	ed9d 0b00 	vldr	d0, [sp]
 8007a54:	f000 fb00 	bl	8008058 <__kernel_cos>
 8007a58:	e7f1      	b.n	8007a3e <sin+0x76>
 8007a5a:	bf00      	nop
 8007a5c:	f3af 8000 	nop.w
	...
 8007a68:	3fe921fb 	.word	0x3fe921fb
 8007a6c:	7fefffff 	.word	0x7fefffff

08007a70 <sqrt>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	ed2d 8b02 	vpush	{d8}
 8007a76:	ec55 4b10 	vmov	r4, r5, d0
 8007a7a:	f000 fa37 	bl	8007eec <__ieee754_sqrt>
 8007a7e:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <sqrt+0x64>)
 8007a80:	eeb0 8a40 	vmov.f32	s16, s0
 8007a84:	eef0 8a60 	vmov.f32	s17, s1
 8007a88:	f993 3000 	ldrsb.w	r3, [r3]
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	d019      	beq.n	8007ac4 <sqrt+0x54>
 8007a90:	4622      	mov	r2, r4
 8007a92:	462b      	mov	r3, r5
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f8 fff4 	bl	8000a84 <__aeabi_dcmpun>
 8007a9c:	b990      	cbnz	r0, 8007ac4 <sqrt+0x54>
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 ffc5 	bl	8000a34 <__aeabi_dcmplt>
 8007aaa:	b158      	cbz	r0, 8007ac4 <sqrt+0x54>
 8007aac:	f7ff ff08 	bl	80078c0 <__errno>
 8007ab0:	2321      	movs	r3, #33	; 0x21
 8007ab2:	6003      	str	r3, [r0, #0]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	4610      	mov	r0, r2
 8007aba:	4619      	mov	r1, r3
 8007abc:	f7f8 fe72 	bl	80007a4 <__aeabi_ddiv>
 8007ac0:	ec41 0b18 	vmov	d8, r0, r1
 8007ac4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ac8:	eef0 0a68 	vmov.f32	s1, s17
 8007acc:	ecbd 8b02 	vpop	{d8}
 8007ad0:	bd38      	pop	{r3, r4, r5, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200001c8 	.word	0x200001c8

08007ad8 <__ieee754_rem_pio2>:
 8007ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007adc:	ed2d 8b02 	vpush	{d8}
 8007ae0:	ec55 4b10 	vmov	r4, r5, d0
 8007ae4:	4bca      	ldr	r3, [pc, #808]	; (8007e10 <__ieee754_rem_pio2+0x338>)
 8007ae6:	b08b      	sub	sp, #44	; 0x2c
 8007ae8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8007aec:	4598      	cmp	r8, r3
 8007aee:	4682      	mov	sl, r0
 8007af0:	9502      	str	r5, [sp, #8]
 8007af2:	dc08      	bgt.n	8007b06 <__ieee754_rem_pio2+0x2e>
 8007af4:	2200      	movs	r2, #0
 8007af6:	2300      	movs	r3, #0
 8007af8:	ed80 0b00 	vstr	d0, [r0]
 8007afc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007b00:	f04f 0b00 	mov.w	fp, #0
 8007b04:	e028      	b.n	8007b58 <__ieee754_rem_pio2+0x80>
 8007b06:	4bc3      	ldr	r3, [pc, #780]	; (8007e14 <__ieee754_rem_pio2+0x33c>)
 8007b08:	4598      	cmp	r8, r3
 8007b0a:	dc78      	bgt.n	8007bfe <__ieee754_rem_pio2+0x126>
 8007b0c:	9b02      	ldr	r3, [sp, #8]
 8007b0e:	4ec2      	ldr	r6, [pc, #776]	; (8007e18 <__ieee754_rem_pio2+0x340>)
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	ee10 0a10 	vmov	r0, s0
 8007b16:	a3b0      	add	r3, pc, #704	; (adr r3, 8007dd8 <__ieee754_rem_pio2+0x300>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	4629      	mov	r1, r5
 8007b1e:	dd39      	ble.n	8007b94 <__ieee754_rem_pio2+0xbc>
 8007b20:	f7f8 fb5e 	bl	80001e0 <__aeabi_dsub>
 8007b24:	45b0      	cmp	r8, r6
 8007b26:	4604      	mov	r4, r0
 8007b28:	460d      	mov	r5, r1
 8007b2a:	d01b      	beq.n	8007b64 <__ieee754_rem_pio2+0x8c>
 8007b2c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007de0 <__ieee754_rem_pio2+0x308>)
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f7f8 fb55 	bl	80001e0 <__aeabi_dsub>
 8007b36:	4602      	mov	r2, r0
 8007b38:	460b      	mov	r3, r1
 8007b3a:	e9ca 2300 	strd	r2, r3, [sl]
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7f8 fb4d 	bl	80001e0 <__aeabi_dsub>
 8007b46:	a3a6      	add	r3, pc, #664	; (adr r3, 8007de0 <__ieee754_rem_pio2+0x308>)
 8007b48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b4c:	f7f8 fb48 	bl	80001e0 <__aeabi_dsub>
 8007b50:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007b54:	f04f 0b01 	mov.w	fp, #1
 8007b58:	4658      	mov	r0, fp
 8007b5a:	b00b      	add	sp, #44	; 0x2c
 8007b5c:	ecbd 8b02 	vpop	{d8}
 8007b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b64:	a3a0      	add	r3, pc, #640	; (adr r3, 8007de8 <__ieee754_rem_pio2+0x310>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	f7f8 fb39 	bl	80001e0 <__aeabi_dsub>
 8007b6e:	a3a0      	add	r3, pc, #640	; (adr r3, 8007df0 <__ieee754_rem_pio2+0x318>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	4604      	mov	r4, r0
 8007b76:	460d      	mov	r5, r1
 8007b78:	f7f8 fb32 	bl	80001e0 <__aeabi_dsub>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	e9ca 2300 	strd	r2, r3, [sl]
 8007b84:	4620      	mov	r0, r4
 8007b86:	4629      	mov	r1, r5
 8007b88:	f7f8 fb2a 	bl	80001e0 <__aeabi_dsub>
 8007b8c:	a398      	add	r3, pc, #608	; (adr r3, 8007df0 <__ieee754_rem_pio2+0x318>)
 8007b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b92:	e7db      	b.n	8007b4c <__ieee754_rem_pio2+0x74>
 8007b94:	f7f8 fb26 	bl	80001e4 <__adddf3>
 8007b98:	45b0      	cmp	r8, r6
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	460d      	mov	r5, r1
 8007b9e:	d016      	beq.n	8007bce <__ieee754_rem_pio2+0xf6>
 8007ba0:	a38f      	add	r3, pc, #572	; (adr r3, 8007de0 <__ieee754_rem_pio2+0x308>)
 8007ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba6:	f7f8 fb1d 	bl	80001e4 <__adddf3>
 8007baa:	4602      	mov	r2, r0
 8007bac:	460b      	mov	r3, r1
 8007bae:	e9ca 2300 	strd	r2, r3, [sl]
 8007bb2:	4620      	mov	r0, r4
 8007bb4:	4629      	mov	r1, r5
 8007bb6:	f7f8 fb13 	bl	80001e0 <__aeabi_dsub>
 8007bba:	a389      	add	r3, pc, #548	; (adr r3, 8007de0 <__ieee754_rem_pio2+0x308>)
 8007bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc0:	f7f8 fb10 	bl	80001e4 <__adddf3>
 8007bc4:	f04f 3bff 	mov.w	fp, #4294967295
 8007bc8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007bcc:	e7c4      	b.n	8007b58 <__ieee754_rem_pio2+0x80>
 8007bce:	a386      	add	r3, pc, #536	; (adr r3, 8007de8 <__ieee754_rem_pio2+0x310>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f7f8 fb06 	bl	80001e4 <__adddf3>
 8007bd8:	a385      	add	r3, pc, #532	; (adr r3, 8007df0 <__ieee754_rem_pio2+0x318>)
 8007bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bde:	4604      	mov	r4, r0
 8007be0:	460d      	mov	r5, r1
 8007be2:	f7f8 faff 	bl	80001e4 <__adddf3>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	e9ca 2300 	strd	r2, r3, [sl]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 faf5 	bl	80001e0 <__aeabi_dsub>
 8007bf6:	a37e      	add	r3, pc, #504	; (adr r3, 8007df0 <__ieee754_rem_pio2+0x318>)
 8007bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bfc:	e7e0      	b.n	8007bc0 <__ieee754_rem_pio2+0xe8>
 8007bfe:	4b87      	ldr	r3, [pc, #540]	; (8007e1c <__ieee754_rem_pio2+0x344>)
 8007c00:	4598      	cmp	r8, r3
 8007c02:	f300 80d9 	bgt.w	8007db8 <__ieee754_rem_pio2+0x2e0>
 8007c06:	f000 feed 	bl	80089e4 <fabs>
 8007c0a:	ec55 4b10 	vmov	r4, r5, d0
 8007c0e:	ee10 0a10 	vmov	r0, s0
 8007c12:	a379      	add	r3, pc, #484	; (adr r3, 8007df8 <__ieee754_rem_pio2+0x320>)
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	4629      	mov	r1, r5
 8007c1a:	f7f8 fc99 	bl	8000550 <__aeabi_dmul>
 8007c1e:	4b80      	ldr	r3, [pc, #512]	; (8007e20 <__ieee754_rem_pio2+0x348>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	f7f8 fadf 	bl	80001e4 <__adddf3>
 8007c26:	f7f8 ff43 	bl	8000ab0 <__aeabi_d2iz>
 8007c2a:	4683      	mov	fp, r0
 8007c2c:	f7f8 fc26 	bl	800047c <__aeabi_i2d>
 8007c30:	4602      	mov	r2, r0
 8007c32:	460b      	mov	r3, r1
 8007c34:	ec43 2b18 	vmov	d8, r2, r3
 8007c38:	a367      	add	r3, pc, #412	; (adr r3, 8007dd8 <__ieee754_rem_pio2+0x300>)
 8007c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3e:	f7f8 fc87 	bl	8000550 <__aeabi_dmul>
 8007c42:	4602      	mov	r2, r0
 8007c44:	460b      	mov	r3, r1
 8007c46:	4620      	mov	r0, r4
 8007c48:	4629      	mov	r1, r5
 8007c4a:	f7f8 fac9 	bl	80001e0 <__aeabi_dsub>
 8007c4e:	a364      	add	r3, pc, #400	; (adr r3, 8007de0 <__ieee754_rem_pio2+0x308>)
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	4606      	mov	r6, r0
 8007c56:	460f      	mov	r7, r1
 8007c58:	ec51 0b18 	vmov	r0, r1, d8
 8007c5c:	f7f8 fc78 	bl	8000550 <__aeabi_dmul>
 8007c60:	f1bb 0f1f 	cmp.w	fp, #31
 8007c64:	4604      	mov	r4, r0
 8007c66:	460d      	mov	r5, r1
 8007c68:	dc0d      	bgt.n	8007c86 <__ieee754_rem_pio2+0x1ae>
 8007c6a:	4b6e      	ldr	r3, [pc, #440]	; (8007e24 <__ieee754_rem_pio2+0x34c>)
 8007c6c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8007c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c74:	4543      	cmp	r3, r8
 8007c76:	d006      	beq.n	8007c86 <__ieee754_rem_pio2+0x1ae>
 8007c78:	4622      	mov	r2, r4
 8007c7a:	462b      	mov	r3, r5
 8007c7c:	4630      	mov	r0, r6
 8007c7e:	4639      	mov	r1, r7
 8007c80:	f7f8 faae 	bl	80001e0 <__aeabi_dsub>
 8007c84:	e00f      	b.n	8007ca6 <__ieee754_rem_pio2+0x1ce>
 8007c86:	462b      	mov	r3, r5
 8007c88:	4622      	mov	r2, r4
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	f7f8 faa7 	bl	80001e0 <__aeabi_dsub>
 8007c92:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007c9c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8007ca0:	f1b8 0f10 	cmp.w	r8, #16
 8007ca4:	dc02      	bgt.n	8007cac <__ieee754_rem_pio2+0x1d4>
 8007ca6:	e9ca 0100 	strd	r0, r1, [sl]
 8007caa:	e039      	b.n	8007d20 <__ieee754_rem_pio2+0x248>
 8007cac:	a34e      	add	r3, pc, #312	; (adr r3, 8007de8 <__ieee754_rem_pio2+0x310>)
 8007cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb2:	ec51 0b18 	vmov	r0, r1, d8
 8007cb6:	f7f8 fc4b 	bl	8000550 <__aeabi_dmul>
 8007cba:	4604      	mov	r4, r0
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	4639      	mov	r1, r7
 8007cc6:	f7f8 fa8b 	bl	80001e0 <__aeabi_dsub>
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	4680      	mov	r8, r0
 8007cd0:	4689      	mov	r9, r1
 8007cd2:	4630      	mov	r0, r6
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	f7f8 fa83 	bl	80001e0 <__aeabi_dsub>
 8007cda:	4622      	mov	r2, r4
 8007cdc:	462b      	mov	r3, r5
 8007cde:	f7f8 fa7f 	bl	80001e0 <__aeabi_dsub>
 8007ce2:	a343      	add	r3, pc, #268	; (adr r3, 8007df0 <__ieee754_rem_pio2+0x318>)
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	4604      	mov	r4, r0
 8007cea:	460d      	mov	r5, r1
 8007cec:	ec51 0b18 	vmov	r0, r1, d8
 8007cf0:	f7f8 fc2e 	bl	8000550 <__aeabi_dmul>
 8007cf4:	4622      	mov	r2, r4
 8007cf6:	462b      	mov	r3, r5
 8007cf8:	f7f8 fa72 	bl	80001e0 <__aeabi_dsub>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4604      	mov	r4, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	4640      	mov	r0, r8
 8007d06:	4649      	mov	r1, r9
 8007d08:	f7f8 fa6a 	bl	80001e0 <__aeabi_dsub>
 8007d0c:	9a03      	ldr	r2, [sp, #12]
 8007d0e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b31      	cmp	r3, #49	; 0x31
 8007d16:	dc24      	bgt.n	8007d62 <__ieee754_rem_pio2+0x28a>
 8007d18:	e9ca 0100 	strd	r0, r1, [sl]
 8007d1c:	4646      	mov	r6, r8
 8007d1e:	464f      	mov	r7, r9
 8007d20:	e9da 8900 	ldrd	r8, r9, [sl]
 8007d24:	4630      	mov	r0, r6
 8007d26:	4642      	mov	r2, r8
 8007d28:	464b      	mov	r3, r9
 8007d2a:	4639      	mov	r1, r7
 8007d2c:	f7f8 fa58 	bl	80001e0 <__aeabi_dsub>
 8007d30:	462b      	mov	r3, r5
 8007d32:	4622      	mov	r2, r4
 8007d34:	f7f8 fa54 	bl	80001e0 <__aeabi_dsub>
 8007d38:	9b02      	ldr	r3, [sp, #8]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007d40:	f6bf af0a 	bge.w	8007b58 <__ieee754_rem_pio2+0x80>
 8007d44:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007d48:	f8ca 3004 	str.w	r3, [sl, #4]
 8007d4c:	f8ca 8000 	str.w	r8, [sl]
 8007d50:	f8ca 0008 	str.w	r0, [sl, #8]
 8007d54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d58:	f8ca 300c 	str.w	r3, [sl, #12]
 8007d5c:	f1cb 0b00 	rsb	fp, fp, #0
 8007d60:	e6fa      	b.n	8007b58 <__ieee754_rem_pio2+0x80>
 8007d62:	a327      	add	r3, pc, #156	; (adr r3, 8007e00 <__ieee754_rem_pio2+0x328>)
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	ec51 0b18 	vmov	r0, r1, d8
 8007d6c:	f7f8 fbf0 	bl	8000550 <__aeabi_dmul>
 8007d70:	4604      	mov	r4, r0
 8007d72:	460d      	mov	r5, r1
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4640      	mov	r0, r8
 8007d7a:	4649      	mov	r1, r9
 8007d7c:	f7f8 fa30 	bl	80001e0 <__aeabi_dsub>
 8007d80:	4602      	mov	r2, r0
 8007d82:	460b      	mov	r3, r1
 8007d84:	4606      	mov	r6, r0
 8007d86:	460f      	mov	r7, r1
 8007d88:	4640      	mov	r0, r8
 8007d8a:	4649      	mov	r1, r9
 8007d8c:	f7f8 fa28 	bl	80001e0 <__aeabi_dsub>
 8007d90:	4622      	mov	r2, r4
 8007d92:	462b      	mov	r3, r5
 8007d94:	f7f8 fa24 	bl	80001e0 <__aeabi_dsub>
 8007d98:	a31b      	add	r3, pc, #108	; (adr r3, 8007e08 <__ieee754_rem_pio2+0x330>)
 8007d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d9e:	4604      	mov	r4, r0
 8007da0:	460d      	mov	r5, r1
 8007da2:	ec51 0b18 	vmov	r0, r1, d8
 8007da6:	f7f8 fbd3 	bl	8000550 <__aeabi_dmul>
 8007daa:	4622      	mov	r2, r4
 8007dac:	462b      	mov	r3, r5
 8007dae:	f7f8 fa17 	bl	80001e0 <__aeabi_dsub>
 8007db2:	4604      	mov	r4, r0
 8007db4:	460d      	mov	r5, r1
 8007db6:	e75f      	b.n	8007c78 <__ieee754_rem_pio2+0x1a0>
 8007db8:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <__ieee754_rem_pio2+0x350>)
 8007dba:	4598      	cmp	r8, r3
 8007dbc:	dd36      	ble.n	8007e2c <__ieee754_rem_pio2+0x354>
 8007dbe:	ee10 2a10 	vmov	r2, s0
 8007dc2:	462b      	mov	r3, r5
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fa0a 	bl	80001e0 <__aeabi_dsub>
 8007dcc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007dd0:	e9ca 0100 	strd	r0, r1, [sl]
 8007dd4:	e694      	b.n	8007b00 <__ieee754_rem_pio2+0x28>
 8007dd6:	bf00      	nop
 8007dd8:	54400000 	.word	0x54400000
 8007ddc:	3ff921fb 	.word	0x3ff921fb
 8007de0:	1a626331 	.word	0x1a626331
 8007de4:	3dd0b461 	.word	0x3dd0b461
 8007de8:	1a600000 	.word	0x1a600000
 8007dec:	3dd0b461 	.word	0x3dd0b461
 8007df0:	2e037073 	.word	0x2e037073
 8007df4:	3ba3198a 	.word	0x3ba3198a
 8007df8:	6dc9c883 	.word	0x6dc9c883
 8007dfc:	3fe45f30 	.word	0x3fe45f30
 8007e00:	2e000000 	.word	0x2e000000
 8007e04:	3ba3198a 	.word	0x3ba3198a
 8007e08:	252049c1 	.word	0x252049c1
 8007e0c:	397b839a 	.word	0x397b839a
 8007e10:	3fe921fb 	.word	0x3fe921fb
 8007e14:	4002d97b 	.word	0x4002d97b
 8007e18:	3ff921fb 	.word	0x3ff921fb
 8007e1c:	413921fb 	.word	0x413921fb
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	08008c98 	.word	0x08008c98
 8007e28:	7fefffff 	.word	0x7fefffff
 8007e2c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007e30:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007e34:	ee10 0a10 	vmov	r0, s0
 8007e38:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8007e3c:	ee10 6a10 	vmov	r6, s0
 8007e40:	460f      	mov	r7, r1
 8007e42:	f7f8 fe35 	bl	8000ab0 <__aeabi_d2iz>
 8007e46:	f7f8 fb19 	bl	800047c <__aeabi_i2d>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	4630      	mov	r0, r6
 8007e50:	4639      	mov	r1, r7
 8007e52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e56:	f7f8 f9c3 	bl	80001e0 <__aeabi_dsub>
 8007e5a:	4b22      	ldr	r3, [pc, #136]	; (8007ee4 <__ieee754_rem_pio2+0x40c>)
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f7f8 fb77 	bl	8000550 <__aeabi_dmul>
 8007e62:	460f      	mov	r7, r1
 8007e64:	4606      	mov	r6, r0
 8007e66:	f7f8 fe23 	bl	8000ab0 <__aeabi_d2iz>
 8007e6a:	f7f8 fb07 	bl	800047c <__aeabi_i2d>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4630      	mov	r0, r6
 8007e74:	4639      	mov	r1, r7
 8007e76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e7a:	f7f8 f9b1 	bl	80001e0 <__aeabi_dsub>
 8007e7e:	4b19      	ldr	r3, [pc, #100]	; (8007ee4 <__ieee754_rem_pio2+0x40c>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	f7f8 fb65 	bl	8000550 <__aeabi_dmul>
 8007e86:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e8a:	ad04      	add	r5, sp, #16
 8007e8c:	f04f 0803 	mov.w	r8, #3
 8007e90:	46a9      	mov	r9, r5
 8007e92:	2600      	movs	r6, #0
 8007e94:	2700      	movs	r7, #0
 8007e96:	4632      	mov	r2, r6
 8007e98:	463b      	mov	r3, r7
 8007e9a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8007e9e:	46c3      	mov	fp, r8
 8007ea0:	3d08      	subs	r5, #8
 8007ea2:	f108 38ff 	add.w	r8, r8, #4294967295
 8007ea6:	f7f8 fdbb 	bl	8000a20 <__aeabi_dcmpeq>
 8007eaa:	2800      	cmp	r0, #0
 8007eac:	d1f3      	bne.n	8007e96 <__ieee754_rem_pio2+0x3be>
 8007eae:	4b0e      	ldr	r3, [pc, #56]	; (8007ee8 <__ieee754_rem_pio2+0x410>)
 8007eb0:	9301      	str	r3, [sp, #4]
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	4622      	mov	r2, r4
 8007eb8:	465b      	mov	r3, fp
 8007eba:	4651      	mov	r1, sl
 8007ebc:	4648      	mov	r0, r9
 8007ebe:	f000 f993 	bl	80081e8 <__kernel_rem_pio2>
 8007ec2:	9b02      	ldr	r3, [sp, #8]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	4683      	mov	fp, r0
 8007ec8:	f6bf ae46 	bge.w	8007b58 <__ieee754_rem_pio2+0x80>
 8007ecc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007ed0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ed4:	f8ca 3004 	str.w	r3, [sl, #4]
 8007ed8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8007edc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007ee0:	e73a      	b.n	8007d58 <__ieee754_rem_pio2+0x280>
 8007ee2:	bf00      	nop
 8007ee4:	41700000 	.word	0x41700000
 8007ee8:	08008d18 	.word	0x08008d18

08007eec <__ieee754_sqrt>:
 8007eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ef0:	ec55 4b10 	vmov	r4, r5, d0
 8007ef4:	4e56      	ldr	r6, [pc, #344]	; (8008050 <__ieee754_sqrt+0x164>)
 8007ef6:	43ae      	bics	r6, r5
 8007ef8:	ee10 0a10 	vmov	r0, s0
 8007efc:	ee10 3a10 	vmov	r3, s0
 8007f00:	4629      	mov	r1, r5
 8007f02:	462a      	mov	r2, r5
 8007f04:	d110      	bne.n	8007f28 <__ieee754_sqrt+0x3c>
 8007f06:	ee10 2a10 	vmov	r2, s0
 8007f0a:	462b      	mov	r3, r5
 8007f0c:	f7f8 fb20 	bl	8000550 <__aeabi_dmul>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4620      	mov	r0, r4
 8007f16:	4629      	mov	r1, r5
 8007f18:	f7f8 f964 	bl	80001e4 <__adddf3>
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	460d      	mov	r5, r1
 8007f20:	ec45 4b10 	vmov	d0, r4, r5
 8007f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f28:	2d00      	cmp	r5, #0
 8007f2a:	dc10      	bgt.n	8007f4e <__ieee754_sqrt+0x62>
 8007f2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007f30:	4330      	orrs	r0, r6
 8007f32:	d0f5      	beq.n	8007f20 <__ieee754_sqrt+0x34>
 8007f34:	b15d      	cbz	r5, 8007f4e <__ieee754_sqrt+0x62>
 8007f36:	ee10 2a10 	vmov	r2, s0
 8007f3a:	462b      	mov	r3, r5
 8007f3c:	ee10 0a10 	vmov	r0, s0
 8007f40:	f7f8 f94e 	bl	80001e0 <__aeabi_dsub>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	f7f8 fc2c 	bl	80007a4 <__aeabi_ddiv>
 8007f4c:	e7e6      	b.n	8007f1c <__ieee754_sqrt+0x30>
 8007f4e:	1509      	asrs	r1, r1, #20
 8007f50:	d076      	beq.n	8008040 <__ieee754_sqrt+0x154>
 8007f52:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007f56:	07ce      	lsls	r6, r1, #31
 8007f58:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007f5c:	bf5e      	ittt	pl
 8007f5e:	0fda      	lsrpl	r2, r3, #31
 8007f60:	005b      	lslpl	r3, r3, #1
 8007f62:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007f66:	0fda      	lsrs	r2, r3, #31
 8007f68:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007f6c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007f70:	2000      	movs	r0, #0
 8007f72:	106d      	asrs	r5, r5, #1
 8007f74:	005b      	lsls	r3, r3, #1
 8007f76:	f04f 0e16 	mov.w	lr, #22
 8007f7a:	4684      	mov	ip, r0
 8007f7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f80:	eb0c 0401 	add.w	r4, ip, r1
 8007f84:	4294      	cmp	r4, r2
 8007f86:	bfde      	ittt	le
 8007f88:	1b12      	suble	r2, r2, r4
 8007f8a:	eb04 0c01 	addle.w	ip, r4, r1
 8007f8e:	1840      	addle	r0, r0, r1
 8007f90:	0052      	lsls	r2, r2, #1
 8007f92:	f1be 0e01 	subs.w	lr, lr, #1
 8007f96:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007f9a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007f9e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007fa2:	d1ed      	bne.n	8007f80 <__ieee754_sqrt+0x94>
 8007fa4:	4671      	mov	r1, lr
 8007fa6:	2720      	movs	r7, #32
 8007fa8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007fac:	4562      	cmp	r2, ip
 8007fae:	eb04 060e 	add.w	r6, r4, lr
 8007fb2:	dc02      	bgt.n	8007fba <__ieee754_sqrt+0xce>
 8007fb4:	d113      	bne.n	8007fde <__ieee754_sqrt+0xf2>
 8007fb6:	429e      	cmp	r6, r3
 8007fb8:	d811      	bhi.n	8007fde <__ieee754_sqrt+0xf2>
 8007fba:	2e00      	cmp	r6, #0
 8007fbc:	eb06 0e04 	add.w	lr, r6, r4
 8007fc0:	da43      	bge.n	800804a <__ieee754_sqrt+0x15e>
 8007fc2:	f1be 0f00 	cmp.w	lr, #0
 8007fc6:	db40      	blt.n	800804a <__ieee754_sqrt+0x15e>
 8007fc8:	f10c 0801 	add.w	r8, ip, #1
 8007fcc:	eba2 020c 	sub.w	r2, r2, ip
 8007fd0:	429e      	cmp	r6, r3
 8007fd2:	bf88      	it	hi
 8007fd4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007fd8:	1b9b      	subs	r3, r3, r6
 8007fda:	4421      	add	r1, r4
 8007fdc:	46c4      	mov	ip, r8
 8007fde:	0052      	lsls	r2, r2, #1
 8007fe0:	3f01      	subs	r7, #1
 8007fe2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007fe6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007fea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007fee:	d1dd      	bne.n	8007fac <__ieee754_sqrt+0xc0>
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	d006      	beq.n	8008002 <__ieee754_sqrt+0x116>
 8007ff4:	1c4c      	adds	r4, r1, #1
 8007ff6:	bf13      	iteet	ne
 8007ff8:	3101      	addne	r1, #1
 8007ffa:	3001      	addeq	r0, #1
 8007ffc:	4639      	moveq	r1, r7
 8007ffe:	f021 0101 	bicne.w	r1, r1, #1
 8008002:	1043      	asrs	r3, r0, #1
 8008004:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008008:	0849      	lsrs	r1, r1, #1
 800800a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800800e:	07c2      	lsls	r2, r0, #31
 8008010:	bf48      	it	mi
 8008012:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008016:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800801a:	460c      	mov	r4, r1
 800801c:	463d      	mov	r5, r7
 800801e:	e77f      	b.n	8007f20 <__ieee754_sqrt+0x34>
 8008020:	0ada      	lsrs	r2, r3, #11
 8008022:	3815      	subs	r0, #21
 8008024:	055b      	lsls	r3, r3, #21
 8008026:	2a00      	cmp	r2, #0
 8008028:	d0fa      	beq.n	8008020 <__ieee754_sqrt+0x134>
 800802a:	02d7      	lsls	r7, r2, #11
 800802c:	d50a      	bpl.n	8008044 <__ieee754_sqrt+0x158>
 800802e:	f1c1 0420 	rsb	r4, r1, #32
 8008032:	fa23 f404 	lsr.w	r4, r3, r4
 8008036:	1e4d      	subs	r5, r1, #1
 8008038:	408b      	lsls	r3, r1
 800803a:	4322      	orrs	r2, r4
 800803c:	1b41      	subs	r1, r0, r5
 800803e:	e788      	b.n	8007f52 <__ieee754_sqrt+0x66>
 8008040:	4608      	mov	r0, r1
 8008042:	e7f0      	b.n	8008026 <__ieee754_sqrt+0x13a>
 8008044:	0052      	lsls	r2, r2, #1
 8008046:	3101      	adds	r1, #1
 8008048:	e7ef      	b.n	800802a <__ieee754_sqrt+0x13e>
 800804a:	46e0      	mov	r8, ip
 800804c:	e7be      	b.n	8007fcc <__ieee754_sqrt+0xe0>
 800804e:	bf00      	nop
 8008050:	7ff00000 	.word	0x7ff00000
 8008054:	00000000 	.word	0x00000000

08008058 <__kernel_cos>:
 8008058:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800805c:	ec57 6b10 	vmov	r6, r7, d0
 8008060:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008064:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8008068:	ed8d 1b00 	vstr	d1, [sp]
 800806c:	da07      	bge.n	800807e <__kernel_cos+0x26>
 800806e:	ee10 0a10 	vmov	r0, s0
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 fd1c 	bl	8000ab0 <__aeabi_d2iz>
 8008078:	2800      	cmp	r0, #0
 800807a:	f000 8088 	beq.w	800818e <__kernel_cos+0x136>
 800807e:	4632      	mov	r2, r6
 8008080:	463b      	mov	r3, r7
 8008082:	4630      	mov	r0, r6
 8008084:	4639      	mov	r1, r7
 8008086:	f7f8 fa63 	bl	8000550 <__aeabi_dmul>
 800808a:	4b51      	ldr	r3, [pc, #324]	; (80081d0 <__kernel_cos+0x178>)
 800808c:	2200      	movs	r2, #0
 800808e:	4604      	mov	r4, r0
 8008090:	460d      	mov	r5, r1
 8008092:	f7f8 fa5d 	bl	8000550 <__aeabi_dmul>
 8008096:	a340      	add	r3, pc, #256	; (adr r3, 8008198 <__kernel_cos+0x140>)
 8008098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800809c:	4682      	mov	sl, r0
 800809e:	468b      	mov	fp, r1
 80080a0:	4620      	mov	r0, r4
 80080a2:	4629      	mov	r1, r5
 80080a4:	f7f8 fa54 	bl	8000550 <__aeabi_dmul>
 80080a8:	a33d      	add	r3, pc, #244	; (adr r3, 80081a0 <__kernel_cos+0x148>)
 80080aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ae:	f7f8 f899 	bl	80001e4 <__adddf3>
 80080b2:	4622      	mov	r2, r4
 80080b4:	462b      	mov	r3, r5
 80080b6:	f7f8 fa4b 	bl	8000550 <__aeabi_dmul>
 80080ba:	a33b      	add	r3, pc, #236	; (adr r3, 80081a8 <__kernel_cos+0x150>)
 80080bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c0:	f7f8 f88e 	bl	80001e0 <__aeabi_dsub>
 80080c4:	4622      	mov	r2, r4
 80080c6:	462b      	mov	r3, r5
 80080c8:	f7f8 fa42 	bl	8000550 <__aeabi_dmul>
 80080cc:	a338      	add	r3, pc, #224	; (adr r3, 80081b0 <__kernel_cos+0x158>)
 80080ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080d2:	f7f8 f887 	bl	80001e4 <__adddf3>
 80080d6:	4622      	mov	r2, r4
 80080d8:	462b      	mov	r3, r5
 80080da:	f7f8 fa39 	bl	8000550 <__aeabi_dmul>
 80080de:	a336      	add	r3, pc, #216	; (adr r3, 80081b8 <__kernel_cos+0x160>)
 80080e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e4:	f7f8 f87c 	bl	80001e0 <__aeabi_dsub>
 80080e8:	4622      	mov	r2, r4
 80080ea:	462b      	mov	r3, r5
 80080ec:	f7f8 fa30 	bl	8000550 <__aeabi_dmul>
 80080f0:	a333      	add	r3, pc, #204	; (adr r3, 80081c0 <__kernel_cos+0x168>)
 80080f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080f6:	f7f8 f875 	bl	80001e4 <__adddf3>
 80080fa:	4622      	mov	r2, r4
 80080fc:	462b      	mov	r3, r5
 80080fe:	f7f8 fa27 	bl	8000550 <__aeabi_dmul>
 8008102:	4622      	mov	r2, r4
 8008104:	462b      	mov	r3, r5
 8008106:	f7f8 fa23 	bl	8000550 <__aeabi_dmul>
 800810a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800810e:	4604      	mov	r4, r0
 8008110:	460d      	mov	r5, r1
 8008112:	4630      	mov	r0, r6
 8008114:	4639      	mov	r1, r7
 8008116:	f7f8 fa1b 	bl	8000550 <__aeabi_dmul>
 800811a:	460b      	mov	r3, r1
 800811c:	4602      	mov	r2, r0
 800811e:	4629      	mov	r1, r5
 8008120:	4620      	mov	r0, r4
 8008122:	f7f8 f85d 	bl	80001e0 <__aeabi_dsub>
 8008126:	4b2b      	ldr	r3, [pc, #172]	; (80081d4 <__kernel_cos+0x17c>)
 8008128:	4598      	cmp	r8, r3
 800812a:	4606      	mov	r6, r0
 800812c:	460f      	mov	r7, r1
 800812e:	dc10      	bgt.n	8008152 <__kernel_cos+0xfa>
 8008130:	4602      	mov	r2, r0
 8008132:	460b      	mov	r3, r1
 8008134:	4650      	mov	r0, sl
 8008136:	4659      	mov	r1, fp
 8008138:	f7f8 f852 	bl	80001e0 <__aeabi_dsub>
 800813c:	460b      	mov	r3, r1
 800813e:	4926      	ldr	r1, [pc, #152]	; (80081d8 <__kernel_cos+0x180>)
 8008140:	4602      	mov	r2, r0
 8008142:	2000      	movs	r0, #0
 8008144:	f7f8 f84c 	bl	80001e0 <__aeabi_dsub>
 8008148:	ec41 0b10 	vmov	d0, r0, r1
 800814c:	b003      	add	sp, #12
 800814e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008152:	4b22      	ldr	r3, [pc, #136]	; (80081dc <__kernel_cos+0x184>)
 8008154:	4920      	ldr	r1, [pc, #128]	; (80081d8 <__kernel_cos+0x180>)
 8008156:	4598      	cmp	r8, r3
 8008158:	bfcc      	ite	gt
 800815a:	4d21      	ldrgt	r5, [pc, #132]	; (80081e0 <__kernel_cos+0x188>)
 800815c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8008160:	2400      	movs	r4, #0
 8008162:	4622      	mov	r2, r4
 8008164:	462b      	mov	r3, r5
 8008166:	2000      	movs	r0, #0
 8008168:	f7f8 f83a 	bl	80001e0 <__aeabi_dsub>
 800816c:	4622      	mov	r2, r4
 800816e:	4680      	mov	r8, r0
 8008170:	4689      	mov	r9, r1
 8008172:	462b      	mov	r3, r5
 8008174:	4650      	mov	r0, sl
 8008176:	4659      	mov	r1, fp
 8008178:	f7f8 f832 	bl	80001e0 <__aeabi_dsub>
 800817c:	4632      	mov	r2, r6
 800817e:	463b      	mov	r3, r7
 8008180:	f7f8 f82e 	bl	80001e0 <__aeabi_dsub>
 8008184:	4602      	mov	r2, r0
 8008186:	460b      	mov	r3, r1
 8008188:	4640      	mov	r0, r8
 800818a:	4649      	mov	r1, r9
 800818c:	e7da      	b.n	8008144 <__kernel_cos+0xec>
 800818e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80081c8 <__kernel_cos+0x170>
 8008192:	e7db      	b.n	800814c <__kernel_cos+0xf4>
 8008194:	f3af 8000 	nop.w
 8008198:	be8838d4 	.word	0xbe8838d4
 800819c:	bda8fae9 	.word	0xbda8fae9
 80081a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80081a4:	3e21ee9e 	.word	0x3e21ee9e
 80081a8:	809c52ad 	.word	0x809c52ad
 80081ac:	3e927e4f 	.word	0x3e927e4f
 80081b0:	19cb1590 	.word	0x19cb1590
 80081b4:	3efa01a0 	.word	0x3efa01a0
 80081b8:	16c15177 	.word	0x16c15177
 80081bc:	3f56c16c 	.word	0x3f56c16c
 80081c0:	5555554c 	.word	0x5555554c
 80081c4:	3fa55555 	.word	0x3fa55555
 80081c8:	00000000 	.word	0x00000000
 80081cc:	3ff00000 	.word	0x3ff00000
 80081d0:	3fe00000 	.word	0x3fe00000
 80081d4:	3fd33332 	.word	0x3fd33332
 80081d8:	3ff00000 	.word	0x3ff00000
 80081dc:	3fe90000 	.word	0x3fe90000
 80081e0:	3fd20000 	.word	0x3fd20000
 80081e4:	00000000 	.word	0x00000000

080081e8 <__kernel_rem_pio2>:
 80081e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ec:	ed2d 8b02 	vpush	{d8}
 80081f0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80081f4:	f112 0f14 	cmn.w	r2, #20
 80081f8:	9308      	str	r3, [sp, #32]
 80081fa:	9101      	str	r1, [sp, #4]
 80081fc:	4bc6      	ldr	r3, [pc, #792]	; (8008518 <__kernel_rem_pio2+0x330>)
 80081fe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008200:	9009      	str	r0, [sp, #36]	; 0x24
 8008202:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008206:	9304      	str	r3, [sp, #16]
 8008208:	9b08      	ldr	r3, [sp, #32]
 800820a:	f103 33ff 	add.w	r3, r3, #4294967295
 800820e:	bfa8      	it	ge
 8008210:	1ed4      	subge	r4, r2, #3
 8008212:	9306      	str	r3, [sp, #24]
 8008214:	bfb2      	itee	lt
 8008216:	2400      	movlt	r4, #0
 8008218:	2318      	movge	r3, #24
 800821a:	fb94 f4f3 	sdivge	r4, r4, r3
 800821e:	f06f 0317 	mvn.w	r3, #23
 8008222:	fb04 3303 	mla	r3, r4, r3, r3
 8008226:	eb03 0a02 	add.w	sl, r3, r2
 800822a:	9b04      	ldr	r3, [sp, #16]
 800822c:	9a06      	ldr	r2, [sp, #24]
 800822e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008508 <__kernel_rem_pio2+0x320>
 8008232:	eb03 0802 	add.w	r8, r3, r2
 8008236:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008238:	1aa7      	subs	r7, r4, r2
 800823a:	ae20      	add	r6, sp, #128	; 0x80
 800823c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008240:	2500      	movs	r5, #0
 8008242:	4545      	cmp	r5, r8
 8008244:	dd18      	ble.n	8008278 <__kernel_rem_pio2+0x90>
 8008246:	9b08      	ldr	r3, [sp, #32]
 8008248:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800824c:	aa20      	add	r2, sp, #128	; 0x80
 800824e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008508 <__kernel_rem_pio2+0x320>
 8008252:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8008256:	f1c3 0301 	rsb	r3, r3, #1
 800825a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800825e:	9307      	str	r3, [sp, #28]
 8008260:	9b07      	ldr	r3, [sp, #28]
 8008262:	9a04      	ldr	r2, [sp, #16]
 8008264:	4443      	add	r3, r8
 8008266:	429a      	cmp	r2, r3
 8008268:	db2f      	blt.n	80082ca <__kernel_rem_pio2+0xe2>
 800826a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800826e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008272:	462f      	mov	r7, r5
 8008274:	2600      	movs	r6, #0
 8008276:	e01b      	b.n	80082b0 <__kernel_rem_pio2+0xc8>
 8008278:	42ef      	cmn	r7, r5
 800827a:	d407      	bmi.n	800828c <__kernel_rem_pio2+0xa4>
 800827c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8008280:	f7f8 f8fc 	bl	800047c <__aeabi_i2d>
 8008284:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008288:	3501      	adds	r5, #1
 800828a:	e7da      	b.n	8008242 <__kernel_rem_pio2+0x5a>
 800828c:	ec51 0b18 	vmov	r0, r1, d8
 8008290:	e7f8      	b.n	8008284 <__kernel_rem_pio2+0x9c>
 8008292:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008296:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800829a:	f7f8 f959 	bl	8000550 <__aeabi_dmul>
 800829e:	4602      	mov	r2, r0
 80082a0:	460b      	mov	r3, r1
 80082a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082a6:	f7f7 ff9d 	bl	80001e4 <__adddf3>
 80082aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80082ae:	3601      	adds	r6, #1
 80082b0:	9b06      	ldr	r3, [sp, #24]
 80082b2:	429e      	cmp	r6, r3
 80082b4:	f1a7 0708 	sub.w	r7, r7, #8
 80082b8:	ddeb      	ble.n	8008292 <__kernel_rem_pio2+0xaa>
 80082ba:	ed9d 7b02 	vldr	d7, [sp, #8]
 80082be:	3508      	adds	r5, #8
 80082c0:	ecab 7b02 	vstmia	fp!, {d7}
 80082c4:	f108 0801 	add.w	r8, r8, #1
 80082c8:	e7ca      	b.n	8008260 <__kernel_rem_pio2+0x78>
 80082ca:	9b04      	ldr	r3, [sp, #16]
 80082cc:	aa0c      	add	r2, sp, #48	; 0x30
 80082ce:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80082d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80082d4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80082d6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80082da:	9c04      	ldr	r4, [sp, #16]
 80082dc:	930a      	str	r3, [sp, #40]	; 0x28
 80082de:	ab98      	add	r3, sp, #608	; 0x260
 80082e0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80082e4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80082e8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 80082ec:	f8cd b008 	str.w	fp, [sp, #8]
 80082f0:	4625      	mov	r5, r4
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	dc78      	bgt.n	80083e8 <__kernel_rem_pio2+0x200>
 80082f6:	ec47 6b10 	vmov	d0, r6, r7
 80082fa:	4650      	mov	r0, sl
 80082fc:	f000 fbfc 	bl	8008af8 <scalbn>
 8008300:	ec57 6b10 	vmov	r6, r7, d0
 8008304:	2200      	movs	r2, #0
 8008306:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800830a:	ee10 0a10 	vmov	r0, s0
 800830e:	4639      	mov	r1, r7
 8008310:	f7f8 f91e 	bl	8000550 <__aeabi_dmul>
 8008314:	ec41 0b10 	vmov	d0, r0, r1
 8008318:	f000 fb6e 	bl	80089f8 <floor>
 800831c:	4b7f      	ldr	r3, [pc, #508]	; (800851c <__kernel_rem_pio2+0x334>)
 800831e:	ec51 0b10 	vmov	r0, r1, d0
 8008322:	2200      	movs	r2, #0
 8008324:	f7f8 f914 	bl	8000550 <__aeabi_dmul>
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4630      	mov	r0, r6
 800832e:	4639      	mov	r1, r7
 8008330:	f7f7 ff56 	bl	80001e0 <__aeabi_dsub>
 8008334:	460f      	mov	r7, r1
 8008336:	4606      	mov	r6, r0
 8008338:	f7f8 fbba 	bl	8000ab0 <__aeabi_d2iz>
 800833c:	9007      	str	r0, [sp, #28]
 800833e:	f7f8 f89d 	bl	800047c <__aeabi_i2d>
 8008342:	4602      	mov	r2, r0
 8008344:	460b      	mov	r3, r1
 8008346:	4630      	mov	r0, r6
 8008348:	4639      	mov	r1, r7
 800834a:	f7f7 ff49 	bl	80001e0 <__aeabi_dsub>
 800834e:	f1ba 0f00 	cmp.w	sl, #0
 8008352:	4606      	mov	r6, r0
 8008354:	460f      	mov	r7, r1
 8008356:	dd70      	ble.n	800843a <__kernel_rem_pio2+0x252>
 8008358:	1e62      	subs	r2, r4, #1
 800835a:	ab0c      	add	r3, sp, #48	; 0x30
 800835c:	9d07      	ldr	r5, [sp, #28]
 800835e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8008362:	f1ca 0118 	rsb	r1, sl, #24
 8008366:	fa40 f301 	asr.w	r3, r0, r1
 800836a:	441d      	add	r5, r3
 800836c:	408b      	lsls	r3, r1
 800836e:	1ac0      	subs	r0, r0, r3
 8008370:	ab0c      	add	r3, sp, #48	; 0x30
 8008372:	9507      	str	r5, [sp, #28]
 8008374:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8008378:	f1ca 0317 	rsb	r3, sl, #23
 800837c:	fa40 f303 	asr.w	r3, r0, r3
 8008380:	9302      	str	r3, [sp, #8]
 8008382:	9b02      	ldr	r3, [sp, #8]
 8008384:	2b00      	cmp	r3, #0
 8008386:	dd66      	ble.n	8008456 <__kernel_rem_pio2+0x26e>
 8008388:	9b07      	ldr	r3, [sp, #28]
 800838a:	2200      	movs	r2, #0
 800838c:	3301      	adds	r3, #1
 800838e:	9307      	str	r3, [sp, #28]
 8008390:	4615      	mov	r5, r2
 8008392:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8008396:	4294      	cmp	r4, r2
 8008398:	f300 8099 	bgt.w	80084ce <__kernel_rem_pio2+0x2e6>
 800839c:	f1ba 0f00 	cmp.w	sl, #0
 80083a0:	dd07      	ble.n	80083b2 <__kernel_rem_pio2+0x1ca>
 80083a2:	f1ba 0f01 	cmp.w	sl, #1
 80083a6:	f000 80a5 	beq.w	80084f4 <__kernel_rem_pio2+0x30c>
 80083aa:	f1ba 0f02 	cmp.w	sl, #2
 80083ae:	f000 80c1 	beq.w	8008534 <__kernel_rem_pio2+0x34c>
 80083b2:	9b02      	ldr	r3, [sp, #8]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d14e      	bne.n	8008456 <__kernel_rem_pio2+0x26e>
 80083b8:	4632      	mov	r2, r6
 80083ba:	463b      	mov	r3, r7
 80083bc:	4958      	ldr	r1, [pc, #352]	; (8008520 <__kernel_rem_pio2+0x338>)
 80083be:	2000      	movs	r0, #0
 80083c0:	f7f7 ff0e 	bl	80001e0 <__aeabi_dsub>
 80083c4:	4606      	mov	r6, r0
 80083c6:	460f      	mov	r7, r1
 80083c8:	2d00      	cmp	r5, #0
 80083ca:	d044      	beq.n	8008456 <__kernel_rem_pio2+0x26e>
 80083cc:	4650      	mov	r0, sl
 80083ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008510 <__kernel_rem_pio2+0x328>
 80083d2:	f000 fb91 	bl	8008af8 <scalbn>
 80083d6:	4630      	mov	r0, r6
 80083d8:	4639      	mov	r1, r7
 80083da:	ec53 2b10 	vmov	r2, r3, d0
 80083de:	f7f7 feff 	bl	80001e0 <__aeabi_dsub>
 80083e2:	4606      	mov	r6, r0
 80083e4:	460f      	mov	r7, r1
 80083e6:	e036      	b.n	8008456 <__kernel_rem_pio2+0x26e>
 80083e8:	4b4e      	ldr	r3, [pc, #312]	; (8008524 <__kernel_rem_pio2+0x33c>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	4630      	mov	r0, r6
 80083ee:	4639      	mov	r1, r7
 80083f0:	f7f8 f8ae 	bl	8000550 <__aeabi_dmul>
 80083f4:	f7f8 fb5c 	bl	8000ab0 <__aeabi_d2iz>
 80083f8:	f7f8 f840 	bl	800047c <__aeabi_i2d>
 80083fc:	4b4a      	ldr	r3, [pc, #296]	; (8008528 <__kernel_rem_pio2+0x340>)
 80083fe:	2200      	movs	r2, #0
 8008400:	4680      	mov	r8, r0
 8008402:	4689      	mov	r9, r1
 8008404:	f7f8 f8a4 	bl	8000550 <__aeabi_dmul>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4630      	mov	r0, r6
 800840e:	4639      	mov	r1, r7
 8008410:	f7f7 fee6 	bl	80001e0 <__aeabi_dsub>
 8008414:	f7f8 fb4c 	bl	8000ab0 <__aeabi_d2iz>
 8008418:	9b02      	ldr	r3, [sp, #8]
 800841a:	f843 0b04 	str.w	r0, [r3], #4
 800841e:	3d01      	subs	r5, #1
 8008420:	9302      	str	r3, [sp, #8]
 8008422:	ab70      	add	r3, sp, #448	; 0x1c0
 8008424:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842c:	4640      	mov	r0, r8
 800842e:	4649      	mov	r1, r9
 8008430:	f7f7 fed8 	bl	80001e4 <__adddf3>
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	e75b      	b.n	80082f2 <__kernel_rem_pio2+0x10a>
 800843a:	d105      	bne.n	8008448 <__kernel_rem_pio2+0x260>
 800843c:	1e63      	subs	r3, r4, #1
 800843e:	aa0c      	add	r2, sp, #48	; 0x30
 8008440:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8008444:	15c3      	asrs	r3, r0, #23
 8008446:	e79b      	b.n	8008380 <__kernel_rem_pio2+0x198>
 8008448:	4b38      	ldr	r3, [pc, #224]	; (800852c <__kernel_rem_pio2+0x344>)
 800844a:	2200      	movs	r2, #0
 800844c:	f7f8 fb06 	bl	8000a5c <__aeabi_dcmpge>
 8008450:	2800      	cmp	r0, #0
 8008452:	d139      	bne.n	80084c8 <__kernel_rem_pio2+0x2e0>
 8008454:	9002      	str	r0, [sp, #8]
 8008456:	2200      	movs	r2, #0
 8008458:	2300      	movs	r3, #0
 800845a:	4630      	mov	r0, r6
 800845c:	4639      	mov	r1, r7
 800845e:	f7f8 fadf 	bl	8000a20 <__aeabi_dcmpeq>
 8008462:	2800      	cmp	r0, #0
 8008464:	f000 80b4 	beq.w	80085d0 <__kernel_rem_pio2+0x3e8>
 8008468:	f104 3bff 	add.w	fp, r4, #4294967295
 800846c:	465b      	mov	r3, fp
 800846e:	2200      	movs	r2, #0
 8008470:	9904      	ldr	r1, [sp, #16]
 8008472:	428b      	cmp	r3, r1
 8008474:	da65      	bge.n	8008542 <__kernel_rem_pio2+0x35a>
 8008476:	2a00      	cmp	r2, #0
 8008478:	d07b      	beq.n	8008572 <__kernel_rem_pio2+0x38a>
 800847a:	ab0c      	add	r3, sp, #48	; 0x30
 800847c:	f1aa 0a18 	sub.w	sl, sl, #24
 8008480:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f000 80a0 	beq.w	80085ca <__kernel_rem_pio2+0x3e2>
 800848a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8008510 <__kernel_rem_pio2+0x328>
 800848e:	4650      	mov	r0, sl
 8008490:	f000 fb32 	bl	8008af8 <scalbn>
 8008494:	4f23      	ldr	r7, [pc, #140]	; (8008524 <__kernel_rem_pio2+0x33c>)
 8008496:	ec55 4b10 	vmov	r4, r5, d0
 800849a:	46d8      	mov	r8, fp
 800849c:	2600      	movs	r6, #0
 800849e:	f1b8 0f00 	cmp.w	r8, #0
 80084a2:	f280 80cf 	bge.w	8008644 <__kernel_rem_pio2+0x45c>
 80084a6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8008508 <__kernel_rem_pio2+0x320>
 80084aa:	465f      	mov	r7, fp
 80084ac:	f04f 0800 	mov.w	r8, #0
 80084b0:	2f00      	cmp	r7, #0
 80084b2:	f2c0 80fd 	blt.w	80086b0 <__kernel_rem_pio2+0x4c8>
 80084b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80084b8:	f8df a074 	ldr.w	sl, [pc, #116]	; 8008530 <__kernel_rem_pio2+0x348>
 80084bc:	ec55 4b18 	vmov	r4, r5, d8
 80084c0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 80084c4:	2600      	movs	r6, #0
 80084c6:	e0e5      	b.n	8008694 <__kernel_rem_pio2+0x4ac>
 80084c8:	2302      	movs	r3, #2
 80084ca:	9302      	str	r3, [sp, #8]
 80084cc:	e75c      	b.n	8008388 <__kernel_rem_pio2+0x1a0>
 80084ce:	f8db 3000 	ldr.w	r3, [fp]
 80084d2:	b955      	cbnz	r5, 80084ea <__kernel_rem_pio2+0x302>
 80084d4:	b123      	cbz	r3, 80084e0 <__kernel_rem_pio2+0x2f8>
 80084d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80084da:	f8cb 3000 	str.w	r3, [fp]
 80084de:	2301      	movs	r3, #1
 80084e0:	3201      	adds	r2, #1
 80084e2:	f10b 0b04 	add.w	fp, fp, #4
 80084e6:	461d      	mov	r5, r3
 80084e8:	e755      	b.n	8008396 <__kernel_rem_pio2+0x1ae>
 80084ea:	1acb      	subs	r3, r1, r3
 80084ec:	f8cb 3000 	str.w	r3, [fp]
 80084f0:	462b      	mov	r3, r5
 80084f2:	e7f5      	b.n	80084e0 <__kernel_rem_pio2+0x2f8>
 80084f4:	1e62      	subs	r2, r4, #1
 80084f6:	ab0c      	add	r3, sp, #48	; 0x30
 80084f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008500:	a90c      	add	r1, sp, #48	; 0x30
 8008502:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008506:	e754      	b.n	80083b2 <__kernel_rem_pio2+0x1ca>
	...
 8008514:	3ff00000 	.word	0x3ff00000
 8008518:	08008e60 	.word	0x08008e60
 800851c:	40200000 	.word	0x40200000
 8008520:	3ff00000 	.word	0x3ff00000
 8008524:	3e700000 	.word	0x3e700000
 8008528:	41700000 	.word	0x41700000
 800852c:	3fe00000 	.word	0x3fe00000
 8008530:	08008e20 	.word	0x08008e20
 8008534:	1e62      	subs	r2, r4, #1
 8008536:	ab0c      	add	r3, sp, #48	; 0x30
 8008538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800853c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008540:	e7de      	b.n	8008500 <__kernel_rem_pio2+0x318>
 8008542:	a90c      	add	r1, sp, #48	; 0x30
 8008544:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8008548:	3b01      	subs	r3, #1
 800854a:	430a      	orrs	r2, r1
 800854c:	e790      	b.n	8008470 <__kernel_rem_pio2+0x288>
 800854e:	3301      	adds	r3, #1
 8008550:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8008554:	2900      	cmp	r1, #0
 8008556:	d0fa      	beq.n	800854e <__kernel_rem_pio2+0x366>
 8008558:	9a08      	ldr	r2, [sp, #32]
 800855a:	18e3      	adds	r3, r4, r3
 800855c:	18a6      	adds	r6, r4, r2
 800855e:	aa20      	add	r2, sp, #128	; 0x80
 8008560:	1c65      	adds	r5, r4, #1
 8008562:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008566:	9302      	str	r3, [sp, #8]
 8008568:	9b02      	ldr	r3, [sp, #8]
 800856a:	42ab      	cmp	r3, r5
 800856c:	da04      	bge.n	8008578 <__kernel_rem_pio2+0x390>
 800856e:	461c      	mov	r4, r3
 8008570:	e6b5      	b.n	80082de <__kernel_rem_pio2+0xf6>
 8008572:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008574:	2301      	movs	r3, #1
 8008576:	e7eb      	b.n	8008550 <__kernel_rem_pio2+0x368>
 8008578:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800857e:	f7f7 ff7d 	bl	800047c <__aeabi_i2d>
 8008582:	e8e6 0102 	strd	r0, r1, [r6], #8
 8008586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008588:	46b3      	mov	fp, r6
 800858a:	461c      	mov	r4, r3
 800858c:	2700      	movs	r7, #0
 800858e:	f04f 0800 	mov.w	r8, #0
 8008592:	f04f 0900 	mov.w	r9, #0
 8008596:	9b06      	ldr	r3, [sp, #24]
 8008598:	429f      	cmp	r7, r3
 800859a:	dd06      	ble.n	80085aa <__kernel_rem_pio2+0x3c2>
 800859c:	ab70      	add	r3, sp, #448	; 0x1c0
 800859e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80085a2:	e9c3 8900 	strd	r8, r9, [r3]
 80085a6:	3501      	adds	r5, #1
 80085a8:	e7de      	b.n	8008568 <__kernel_rem_pio2+0x380>
 80085aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80085ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80085b2:	f7f7 ffcd 	bl	8000550 <__aeabi_dmul>
 80085b6:	4602      	mov	r2, r0
 80085b8:	460b      	mov	r3, r1
 80085ba:	4640      	mov	r0, r8
 80085bc:	4649      	mov	r1, r9
 80085be:	f7f7 fe11 	bl	80001e4 <__adddf3>
 80085c2:	3701      	adds	r7, #1
 80085c4:	4680      	mov	r8, r0
 80085c6:	4689      	mov	r9, r1
 80085c8:	e7e5      	b.n	8008596 <__kernel_rem_pio2+0x3ae>
 80085ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80085ce:	e754      	b.n	800847a <__kernel_rem_pio2+0x292>
 80085d0:	ec47 6b10 	vmov	d0, r6, r7
 80085d4:	f1ca 0000 	rsb	r0, sl, #0
 80085d8:	f000 fa8e 	bl	8008af8 <scalbn>
 80085dc:	ec57 6b10 	vmov	r6, r7, d0
 80085e0:	4b9f      	ldr	r3, [pc, #636]	; (8008860 <__kernel_rem_pio2+0x678>)
 80085e2:	ee10 0a10 	vmov	r0, s0
 80085e6:	2200      	movs	r2, #0
 80085e8:	4639      	mov	r1, r7
 80085ea:	f7f8 fa37 	bl	8000a5c <__aeabi_dcmpge>
 80085ee:	b300      	cbz	r0, 8008632 <__kernel_rem_pio2+0x44a>
 80085f0:	4b9c      	ldr	r3, [pc, #624]	; (8008864 <__kernel_rem_pio2+0x67c>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	4630      	mov	r0, r6
 80085f6:	4639      	mov	r1, r7
 80085f8:	f7f7 ffaa 	bl	8000550 <__aeabi_dmul>
 80085fc:	f7f8 fa58 	bl	8000ab0 <__aeabi_d2iz>
 8008600:	4605      	mov	r5, r0
 8008602:	f7f7 ff3b 	bl	800047c <__aeabi_i2d>
 8008606:	4b96      	ldr	r3, [pc, #600]	; (8008860 <__kernel_rem_pio2+0x678>)
 8008608:	2200      	movs	r2, #0
 800860a:	f7f7 ffa1 	bl	8000550 <__aeabi_dmul>
 800860e:	460b      	mov	r3, r1
 8008610:	4602      	mov	r2, r0
 8008612:	4639      	mov	r1, r7
 8008614:	4630      	mov	r0, r6
 8008616:	f7f7 fde3 	bl	80001e0 <__aeabi_dsub>
 800861a:	f7f8 fa49 	bl	8000ab0 <__aeabi_d2iz>
 800861e:	f104 0b01 	add.w	fp, r4, #1
 8008622:	ab0c      	add	r3, sp, #48	; 0x30
 8008624:	f10a 0a18 	add.w	sl, sl, #24
 8008628:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800862c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8008630:	e72b      	b.n	800848a <__kernel_rem_pio2+0x2a2>
 8008632:	4630      	mov	r0, r6
 8008634:	4639      	mov	r1, r7
 8008636:	f7f8 fa3b 	bl	8000ab0 <__aeabi_d2iz>
 800863a:	ab0c      	add	r3, sp, #48	; 0x30
 800863c:	46a3      	mov	fp, r4
 800863e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8008642:	e722      	b.n	800848a <__kernel_rem_pio2+0x2a2>
 8008644:	ab70      	add	r3, sp, #448	; 0x1c0
 8008646:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800864a:	ab0c      	add	r3, sp, #48	; 0x30
 800864c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8008650:	f7f7 ff14 	bl	800047c <__aeabi_i2d>
 8008654:	4622      	mov	r2, r4
 8008656:	462b      	mov	r3, r5
 8008658:	f7f7 ff7a 	bl	8000550 <__aeabi_dmul>
 800865c:	4632      	mov	r2, r6
 800865e:	e9c9 0100 	strd	r0, r1, [r9]
 8008662:	463b      	mov	r3, r7
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f7 ff72 	bl	8000550 <__aeabi_dmul>
 800866c:	f108 38ff 	add.w	r8, r8, #4294967295
 8008670:	4604      	mov	r4, r0
 8008672:	460d      	mov	r5, r1
 8008674:	e713      	b.n	800849e <__kernel_rem_pio2+0x2b6>
 8008676:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800867a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800867e:	f7f7 ff67 	bl	8000550 <__aeabi_dmul>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4620      	mov	r0, r4
 8008688:	4629      	mov	r1, r5
 800868a:	f7f7 fdab 	bl	80001e4 <__adddf3>
 800868e:	3601      	adds	r6, #1
 8008690:	4604      	mov	r4, r0
 8008692:	460d      	mov	r5, r1
 8008694:	9b04      	ldr	r3, [sp, #16]
 8008696:	429e      	cmp	r6, r3
 8008698:	dc01      	bgt.n	800869e <__kernel_rem_pio2+0x4b6>
 800869a:	45b0      	cmp	r8, r6
 800869c:	daeb      	bge.n	8008676 <__kernel_rem_pio2+0x48e>
 800869e:	ab48      	add	r3, sp, #288	; 0x120
 80086a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80086a4:	e9c3 4500 	strd	r4, r5, [r3]
 80086a8:	3f01      	subs	r7, #1
 80086aa:	f108 0801 	add.w	r8, r8, #1
 80086ae:	e6ff      	b.n	80084b0 <__kernel_rem_pio2+0x2c8>
 80086b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80086b2:	2b02      	cmp	r3, #2
 80086b4:	dc0b      	bgt.n	80086ce <__kernel_rem_pio2+0x4e6>
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	dc6e      	bgt.n	8008798 <__kernel_rem_pio2+0x5b0>
 80086ba:	d045      	beq.n	8008748 <__kernel_rem_pio2+0x560>
 80086bc:	9b07      	ldr	r3, [sp, #28]
 80086be:	f003 0007 	and.w	r0, r3, #7
 80086c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80086c6:	ecbd 8b02 	vpop	{d8}
 80086ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80086d0:	2b03      	cmp	r3, #3
 80086d2:	d1f3      	bne.n	80086bc <__kernel_rem_pio2+0x4d4>
 80086d4:	ab48      	add	r3, sp, #288	; 0x120
 80086d6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 80086da:	46d0      	mov	r8, sl
 80086dc:	46d9      	mov	r9, fp
 80086de:	f1b9 0f00 	cmp.w	r9, #0
 80086e2:	f1a8 0808 	sub.w	r8, r8, #8
 80086e6:	dc64      	bgt.n	80087b2 <__kernel_rem_pio2+0x5ca>
 80086e8:	465c      	mov	r4, fp
 80086ea:	2c01      	cmp	r4, #1
 80086ec:	f1aa 0a08 	sub.w	sl, sl, #8
 80086f0:	dc7e      	bgt.n	80087f0 <__kernel_rem_pio2+0x608>
 80086f2:	2000      	movs	r0, #0
 80086f4:	2100      	movs	r1, #0
 80086f6:	f1bb 0f01 	cmp.w	fp, #1
 80086fa:	f300 8097 	bgt.w	800882c <__kernel_rem_pio2+0x644>
 80086fe:	9b02      	ldr	r3, [sp, #8]
 8008700:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8008704:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008708:	2b00      	cmp	r3, #0
 800870a:	f040 8099 	bne.w	8008840 <__kernel_rem_pio2+0x658>
 800870e:	9b01      	ldr	r3, [sp, #4]
 8008710:	e9c3 5600 	strd	r5, r6, [r3]
 8008714:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8008718:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800871c:	e7ce      	b.n	80086bc <__kernel_rem_pio2+0x4d4>
 800871e:	ab48      	add	r3, sp, #288	; 0x120
 8008720:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f7f7 fd5c 	bl	80001e4 <__adddf3>
 800872c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008730:	f1bb 0f00 	cmp.w	fp, #0
 8008734:	daf3      	bge.n	800871e <__kernel_rem_pio2+0x536>
 8008736:	9b02      	ldr	r3, [sp, #8]
 8008738:	b113      	cbz	r3, 8008740 <__kernel_rem_pio2+0x558>
 800873a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800873e:	4619      	mov	r1, r3
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	e9c3 0100 	strd	r0, r1, [r3]
 8008746:	e7b9      	b.n	80086bc <__kernel_rem_pio2+0x4d4>
 8008748:	2000      	movs	r0, #0
 800874a:	2100      	movs	r1, #0
 800874c:	e7f0      	b.n	8008730 <__kernel_rem_pio2+0x548>
 800874e:	ab48      	add	r3, sp, #288	; 0x120
 8008750:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008758:	f7f7 fd44 	bl	80001e4 <__adddf3>
 800875c:	3c01      	subs	r4, #1
 800875e:	2c00      	cmp	r4, #0
 8008760:	daf5      	bge.n	800874e <__kernel_rem_pio2+0x566>
 8008762:	9b02      	ldr	r3, [sp, #8]
 8008764:	b1e3      	cbz	r3, 80087a0 <__kernel_rem_pio2+0x5b8>
 8008766:	4602      	mov	r2, r0
 8008768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800876c:	9c01      	ldr	r4, [sp, #4]
 800876e:	e9c4 2300 	strd	r2, r3, [r4]
 8008772:	4602      	mov	r2, r0
 8008774:	460b      	mov	r3, r1
 8008776:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800877a:	f7f7 fd31 	bl	80001e0 <__aeabi_dsub>
 800877e:	ad4a      	add	r5, sp, #296	; 0x128
 8008780:	2401      	movs	r4, #1
 8008782:	45a3      	cmp	fp, r4
 8008784:	da0f      	bge.n	80087a6 <__kernel_rem_pio2+0x5be>
 8008786:	9b02      	ldr	r3, [sp, #8]
 8008788:	b113      	cbz	r3, 8008790 <__kernel_rem_pio2+0x5a8>
 800878a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800878e:	4619      	mov	r1, r3
 8008790:	9b01      	ldr	r3, [sp, #4]
 8008792:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008796:	e791      	b.n	80086bc <__kernel_rem_pio2+0x4d4>
 8008798:	465c      	mov	r4, fp
 800879a:	2000      	movs	r0, #0
 800879c:	2100      	movs	r1, #0
 800879e:	e7de      	b.n	800875e <__kernel_rem_pio2+0x576>
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	e7e2      	b.n	800876c <__kernel_rem_pio2+0x584>
 80087a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80087aa:	f7f7 fd1b 	bl	80001e4 <__adddf3>
 80087ae:	3401      	adds	r4, #1
 80087b0:	e7e7      	b.n	8008782 <__kernel_rem_pio2+0x59a>
 80087b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 80087b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 80087ba:	4620      	mov	r0, r4
 80087bc:	4632      	mov	r2, r6
 80087be:	463b      	mov	r3, r7
 80087c0:	4629      	mov	r1, r5
 80087c2:	f7f7 fd0f 	bl	80001e4 <__adddf3>
 80087c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ca:	4602      	mov	r2, r0
 80087cc:	460b      	mov	r3, r1
 80087ce:	4620      	mov	r0, r4
 80087d0:	4629      	mov	r1, r5
 80087d2:	f7f7 fd05 	bl	80001e0 <__aeabi_dsub>
 80087d6:	4632      	mov	r2, r6
 80087d8:	463b      	mov	r3, r7
 80087da:	f7f7 fd03 	bl	80001e4 <__adddf3>
 80087de:	ed9d 7b04 	vldr	d7, [sp, #16]
 80087e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 80087e6:	ed88 7b00 	vstr	d7, [r8]
 80087ea:	f109 39ff 	add.w	r9, r9, #4294967295
 80087ee:	e776      	b.n	80086de <__kernel_rem_pio2+0x4f6>
 80087f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80087f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80087f8:	4640      	mov	r0, r8
 80087fa:	4632      	mov	r2, r6
 80087fc:	463b      	mov	r3, r7
 80087fe:	4649      	mov	r1, r9
 8008800:	f7f7 fcf0 	bl	80001e4 <__adddf3>
 8008804:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008808:	4602      	mov	r2, r0
 800880a:	460b      	mov	r3, r1
 800880c:	4640      	mov	r0, r8
 800880e:	4649      	mov	r1, r9
 8008810:	f7f7 fce6 	bl	80001e0 <__aeabi_dsub>
 8008814:	4632      	mov	r2, r6
 8008816:	463b      	mov	r3, r7
 8008818:	f7f7 fce4 	bl	80001e4 <__adddf3>
 800881c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008820:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8008824:	ed8a 7b00 	vstr	d7, [sl]
 8008828:	3c01      	subs	r4, #1
 800882a:	e75e      	b.n	80086ea <__kernel_rem_pio2+0x502>
 800882c:	ab48      	add	r3, sp, #288	; 0x120
 800882e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008836:	f7f7 fcd5 	bl	80001e4 <__adddf3>
 800883a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800883e:	e75a      	b.n	80086f6 <__kernel_rem_pio2+0x50e>
 8008840:	9b01      	ldr	r3, [sp, #4]
 8008842:	9a01      	ldr	r2, [sp, #4]
 8008844:	601d      	str	r5, [r3, #0]
 8008846:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800884a:	605c      	str	r4, [r3, #4]
 800884c:	609f      	str	r7, [r3, #8]
 800884e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8008852:	60d3      	str	r3, [r2, #12]
 8008854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008858:	6110      	str	r0, [r2, #16]
 800885a:	6153      	str	r3, [r2, #20]
 800885c:	e72e      	b.n	80086bc <__kernel_rem_pio2+0x4d4>
 800885e:	bf00      	nop
 8008860:	41700000 	.word	0x41700000
 8008864:	3e700000 	.word	0x3e700000

08008868 <__kernel_sin>:
 8008868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800886c:	ed2d 8b04 	vpush	{d8-d9}
 8008870:	eeb0 8a41 	vmov.f32	s16, s2
 8008874:	eef0 8a61 	vmov.f32	s17, s3
 8008878:	ec55 4b10 	vmov	r4, r5, d0
 800887c:	b083      	sub	sp, #12
 800887e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008882:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008886:	9001      	str	r0, [sp, #4]
 8008888:	da06      	bge.n	8008898 <__kernel_sin+0x30>
 800888a:	ee10 0a10 	vmov	r0, s0
 800888e:	4629      	mov	r1, r5
 8008890:	f7f8 f90e 	bl	8000ab0 <__aeabi_d2iz>
 8008894:	2800      	cmp	r0, #0
 8008896:	d051      	beq.n	800893c <__kernel_sin+0xd4>
 8008898:	4622      	mov	r2, r4
 800889a:	462b      	mov	r3, r5
 800889c:	4620      	mov	r0, r4
 800889e:	4629      	mov	r1, r5
 80088a0:	f7f7 fe56 	bl	8000550 <__aeabi_dmul>
 80088a4:	4682      	mov	sl, r0
 80088a6:	468b      	mov	fp, r1
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4620      	mov	r0, r4
 80088ae:	4629      	mov	r1, r5
 80088b0:	f7f7 fe4e 	bl	8000550 <__aeabi_dmul>
 80088b4:	a341      	add	r3, pc, #260	; (adr r3, 80089bc <__kernel_sin+0x154>)
 80088b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ba:	4680      	mov	r8, r0
 80088bc:	4689      	mov	r9, r1
 80088be:	4650      	mov	r0, sl
 80088c0:	4659      	mov	r1, fp
 80088c2:	f7f7 fe45 	bl	8000550 <__aeabi_dmul>
 80088c6:	a33f      	add	r3, pc, #252	; (adr r3, 80089c4 <__kernel_sin+0x15c>)
 80088c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088cc:	f7f7 fc88 	bl	80001e0 <__aeabi_dsub>
 80088d0:	4652      	mov	r2, sl
 80088d2:	465b      	mov	r3, fp
 80088d4:	f7f7 fe3c 	bl	8000550 <__aeabi_dmul>
 80088d8:	a33c      	add	r3, pc, #240	; (adr r3, 80089cc <__kernel_sin+0x164>)
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f7f7 fc81 	bl	80001e4 <__adddf3>
 80088e2:	4652      	mov	r2, sl
 80088e4:	465b      	mov	r3, fp
 80088e6:	f7f7 fe33 	bl	8000550 <__aeabi_dmul>
 80088ea:	a33a      	add	r3, pc, #232	; (adr r3, 80089d4 <__kernel_sin+0x16c>)
 80088ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f0:	f7f7 fc76 	bl	80001e0 <__aeabi_dsub>
 80088f4:	4652      	mov	r2, sl
 80088f6:	465b      	mov	r3, fp
 80088f8:	f7f7 fe2a 	bl	8000550 <__aeabi_dmul>
 80088fc:	a337      	add	r3, pc, #220	; (adr r3, 80089dc <__kernel_sin+0x174>)
 80088fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008902:	f7f7 fc6f 	bl	80001e4 <__adddf3>
 8008906:	9b01      	ldr	r3, [sp, #4]
 8008908:	4606      	mov	r6, r0
 800890a:	460f      	mov	r7, r1
 800890c:	b9eb      	cbnz	r3, 800894a <__kernel_sin+0xe2>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4650      	mov	r0, sl
 8008914:	4659      	mov	r1, fp
 8008916:	f7f7 fe1b 	bl	8000550 <__aeabi_dmul>
 800891a:	a325      	add	r3, pc, #148	; (adr r3, 80089b0 <__kernel_sin+0x148>)
 800891c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008920:	f7f7 fc5e 	bl	80001e0 <__aeabi_dsub>
 8008924:	4642      	mov	r2, r8
 8008926:	464b      	mov	r3, r9
 8008928:	f7f7 fe12 	bl	8000550 <__aeabi_dmul>
 800892c:	4602      	mov	r2, r0
 800892e:	460b      	mov	r3, r1
 8008930:	4620      	mov	r0, r4
 8008932:	4629      	mov	r1, r5
 8008934:	f7f7 fc56 	bl	80001e4 <__adddf3>
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	ec45 4b10 	vmov	d0, r4, r5
 8008940:	b003      	add	sp, #12
 8008942:	ecbd 8b04 	vpop	{d8-d9}
 8008946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894a:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <__kernel_sin+0x150>)
 800894c:	ec51 0b18 	vmov	r0, r1, d8
 8008950:	2200      	movs	r2, #0
 8008952:	f7f7 fdfd 	bl	8000550 <__aeabi_dmul>
 8008956:	4632      	mov	r2, r6
 8008958:	ec41 0b19 	vmov	d9, r0, r1
 800895c:	463b      	mov	r3, r7
 800895e:	4640      	mov	r0, r8
 8008960:	4649      	mov	r1, r9
 8008962:	f7f7 fdf5 	bl	8000550 <__aeabi_dmul>
 8008966:	4602      	mov	r2, r0
 8008968:	460b      	mov	r3, r1
 800896a:	ec51 0b19 	vmov	r0, r1, d9
 800896e:	f7f7 fc37 	bl	80001e0 <__aeabi_dsub>
 8008972:	4652      	mov	r2, sl
 8008974:	465b      	mov	r3, fp
 8008976:	f7f7 fdeb 	bl	8000550 <__aeabi_dmul>
 800897a:	ec53 2b18 	vmov	r2, r3, d8
 800897e:	f7f7 fc2f 	bl	80001e0 <__aeabi_dsub>
 8008982:	a30b      	add	r3, pc, #44	; (adr r3, 80089b0 <__kernel_sin+0x148>)
 8008984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008988:	4606      	mov	r6, r0
 800898a:	460f      	mov	r7, r1
 800898c:	4640      	mov	r0, r8
 800898e:	4649      	mov	r1, r9
 8008990:	f7f7 fdde 	bl	8000550 <__aeabi_dmul>
 8008994:	4602      	mov	r2, r0
 8008996:	460b      	mov	r3, r1
 8008998:	4630      	mov	r0, r6
 800899a:	4639      	mov	r1, r7
 800899c:	f7f7 fc22 	bl	80001e4 <__adddf3>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	4620      	mov	r0, r4
 80089a6:	4629      	mov	r1, r5
 80089a8:	f7f7 fc1a 	bl	80001e0 <__aeabi_dsub>
 80089ac:	e7c4      	b.n	8008938 <__kernel_sin+0xd0>
 80089ae:	bf00      	nop
 80089b0:	55555549 	.word	0x55555549
 80089b4:	3fc55555 	.word	0x3fc55555
 80089b8:	3fe00000 	.word	0x3fe00000
 80089bc:	5acfd57c 	.word	0x5acfd57c
 80089c0:	3de5d93a 	.word	0x3de5d93a
 80089c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80089c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80089cc:	57b1fe7d 	.word	0x57b1fe7d
 80089d0:	3ec71de3 	.word	0x3ec71de3
 80089d4:	19c161d5 	.word	0x19c161d5
 80089d8:	3f2a01a0 	.word	0x3f2a01a0
 80089dc:	1110f8a6 	.word	0x1110f8a6
 80089e0:	3f811111 	.word	0x3f811111

080089e4 <fabs>:
 80089e4:	ec51 0b10 	vmov	r0, r1, d0
 80089e8:	ee10 2a10 	vmov	r2, s0
 80089ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089f0:	ec43 2b10 	vmov	d0, r2, r3
 80089f4:	4770      	bx	lr
	...

080089f8 <floor>:
 80089f8:	ec51 0b10 	vmov	r0, r1, d0
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008a04:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008a08:	2e13      	cmp	r6, #19
 8008a0a:	ee10 5a10 	vmov	r5, s0
 8008a0e:	ee10 8a10 	vmov	r8, s0
 8008a12:	460c      	mov	r4, r1
 8008a14:	dc32      	bgt.n	8008a7c <floor+0x84>
 8008a16:	2e00      	cmp	r6, #0
 8008a18:	da14      	bge.n	8008a44 <floor+0x4c>
 8008a1a:	a333      	add	r3, pc, #204	; (adr r3, 8008ae8 <floor+0xf0>)
 8008a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a20:	f7f7 fbe0 	bl	80001e4 <__adddf3>
 8008a24:	2200      	movs	r2, #0
 8008a26:	2300      	movs	r3, #0
 8008a28:	f7f8 f822 	bl	8000a70 <__aeabi_dcmpgt>
 8008a2c:	b138      	cbz	r0, 8008a3e <floor+0x46>
 8008a2e:	2c00      	cmp	r4, #0
 8008a30:	da57      	bge.n	8008ae2 <floor+0xea>
 8008a32:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008a36:	431d      	orrs	r5, r3
 8008a38:	d001      	beq.n	8008a3e <floor+0x46>
 8008a3a:	4c2d      	ldr	r4, [pc, #180]	; (8008af0 <floor+0xf8>)
 8008a3c:	2500      	movs	r5, #0
 8008a3e:	4621      	mov	r1, r4
 8008a40:	4628      	mov	r0, r5
 8008a42:	e025      	b.n	8008a90 <floor+0x98>
 8008a44:	4f2b      	ldr	r7, [pc, #172]	; (8008af4 <floor+0xfc>)
 8008a46:	4137      	asrs	r7, r6
 8008a48:	ea01 0307 	and.w	r3, r1, r7
 8008a4c:	4303      	orrs	r3, r0
 8008a4e:	d01f      	beq.n	8008a90 <floor+0x98>
 8008a50:	a325      	add	r3, pc, #148	; (adr r3, 8008ae8 <floor+0xf0>)
 8008a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a56:	f7f7 fbc5 	bl	80001e4 <__adddf3>
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	f7f8 f807 	bl	8000a70 <__aeabi_dcmpgt>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d0eb      	beq.n	8008a3e <floor+0x46>
 8008a66:	2c00      	cmp	r4, #0
 8008a68:	bfbe      	ittt	lt
 8008a6a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008a6e:	fa43 f606 	asrlt.w	r6, r3, r6
 8008a72:	19a4      	addlt	r4, r4, r6
 8008a74:	ea24 0407 	bic.w	r4, r4, r7
 8008a78:	2500      	movs	r5, #0
 8008a7a:	e7e0      	b.n	8008a3e <floor+0x46>
 8008a7c:	2e33      	cmp	r6, #51	; 0x33
 8008a7e:	dd0b      	ble.n	8008a98 <floor+0xa0>
 8008a80:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008a84:	d104      	bne.n	8008a90 <floor+0x98>
 8008a86:	ee10 2a10 	vmov	r2, s0
 8008a8a:	460b      	mov	r3, r1
 8008a8c:	f7f7 fbaa 	bl	80001e4 <__adddf3>
 8008a90:	ec41 0b10 	vmov	d0, r0, r1
 8008a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a98:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008aa0:	fa23 f707 	lsr.w	r7, r3, r7
 8008aa4:	4207      	tst	r7, r0
 8008aa6:	d0f3      	beq.n	8008a90 <floor+0x98>
 8008aa8:	a30f      	add	r3, pc, #60	; (adr r3, 8008ae8 <floor+0xf0>)
 8008aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aae:	f7f7 fb99 	bl	80001e4 <__adddf3>
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	f7f7 ffdb 	bl	8000a70 <__aeabi_dcmpgt>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	d0bf      	beq.n	8008a3e <floor+0x46>
 8008abe:	2c00      	cmp	r4, #0
 8008ac0:	da02      	bge.n	8008ac8 <floor+0xd0>
 8008ac2:	2e14      	cmp	r6, #20
 8008ac4:	d103      	bne.n	8008ace <floor+0xd6>
 8008ac6:	3401      	adds	r4, #1
 8008ac8:	ea25 0507 	bic.w	r5, r5, r7
 8008acc:	e7b7      	b.n	8008a3e <floor+0x46>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008ad4:	fa03 f606 	lsl.w	r6, r3, r6
 8008ad8:	4435      	add	r5, r6
 8008ada:	4545      	cmp	r5, r8
 8008adc:	bf38      	it	cc
 8008ade:	18e4      	addcc	r4, r4, r3
 8008ae0:	e7f2      	b.n	8008ac8 <floor+0xd0>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	462c      	mov	r4, r5
 8008ae6:	e7aa      	b.n	8008a3e <floor+0x46>
 8008ae8:	8800759c 	.word	0x8800759c
 8008aec:	7e37e43c 	.word	0x7e37e43c
 8008af0:	bff00000 	.word	0xbff00000
 8008af4:	000fffff 	.word	0x000fffff

08008af8 <scalbn>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	ec55 4b10 	vmov	r4, r5, d0
 8008afe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008b02:	4606      	mov	r6, r0
 8008b04:	462b      	mov	r3, r5
 8008b06:	b99a      	cbnz	r2, 8008b30 <scalbn+0x38>
 8008b08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b0c:	4323      	orrs	r3, r4
 8008b0e:	d036      	beq.n	8008b7e <scalbn+0x86>
 8008b10:	4b39      	ldr	r3, [pc, #228]	; (8008bf8 <scalbn+0x100>)
 8008b12:	4629      	mov	r1, r5
 8008b14:	ee10 0a10 	vmov	r0, s0
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f7f7 fd19 	bl	8000550 <__aeabi_dmul>
 8008b1e:	4b37      	ldr	r3, [pc, #220]	; (8008bfc <scalbn+0x104>)
 8008b20:	429e      	cmp	r6, r3
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	da10      	bge.n	8008b4a <scalbn+0x52>
 8008b28:	a32b      	add	r3, pc, #172	; (adr r3, 8008bd8 <scalbn+0xe0>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	e03a      	b.n	8008ba6 <scalbn+0xae>
 8008b30:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008b34:	428a      	cmp	r2, r1
 8008b36:	d10c      	bne.n	8008b52 <scalbn+0x5a>
 8008b38:	ee10 2a10 	vmov	r2, s0
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 fb50 	bl	80001e4 <__adddf3>
 8008b44:	4604      	mov	r4, r0
 8008b46:	460d      	mov	r5, r1
 8008b48:	e019      	b.n	8008b7e <scalbn+0x86>
 8008b4a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b4e:	460b      	mov	r3, r1
 8008b50:	3a36      	subs	r2, #54	; 0x36
 8008b52:	4432      	add	r2, r6
 8008b54:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b58:	428a      	cmp	r2, r1
 8008b5a:	dd08      	ble.n	8008b6e <scalbn+0x76>
 8008b5c:	2d00      	cmp	r5, #0
 8008b5e:	a120      	add	r1, pc, #128	; (adr r1, 8008be0 <scalbn+0xe8>)
 8008b60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b64:	da1c      	bge.n	8008ba0 <scalbn+0xa8>
 8008b66:	a120      	add	r1, pc, #128	; (adr r1, 8008be8 <scalbn+0xf0>)
 8008b68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b6c:	e018      	b.n	8008ba0 <scalbn+0xa8>
 8008b6e:	2a00      	cmp	r2, #0
 8008b70:	dd08      	ble.n	8008b84 <scalbn+0x8c>
 8008b72:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b76:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b7a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b7e:	ec45 4b10 	vmov	d0, r4, r5
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b88:	da19      	bge.n	8008bbe <scalbn+0xc6>
 8008b8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b8e:	429e      	cmp	r6, r3
 8008b90:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8008b94:	dd0a      	ble.n	8008bac <scalbn+0xb4>
 8008b96:	a112      	add	r1, pc, #72	; (adr r1, 8008be0 <scalbn+0xe8>)
 8008b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d1e2      	bne.n	8008b66 <scalbn+0x6e>
 8008ba0:	a30f      	add	r3, pc, #60	; (adr r3, 8008be0 <scalbn+0xe8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fcd3 	bl	8000550 <__aeabi_dmul>
 8008baa:	e7cb      	b.n	8008b44 <scalbn+0x4c>
 8008bac:	a10a      	add	r1, pc, #40	; (adr r1, 8008bd8 <scalbn+0xe0>)
 8008bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d0b8      	beq.n	8008b28 <scalbn+0x30>
 8008bb6:	a10e      	add	r1, pc, #56	; (adr r1, 8008bf0 <scalbn+0xf8>)
 8008bb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bbc:	e7b4      	b.n	8008b28 <scalbn+0x30>
 8008bbe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bc2:	3236      	adds	r2, #54	; 0x36
 8008bc4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bc8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8008bcc:	4620      	mov	r0, r4
 8008bce:	4b0c      	ldr	r3, [pc, #48]	; (8008c00 <scalbn+0x108>)
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	e7e8      	b.n	8008ba6 <scalbn+0xae>
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	c2f8f359 	.word	0xc2f8f359
 8008bdc:	01a56e1f 	.word	0x01a56e1f
 8008be0:	8800759c 	.word	0x8800759c
 8008be4:	7e37e43c 	.word	0x7e37e43c
 8008be8:	8800759c 	.word	0x8800759c
 8008bec:	fe37e43c 	.word	0xfe37e43c
 8008bf0:	c2f8f359 	.word	0xc2f8f359
 8008bf4:	81a56e1f 	.word	0x81a56e1f
 8008bf8:	43500000 	.word	0x43500000
 8008bfc:	ffff3cb0 	.word	0xffff3cb0
 8008c00:	3c900000 	.word	0x3c900000

08008c04 <_init>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr

08008c10 <_fini>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr
