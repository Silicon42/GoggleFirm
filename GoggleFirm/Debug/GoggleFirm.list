
GoggleFirm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9bc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c8  0800bb58  0800bb58  0001bb58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be20  0800be20  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800be20  0800be20  0001be20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be28  0800be28  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be28  0800be28  0001be28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be2c  0800be2c  0001be2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800be30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  200001f4  0800c024  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c74  0800c024  00020c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c75f  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f69  00000000  00000000  0003c983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  000408f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001190  00000000  00000000  00041bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a622  00000000  00000000  00042d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019582  00000000  00000000  0005d3a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d62d  00000000  00000000  00076924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00103f51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054d0  00000000  00000000  00103fa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200001f4 	.word	0x200001f4
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800bb3c 	.word	0x0800bb3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200001f8 	.word	0x200001f8
 80001d4:	0800bb3c 	.word	0x0800bb3c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b96e 	b.w	8000e94 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	468c      	mov	ip, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	f040 8083 	bne.w	8000ce6 <__udivmoddi4+0x116>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d947      	bls.n	8000c76 <__udivmoddi4+0xa6>
 8000be6:	fab2 f282 	clz	r2, r2
 8000bea:	b142      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bec:	f1c2 0020 	rsb	r0, r2, #32
 8000bf0:	fa24 f000 	lsr.w	r0, r4, r0
 8000bf4:	4091      	lsls	r1, r2
 8000bf6:	4097      	lsls	r7, r2
 8000bf8:	ea40 0c01 	orr.w	ip, r0, r1
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbbc f6f8 	udiv	r6, ip, r8
 8000c08:	fa1f fe87 	uxth.w	lr, r7
 8000c0c:	fb08 c116 	mls	r1, r8, r6, ip
 8000c10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c14:	fb06 f10e 	mul.w	r1, r6, lr
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18fb      	adds	r3, r7, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 8119 	bcs.w	8000e58 <__udivmoddi4+0x288>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8116 	bls.w	8000e58 <__udivmoddi4+0x288>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	443b      	add	r3, r7
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	193c      	adds	r4, r7, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8105 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f240 8102 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	443c      	add	r4, r7
 8000c5c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c60:	eba4 040e 	sub.w	r4, r4, lr
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xaa>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f282 	clz	r2, r2
 8000c7e:	2a00      	cmp	r2, #0
 8000c80:	d150      	bne.n	8000d24 <__udivmoddi4+0x154>
 8000c82:	1bcb      	subs	r3, r1, r7
 8000c84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	2601      	movs	r6, #1
 8000c8e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c92:	0c21      	lsrs	r1, r4, #16
 8000c94:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c98:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c9c:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d907      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000ca4:	1879      	adds	r1, r7, r1
 8000ca6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0xe2>
 8000cac:	428b      	cmp	r3, r1
 8000cae:	f200 80e9 	bhi.w	8000e84 <__udivmoddi4+0x2b4>
 8000cb2:	4684      	mov	ip, r0
 8000cb4:	1ac9      	subs	r1, r1, r3
 8000cb6:	b2a3      	uxth	r3, r4
 8000cb8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cbc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cc4:	fb08 f800 	mul.w	r8, r8, r0
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x10c>
 8000ccc:	193c      	adds	r4, r7, r4
 8000cce:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x10a>
 8000cd4:	45a0      	cmp	r8, r4
 8000cd6:	f200 80d9 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cda:	4618      	mov	r0, r3
 8000cdc:	eba4 0408 	sub.w	r4, r4, r8
 8000ce0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ce4:	e7bf      	b.n	8000c66 <__udivmoddi4+0x96>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d909      	bls.n	8000cfe <__udivmoddi4+0x12e>
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	f000 80b1 	beq.w	8000e52 <__udivmoddi4+0x282>
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cf6:	4630      	mov	r0, r6
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	fab3 f683 	clz	r6, r3
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	d14a      	bne.n	8000d9c <__udivmoddi4+0x1cc>
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d302      	bcc.n	8000d10 <__udivmoddi4+0x140>
 8000d0a:	4282      	cmp	r2, r0
 8000d0c:	f200 80b8 	bhi.w	8000e80 <__udivmoddi4+0x2b0>
 8000d10:	1a84      	subs	r4, r0, r2
 8000d12:	eb61 0103 	sbc.w	r1, r1, r3
 8000d16:	2001      	movs	r0, #1
 8000d18:	468c      	mov	ip, r1
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d0a8      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000d1e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d24:	f1c2 0320 	rsb	r3, r2, #32
 8000d28:	fa20 f603 	lsr.w	r6, r0, r3
 8000d2c:	4097      	lsls	r7, r2
 8000d2e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d32:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d36:	40d9      	lsrs	r1, r3
 8000d38:	4330      	orrs	r0, r6
 8000d3a:	0c03      	lsrs	r3, r0, #16
 8000d3c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d40:	fa1f f887 	uxth.w	r8, r7
 8000d44:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d4c:	fb06 f108 	mul.w	r1, r6, r8
 8000d50:	4299      	cmp	r1, r3
 8000d52:	fa04 f402 	lsl.w	r4, r4, r2
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x19c>
 8000d58:	18fb      	adds	r3, r7, r3
 8000d5a:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d5e:	f080 808d 	bcs.w	8000e7c <__udivmoddi4+0x2ac>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 808a 	bls.w	8000e7c <__udivmoddi4+0x2ac>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	443b      	add	r3, r7
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b281      	uxth	r1, r0
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb00 f308 	mul.w	r3, r0, r8
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d907      	bls.n	8000d94 <__udivmoddi4+0x1c4>
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d8a:	d273      	bcs.n	8000e74 <__udivmoddi4+0x2a4>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d971      	bls.n	8000e74 <__udivmoddi4+0x2a4>
 8000d90:	3802      	subs	r0, #2
 8000d92:	4439      	add	r1, r7
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d9a:	e778      	b.n	8000c8e <__udivmoddi4+0xbe>
 8000d9c:	f1c6 0c20 	rsb	ip, r6, #32
 8000da0:	fa03 f406 	lsl.w	r4, r3, r6
 8000da4:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da8:	431c      	orrs	r4, r3
 8000daa:	fa20 f70c 	lsr.w	r7, r0, ip
 8000dae:	fa01 f306 	lsl.w	r3, r1, r6
 8000db2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000db6:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dba:	431f      	orrs	r7, r3
 8000dbc:	0c3b      	lsrs	r3, r7, #16
 8000dbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dc2:	fa1f f884 	uxth.w	r8, r4
 8000dc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dce:	fb09 fa08 	mul.w	sl, r9, r8
 8000dd2:	458a      	cmp	sl, r1
 8000dd4:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd8:	fa00 f306 	lsl.w	r3, r0, r6
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0x220>
 8000dde:	1861      	adds	r1, r4, r1
 8000de0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000de4:	d248      	bcs.n	8000e78 <__udivmoddi4+0x2a8>
 8000de6:	458a      	cmp	sl, r1
 8000de8:	d946      	bls.n	8000e78 <__udivmoddi4+0x2a8>
 8000dea:	f1a9 0902 	sub.w	r9, r9, #2
 8000dee:	4421      	add	r1, r4
 8000df0:	eba1 010a 	sub.w	r1, r1, sl
 8000df4:	b2bf      	uxth	r7, r7
 8000df6:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dfa:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dfe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e02:	fb00 f808 	mul.w	r8, r0, r8
 8000e06:	45b8      	cmp	r8, r7
 8000e08:	d907      	bls.n	8000e1a <__udivmoddi4+0x24a>
 8000e0a:	19e7      	adds	r7, r4, r7
 8000e0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e10:	d22e      	bcs.n	8000e70 <__udivmoddi4+0x2a0>
 8000e12:	45b8      	cmp	r8, r7
 8000e14:	d92c      	bls.n	8000e70 <__udivmoddi4+0x2a0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	4427      	add	r7, r4
 8000e1a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e1e:	eba7 0708 	sub.w	r7, r7, r8
 8000e22:	fba0 8902 	umull	r8, r9, r0, r2
 8000e26:	454f      	cmp	r7, r9
 8000e28:	46c6      	mov	lr, r8
 8000e2a:	4649      	mov	r1, r9
 8000e2c:	d31a      	bcc.n	8000e64 <__udivmoddi4+0x294>
 8000e2e:	d017      	beq.n	8000e60 <__udivmoddi4+0x290>
 8000e30:	b15d      	cbz	r5, 8000e4a <__udivmoddi4+0x27a>
 8000e32:	ebb3 020e 	subs.w	r2, r3, lr
 8000e36:	eb67 0701 	sbc.w	r7, r7, r1
 8000e3a:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e3e:	40f2      	lsrs	r2, r6
 8000e40:	ea4c 0202 	orr.w	r2, ip, r2
 8000e44:	40f7      	lsrs	r7, r6
 8000e46:	e9c5 2700 	strd	r2, r7, [r5]
 8000e4a:	2600      	movs	r6, #0
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e70b      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e9      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6fd      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e60:	4543      	cmp	r3, r8
 8000e62:	d2e5      	bcs.n	8000e30 <__udivmoddi4+0x260>
 8000e64:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e68:	eb69 0104 	sbc.w	r1, r9, r4
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7df      	b.n	8000e30 <__udivmoddi4+0x260>
 8000e70:	4608      	mov	r0, r1
 8000e72:	e7d2      	b.n	8000e1a <__udivmoddi4+0x24a>
 8000e74:	4660      	mov	r0, ip
 8000e76:	e78d      	b.n	8000d94 <__udivmoddi4+0x1c4>
 8000e78:	4681      	mov	r9, r0
 8000e7a:	e7b9      	b.n	8000df0 <__udivmoddi4+0x220>
 8000e7c:	4666      	mov	r6, ip
 8000e7e:	e775      	b.n	8000d6c <__udivmoddi4+0x19c>
 8000e80:	4630      	mov	r0, r6
 8000e82:	e74a      	b.n	8000d1a <__udivmoddi4+0x14a>
 8000e84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e88:	4439      	add	r1, r7
 8000e8a:	e713      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	443c      	add	r4, r7
 8000e90:	e724      	b.n	8000cdc <__udivmoddi4+0x10c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <clamped_acos>:
// Includes
#include "exmath.h"
#include "math.h"
float 
clamped_acos(float ratio)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
	if (ratio > 1.0 )
 8000ea2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ea6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eaa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb2:	dd02      	ble.n	8000eba <clamped_acos+0x22>
		return 0;
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	e01a      	b.n	8000ef0 <clamped_acos+0x58>
	else if( ratio < -1.0)
 8000eba:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ebe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8000ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	d501      	bpl.n	8000ed0 <clamped_acos+0x38>
		return PI;
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	; (8000f00 <clamped_acos+0x68>)
 8000ece:	e00f      	b.n	8000ef0 <clamped_acos+0x58>
	else return acos(ratio);	
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fae5 	bl	80004a0 <__aeabi_f2d>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	ec43 2b10 	vmov	d0, r2, r3
 8000ede:	f008 fdff 	bl	8009ae0 <acos>
 8000ee2:	ec53 2b10 	vmov	r2, r3, d0
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f7ff fe09 	bl	8000b00 <__aeabi_d2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	ee07 3a90 	vmov	s15, r3
} 
 8000ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40490fdb 	.word	0x40490fdb

08000f04 <v3dot>:
  v->z = z;
}

float v3dot( vec3 *v1, vec3 *v2)
// Vector dot product
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  return v1->x * v2->x + v1->y * v2->y + v1->z * v2->z;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	ed93 7a00 	vldr	s14, [r3]
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	edd3 7a00 	vldr	s15, [r3]
 8000f1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	edd3 6a01 	vldr	s13, [r3, #4]
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f3e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f42:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000f46:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <v3cross>:
}


void v3cross( vec3 *out, vec3 *v1, vec3 *v2)
// Cross product
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	607a      	str	r2, [r7, #4]
  out->x = v1->y * v2->z - v1->z * v2->y;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	ed93 7a01 	vldr	s14, [r3, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	edd3 6a02 	vldr	s13, [r3, #8]
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	edc3 7a00 	vstr	s15, [r3]
  out->y = v1->z * v2->x - v1->x * v2->z;
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	edd3 7a00 	vldr	s15, [r3]
 8000f96:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	edd3 6a00 	vldr	s13, [r3]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	edd3 7a02 	vldr	s15, [r3, #8]
 8000fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	edc3 7a01 	vstr	s15, [r3, #4]
  out->z = v1->x * v2->y - v1->y * v2->x;
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	ed93 7a00 	vldr	s14, [r3]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	edd3 6a01 	vldr	s13, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000fd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8000fde:	bf00      	nop
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr

08000fea <v3length>:

float v3length( vec3 *v )
// Vector length
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b082      	sub	sp, #8
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
  return (float) sqrt(v->x*v->x + v->y*v->y + v->z*v->z);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	ed93 7a00 	vldr	s14, [r3]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	edd3 7a00 	vldr	s15, [r3]
 8000ffe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	edd3 6a01 	vldr	s13, [r3, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	edd3 7a01 	vldr	s15, [r3, #4]
 800100e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001012:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	edd3 6a02 	vldr	s13, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001022:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001026:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102a:	ee17 0a90 	vmov	r0, s15
 800102e:	f7ff fa37 	bl	80004a0 <__aeabi_f2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	ec43 2b10 	vmov	d0, r2, r3
 800103a:	f008 fdc7 	bl	8009bcc <sqrt>
 800103e:	ec53 2b10 	vmov	r2, r3, d0
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fd5b 	bl	8000b00 <__aeabi_d2f>
 800104a:	4603      	mov	r3, r0
 800104c:	ee07 3a90 	vmov	s15, r3
}
 8001050:	eeb0 0a67 	vmov.f32	s0, s15
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <v3scale>:
}


void v3scale( vec3 *out, vec3 *in, float s)
// Vector scale
{
 800105a:	b480      	push	{r7}
 800105c:	b085      	sub	sp, #20
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	ed87 0a01 	vstr	s0, [r7, #4]
  out->x = in->x * s;
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	ed93 7a00 	vldr	s14, [r3]
 800106e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	edc3 7a00 	vstr	s15, [r3]
  out->y = in->y * s;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001082:	edd7 7a01 	vldr	s15, [r7, #4]
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	edc3 7a01 	vstr	s15, [r3, #4]
  out->z = in->z * s;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	ed93 7a02 	vldr	s14, [r3, #8]
 8001096:	edd7 7a01 	vldr	s15, [r7, #4]
 800109a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <v3normalize>:

// Normalize vector and return magnitude 
float v3normalize( vec3 *out, vec3 *in)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  float magnitude = v3length(in);
 80010ba:	6838      	ldr	r0, [r7, #0]
 80010bc:	f7ff ff95 	bl	8000fea <v3length>
 80010c0:	ed87 0a03 	vstr	s0, [r7, #12]

  if( magnitude == 0.0f )
 80010c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80010cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d0:	d10d      	bne.n	80010ee <v3normalize+0x3e>
  {
	out->x =out->y=out->z =0.0f;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f04f 0200 	mov.w	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689a      	ldr	r2, [r3, #8]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	601a      	str	r2, [r3, #0]
	return magnitude;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	e00c      	b.n	8001108 <v3normalize+0x58>
  }
  v3scale(out,in,1.0f/magnitude);
 80010ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80010f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80010fa:	eeb0 0a47 	vmov.f32	s0, s14
 80010fe:	6839      	ldr	r1, [r7, #0]
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ffaa 	bl	800105a <v3scale>
  return magnitude;
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	ee07 3a90 	vmov	s15, r3
}
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <Quat_Invert>:
	q->w *= dist;

}

void Quat_Invert( quat *q)
{
 8001116:	b480      	push	{r7}
 8001118:	b085      	sub	sp, #20
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
	float norm, invNorm;

	norm = q->x * q->x + q->y * q->y + q->z * q->z  + q->w * q->w;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	ed93 7a01 	vldr	s14, [r3, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	edd3 7a01 	vldr	s15, [r3, #4]
 800112a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edd3 6a02 	vldr	s13, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edd3 7a02 	vldr	s15, [r3, #8]
 800113a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	edd3 6a03 	vldr	s13, [r3, #12]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a03 	vldr	s15, [r3, #12]
 800114e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001152:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	edd3 6a00 	vldr	s13, [r3]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001166:	ee77 7a27 	vadd.f32	s15, s14, s15
 800116a:	edc7 7a03 	vstr	s15, [r7, #12]
	
	invNorm = (float) (1.0 / norm);
 800116e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001172:	ed97 7a03 	vldr	s14, [r7, #12]
 8001176:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117a:	edc7 7a02 	vstr	s15, [r7, #8]
	
	q->x = -q->x * invNorm;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	edd3 7a01 	vldr	s15, [r3, #4]
 8001184:	eeb1 7a67 	vneg.f32	s14, s15
 8001188:	edd7 7a02 	vldr	s15, [r7, #8]
 800118c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	edc3 7a01 	vstr	s15, [r3, #4]
	q->y = -q->y * invNorm;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	edd3 7a02 	vldr	s15, [r3, #8]
 800119c:	eeb1 7a67 	vneg.f32	s14, s15
 80011a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80011a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	edc3 7a02 	vstr	s15, [r3, #8]
	q->z = -q->z * invNorm;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	edd3 7a03 	vldr	s15, [r3, #12]
 80011b4:	eeb1 7a67 	vneg.f32	s14, s15
 80011b8:	edd7 7a02 	vldr	s15, [r7, #8]
 80011bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	edc3 7a03 	vstr	s15, [r3, #12]
	q->w =  q->w * invNorm;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	ed93 7a00 	vldr	s14, [r3]
 80011cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80011d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	edc3 7a00 	vstr	s15, [r3]
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <Quat_Multiply>:


void Quat_Multiply ( quat *res, quat *q1, quat *q2 )
// Resulting quat will act as if it does Q2 first then Q1 
{
 80011e6:	b480      	push	{r7}
 80011e8:	b08d      	sub	sp, #52	; 0x34
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
	float A, B, C, D, E, F, G, H;

	A = (q1->w + q1->x)*(q2->w + q2->x);
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	ed93 7a00 	vldr	s14, [r3]
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80011fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edd3 6a00 	vldr	s13, [r3]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	edd3 7a01 	vldr	s15, [r3, #4]
 800120e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001216:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	B = (q1->z - q1->y)*(q2->y - q2->z);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	ed93 7a03 	vldr	s14, [r3, #12]
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	edd3 7a02 	vldr	s15, [r3, #8]
 8001226:	ee37 7a67 	vsub.f32	s14, s14, s15
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	edd3 7a03 	vldr	s15, [r3, #12]
 8001236:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800123a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800123e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	C = (q1->w - q1->x)*(q2->y + q2->z); 
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	ed93 7a00 	vldr	s14, [r3]
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	edd3 7a01 	vldr	s15, [r3, #4]
 800124e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	edd3 6a02 	vldr	s13, [r3, #8]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	edd3 7a03 	vldr	s15, [r3, #12]
 800125e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001266:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	D = (q1->y + q1->z)*(q2->w - q2->x);
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	edd3 7a03 	vldr	s15, [r3, #12]
 8001276:	ee37 7a27 	vadd.f32	s14, s14, s15
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	edd3 6a00 	vldr	s13, [r3]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edd3 7a01 	vldr	s15, [r3, #4]
 8001286:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800128a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800128e:	edc7 7a08 	vstr	s15, [r7, #32]
	E = (q1->x + q1->z)*(q2->x + q2->y);
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	ed93 7a01 	vldr	s14, [r3, #4]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	edd3 7a03 	vldr	s15, [r3, #12]
 800129e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80012b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b6:	edc7 7a07 	vstr	s15, [r7, #28]
	F = (q1->x - q1->z)*(q2->x - q2->y);
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	edd3 7a03 	vldr	s15, [r3, #12]
 80012c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80012d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80012da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012de:	edc7 7a06 	vstr	s15, [r7, #24]
	G = (q1->w + q1->y)*(q2->w - q2->z);
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	ed93 7a00 	vldr	s14, [r3]
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80012ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	edd3 6a00 	vldr	s13, [r3]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80012fe:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001302:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001306:	edc7 7a05 	vstr	s15, [r7, #20]
	H = (q1->w - q1->y)*(q2->w + q2->z);
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	ed93 7a00 	vldr	s14, [r3]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	edd3 7a02 	vldr	s15, [r3, #8]
 8001316:	ee37 7a67 	vsub.f32	s14, s14, s15
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	edd3 6a00 	vldr	s13, [r3]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	edd3 7a03 	vldr	s15, [r3, #12]
 8001326:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800132a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800132e:	edc7 7a04 	vstr	s15, [r7, #16]


	res->w = B + (-E - F + G + H) * 0.50f;
 8001332:	edd7 7a07 	vldr	s15, [r7, #28]
 8001336:	eeb1 7a67 	vneg.f32	s14, s15
 800133a:	edd7 7a06 	vldr	s15, [r7, #24]
 800133e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001342:	edd7 7a05 	vldr	s15, [r7, #20]
 8001346:	ee37 7a27 	vadd.f32	s14, s14, s15
 800134a:	edd7 7a04 	vldr	s15, [r7, #16]
 800134e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001352:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001356:	ee27 7a87 	vmul.f32	s14, s15, s14
 800135a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800135e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	edc3 7a00 	vstr	s15, [r3]
	res->x = A - (E + F + G + H) * 0.50f; 
 8001368:	ed97 7a07 	vldr	s14, [r7, #28]
 800136c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001370:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001374:	edd7 7a05 	vldr	s15, [r7, #20]
 8001378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001384:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8001390:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	edc3 7a01 	vstr	s15, [r3, #4]
	res->y = C + (E - F + G - H) * 0.50f; 
 800139a:	ed97 7a07 	vldr	s14, [r7, #28]
 800139e:	edd7 7a06 	vldr	s15, [r7, #24]
 80013a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80013b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013be:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	edc3 7a02 	vstr	s15, [r3, #8]
	res->z = D + (E - F - G + H) * 0.50f;
 80013cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80013d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80013d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80013dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80013ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013f0:	edd7 7a08 	vldr	s15, [r7, #32]
 80013f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80013fe:	bf00      	nop
 8001400:	3734      	adds	r7, #52	; 0x34
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <Quat_RotateVec3>:

void Quat_RotateVec3( quat *q, vec3 *vOut, vec3 *vIn)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	b094      	sub	sp, #80	; 0x50
 800140e:	af00      	add	r7, sp, #0
 8001410:	60f8      	str	r0, [r7, #12]
 8001412:	60b9      	str	r1, [r7, #8]
 8001414:	607a      	str	r2, [r7, #4]
	// v' = q v q^-1

	quat qv,iq,r,qvo;
	qv.x = vIn->x;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	647b      	str	r3, [r7, #68]	; 0x44
	qv.y = vIn->y;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	64bb      	str	r3, [r7, #72]	; 0x48
	qv.z = vIn->z;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	64fb      	str	r3, [r7, #76]	; 0x4c
	qv.w = 0.0f;			// Get v
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	643b      	str	r3, [r7, #64]	; 0x40

	iq.x = q->x;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	637b      	str	r3, [r7, #52]	; 0x34
	iq.y = q->y;
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	63bb      	str	r3, [r7, #56]	; 0x38
	iq.z = q->z;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	68db      	ldr	r3, [r3, #12]
 800143e:	63fb      	str	r3, [r7, #60]	; 0x3c
	iq.w = q->w;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
	Quat_Invert( &iq );		// get q^-1
 8001446:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fe63 	bl	8001116 <Quat_Invert>

	Quat_Multiply ( &r, q, &qv );
 8001450:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001454:	f107 0320 	add.w	r3, r7, #32
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fec3 	bl	80011e6 <Quat_Multiply>
	Quat_Multiply ( &qvo, &r, &iq );	
 8001460:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001464:	f107 0120 	add.w	r1, r7, #32
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff feba 	bl	80011e6 <Quat_Multiply>
	
	vOut->x = qvo.x;
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	601a      	str	r2, [r3, #0]
	vOut->y = qvo.y;
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	605a      	str	r2, [r3, #4]
	vOut->z = qvo.z;	
 800147e:	69fa      	ldr	r2, [r7, #28]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	609a      	str	r2, [r3, #8]
}
 8001484:	bf00      	nop
 8001486:	3750      	adds	r7, #80	; 0x50
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}

0800148c <Quat_SetAxisAndAngle>:
	res->y = q1->y + q2->y;
	res->z = q1->z + q2->z;
}

void Quat_SetAxisAndAngle( quat *q, vec3 *axis, float angle)
{
 800148c:	b5b0      	push	{r4, r5, r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	ed87 0a01 	vstr	s0, [r7, #4]
	float l = sqrt( axis->x*axis->x + axis->y*axis->y + axis->z*axis->z);
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	ed93 7a00 	vldr	s14, [r3]
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	edd3 6a01 	vldr	s13, [r3, #4]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80014b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	edd3 6a02 	vldr	s13, [r3, #8]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80014ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d2:	ee17 0a90 	vmov	r0, s15
 80014d6:	f7fe ffe3 	bl	80004a0 <__aeabi_f2d>
 80014da:	4602      	mov	r2, r0
 80014dc:	460b      	mov	r3, r1
 80014de:	ec43 2b10 	vmov	d0, r2, r3
 80014e2:	f008 fb73 	bl	8009bcc <sqrt>
 80014e6:	ec53 2b10 	vmov	r2, r3, d0
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb07 	bl	8000b00 <__aeabi_d2f>
 80014f2:	4603      	mov	r3, r0
 80014f4:	61fb      	str	r3, [r7, #28]

	float omega=0.5*angle;
 80014f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80014fa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80014fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001502:	edc7 7a06 	vstr	s15, [r7, #24]
	float s=sin(omega)/l;
 8001506:	69b8      	ldr	r0, [r7, #24]
 8001508:	f7fe ffca 	bl	80004a0 <__aeabi_f2d>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b10 	vmov	d0, r2, r3
 8001514:	f008 fa90 	bl	8009a38 <sin>
 8001518:	ec55 4b10 	vmov	r4, r5, d0
 800151c:	69f8      	ldr	r0, [r7, #28]
 800151e:	f7fe ffbf 	bl	80004a0 <__aeabi_f2d>
 8001522:	4602      	mov	r2, r0
 8001524:	460b      	mov	r3, r1
 8001526:	4620      	mov	r0, r4
 8001528:	4629      	mov	r1, r5
 800152a:	f7ff f93b 	bl	80007a4 <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fae3 	bl	8000b00 <__aeabi_d2f>
 800153a:	4603      	mov	r3, r0
 800153c:	617b      	str	r3, [r7, #20]
	q->x = axis->x * s;
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	edd7 7a05 	vldr	s15, [r7, #20]
 8001548:	ee67 7a27 	vmul.f32	s15, s14, s15
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	edc3 7a01 	vstr	s15, [r3, #4]
	q->y = axis->y * s;
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	ed93 7a01 	vldr	s14, [r3, #4]
 8001558:	edd7 7a05 	vldr	s15, [r7, #20]
 800155c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	edc3 7a02 	vstr	s15, [r3, #8]
	q->z = axis->z * s;
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	ed93 7a02 	vldr	s14, [r3, #8]
 800156c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001570:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	edc3 7a03 	vstr	s15, [r3, #12]
	q->w = cos(omega);
 800157a:	69b8      	ldr	r0, [r7, #24]
 800157c:	f7fe ff90 	bl	80004a0 <__aeabi_f2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	ec43 2b10 	vmov	d0, r2, r3
 8001588:	f008 fa06 	bl	8009998 <cos>
 800158c:	ec53 2b10 	vmov	r2, r3, d0
 8001590:	4610      	mov	r0, r2
 8001592:	4619      	mov	r1, r3
 8001594:	f7ff fab4 	bl	8000b00 <__aeabi_d2f>
 8001598:	4602      	mov	r2, r0
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	601a      	str	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080015a8 <Quat_ToEuler>:
}

// This is for cockpit view of the world
void
Quat_ToEuler(quat *q, float *heading,  float *bank, float *attitude)
{
 80015a8:	b5b0      	push	{r4, r5, r7, lr}
 80015aa:	ed2d 8b02 	vpush	{d8}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
 80015b8:	603b      	str	r3, [r7, #0]
    float sqw = q->w*q->w;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ca:	edc7 7a07 	vstr	s15, [r7, #28]
    float sqx = q->x*q->x;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	ed93 7a01 	vldr	s14, [r3, #4]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80015da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015de:	edc7 7a06 	vstr	s15, [r7, #24]
    float sqy = q->y*q->y;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	ed93 7a02 	vldr	s14, [r3, #8]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015f2:	edc7 7a05 	vstr	s15, [r7, #20]
    float sqz = q->z*q->z;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	ed93 7a03 	vldr	s14, [r3, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	edd3 7a03 	vldr	s15, [r3, #12]
 8001602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001606:	edc7 7a04 	vstr	s15, [r7, #16]
	
	*heading = atan2(2.0 * (q->x*q->y + q->z*q->w),-(sqx - sqy - sqz + sqw));
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	edd3 7a02 	vldr	s15, [r3, #8]
 8001616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800162a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162e:	ee17 0a90 	vmov	r0, s15
 8001632:	f7fe ff35 	bl	80004a0 <__aeabi_f2d>
 8001636:	4602      	mov	r2, r0
 8001638:	460b      	mov	r3, r1
 800163a:	f7fe fdd3 	bl	80001e4 <__adddf3>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b18 	vmov	d8, r2, r3
 8001646:	ed97 7a06 	vldr	s14, [r7, #24]
 800164a:	edd7 7a05 	vldr	s15, [r7, #20]
 800164e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001652:	edd7 7a04 	vldr	s15, [r7, #16]
 8001656:	ee37 7a67 	vsub.f32	s14, s14, s15
 800165a:	edd7 7a07 	vldr	s15, [r7, #28]
 800165e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001662:	eef1 7a67 	vneg.f32	s15, s15
 8001666:	ee17 3a90 	vmov	r3, s15
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff18 	bl	80004a0 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	ec43 2b11 	vmov	d1, r2, r3
 8001678:	eeb0 0a48 	vmov.f32	s0, s16
 800167c:	eef0 0a68 	vmov.f32	s1, s17
 8001680:	f008 faa2 	bl	8009bc8 <atan2>
 8001684:	ec53 2b10 	vmov	r2, r3, d0
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff fa38 	bl	8000b00 <__aeabi_d2f>
 8001690:	4602      	mov	r2, r0
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	601a      	str	r2, [r3, #0]
	*heading = (*heading*180/PI) + 180;		// in degrees 
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001870 <Quat_ToEuler+0x2c8>
 80016a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a4:	ee17 0a90 	vmov	r0, s15
 80016a8:	f7fe fefa 	bl	80004a0 <__aeabi_f2d>
 80016ac:	a36e      	add	r3, pc, #440	; (adr r3, 8001868 <Quat_ToEuler+0x2c0>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7ff f877 	bl	80007a4 <__aeabi_ddiv>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	4610      	mov	r0, r2
 80016bc:	4619      	mov	r1, r3
 80016be:	f04f 0200 	mov.w	r2, #0
 80016c2:	4b6c      	ldr	r3, [pc, #432]	; (8001874 <Quat_ToEuler+0x2cc>)
 80016c4:	f7fe fd8e 	bl	80001e4 <__adddf3>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa16 	bl	8000b00 <__aeabi_d2f>
 80016d4:	4602      	mov	r2, r0
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	601a      	str	r2, [r3, #0]
	
    *bank = atan2(2.0 * (q->y*q->z + q->x*q->w),(-sqx - sqy + sqz + sqw));
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	edd3 7a03 	vldr	s15, [r3, #12]
 80016e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	edd3 6a01 	vldr	s13, [r3, #4]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fe:	ee17 0a90 	vmov	r0, s15
 8001702:	f7fe fecd 	bl	80004a0 <__aeabi_f2d>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	f7fe fd6b 	bl	80001e4 <__adddf3>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	ec43 2b18 	vmov	d8, r2, r3
 8001716:	edd7 7a06 	vldr	s15, [r7, #24]
 800171a:	eeb1 7a67 	vneg.f32	s14, s15
 800171e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001722:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001726:	edd7 7a04 	vldr	s15, [r7, #16]
 800172a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001732:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001736:	ee17 0a90 	vmov	r0, s15
 800173a:	f7fe feb1 	bl	80004a0 <__aeabi_f2d>
 800173e:	4602      	mov	r2, r0
 8001740:	460b      	mov	r3, r1
 8001742:	ec43 2b11 	vmov	d1, r2, r3
 8001746:	eeb0 0a48 	vmov.f32	s0, s16
 800174a:	eef0 0a68 	vmov.f32	s1, s17
 800174e:	f008 fa3b 	bl	8009bc8 <atan2>
 8001752:	ec53 2b10 	vmov	r2, r3, d0
 8001756:	4610      	mov	r0, r2
 8001758:	4619      	mov	r1, r3
 800175a:	f7ff f9d1 	bl	8000b00 <__aeabi_d2f>
 800175e:	4602      	mov	r2, r0
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	601a      	str	r2, [r3, #0]
    *bank =  *bank *180/PI;						// in degrees
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edd3 7a00 	vldr	s15, [r3]
 800176a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8001870 <Quat_ToEuler+0x2c8>
 800176e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001772:	ee17 0a90 	vmov	r0, s15
 8001776:	f7fe fe93 	bl	80004a0 <__aeabi_f2d>
 800177a:	a33b      	add	r3, pc, #236	; (adr r3, 8001868 <Quat_ToEuler+0x2c0>)
 800177c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001780:	f7ff f810 	bl	80007a4 <__aeabi_ddiv>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4610      	mov	r0, r2
 800178a:	4619      	mov	r1, r3
 800178c:	f7ff f9b8 	bl	8000b00 <__aeabi_d2f>
 8001790:	4602      	mov	r2, r0
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
	//*attitude = asin(2.0 * (q.x*q.z - q.y*q.w));			// requires q to be normalized on entry  
	*attitude = asin(2.0 * (q->x*q->z - q->y*q->w)/(sqx + sqy + sqz + sqw));  // Normalized in place
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	ed93 7a01 	vldr	s14, [r3, #4]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	edd3 7a03 	vldr	s15, [r3, #12]
 80017a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	edd3 6a02 	vldr	s13, [r3, #8]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ba:	ee17 0a90 	vmov	r0, s15
 80017be:	f7fe fe6f 	bl	80004a0 <__aeabi_f2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	f7fe fd0d 	bl	80001e4 <__adddf3>
 80017ca:	4602      	mov	r2, r0
 80017cc:	460b      	mov	r3, r1
 80017ce:	4614      	mov	r4, r2
 80017d0:	461d      	mov	r5, r3
 80017d2:	ed97 7a06 	vldr	s14, [r7, #24]
 80017d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80017da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017de:	edd7 7a04 	vldr	s15, [r7, #16]
 80017e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e6:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017ee:	ee17 0a90 	vmov	r0, s15
 80017f2:	f7fe fe55 	bl	80004a0 <__aeabi_f2d>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4620      	mov	r0, r4
 80017fc:	4629      	mov	r1, r5
 80017fe:	f7fe ffd1 	bl	80007a4 <__aeabi_ddiv>
 8001802:	4602      	mov	r2, r0
 8001804:	460b      	mov	r3, r1
 8001806:	ec43 2b17 	vmov	d7, r2, r3
 800180a:	eeb0 0a47 	vmov.f32	s0, s14
 800180e:	eef0 0a67 	vmov.f32	s1, s15
 8001812:	f008 f99f 	bl	8009b54 <asin>
 8001816:	ec53 2b10 	vmov	r2, r3, d0
 800181a:	4610      	mov	r0, r2
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff f96f 	bl	8000b00 <__aeabi_d2f>
 8001822:	4602      	mov	r2, r0
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	601a      	str	r2, [r3, #0]
	*attitude  =  *attitude*180/PI;					// in degrees
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001870 <Quat_ToEuler+0x2c8>
 8001832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001836:	ee17 0a90 	vmov	r0, s15
 800183a:	f7fe fe31 	bl	80004a0 <__aeabi_f2d>
 800183e:	a30a      	add	r3, pc, #40	; (adr r3, 8001868 <Quat_ToEuler+0x2c0>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7fe ffae 	bl	80007a4 <__aeabi_ddiv>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	4610      	mov	r0, r2
 800184e:	4619      	mov	r1, r3
 8001850:	f7ff f956 	bl	8000b00 <__aeabi_d2f>
 8001854:	4602      	mov	r2, r0
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	601a      	str	r2, [r3, #0]

}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	ecbd 8b02 	vpop	{d8}
 8001864:	bdb0      	pop	{r4, r5, r7, pc}
 8001866:	bf00      	nop
 8001868:	54442d18 	.word	0x54442d18
 800186c:	400921fb 	.word	0x400921fb
 8001870:	43340000 	.word	0x43340000
 8001874:	40668000 	.word	0x40668000

08001878 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <MX_GPIO_Init+0x110>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a3c      	ldr	r2, [pc, #240]	; (8001988 <MX_GPIO_Init+0x110>)
 8001898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <MX_GPIO_Init+0x110>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	4b36      	ldr	r3, [pc, #216]	; (8001988 <MX_GPIO_Init+0x110>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a35      	ldr	r2, [pc, #212]	; (8001988 <MX_GPIO_Init+0x110>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b33      	ldr	r3, [pc, #204]	; (8001988 <MX_GPIO_Init+0x110>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	607b      	str	r3, [r7, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	603b      	str	r3, [r7, #0]
 80018ca:	4b2f      	ldr	r3, [pc, #188]	; (8001988 <MX_GPIO_Init+0x110>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a2e      	ldr	r2, [pc, #184]	; (8001988 <MX_GPIO_Init+0x110>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <MX_GPIO_Init+0x110>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	603b      	str	r3, [r7, #0]
 80018e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ICM_FSYNC_Pin|LCD_5_5V_EN_Pin, GPIO_PIN_RESET);
 80018e2:	2200      	movs	r2, #0
 80018e4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80018e8:	4828      	ldr	r0, [pc, #160]	; (800198c <MX_GPIO_Init+0x114>)
 80018ea:	f001 fa45 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80018ee:	2201      	movs	r2, #1
 80018f0:	2110      	movs	r1, #16
 80018f2:	4826      	ldr	r0, [pc, #152]	; (800198c <MX_GPIO_Init+0x114>)
 80018f4:	f001 fa40 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BKLT_EN_Pin|AK_RSTN_Pin|TC_RESETN_Pin, GPIO_PIN_RESET);
 80018f8:	2200      	movs	r2, #0
 80018fa:	f240 1105 	movw	r1, #261	; 0x105
 80018fe:	4824      	ldr	r0, [pc, #144]	; (8001990 <MX_GPIO_Init+0x118>)
 8001900:	f001 fa3a 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TC_VEN_GPIO_Port, TC_VEN_Pin, GPIO_PIN_SET);
 8001904:	2201      	movs	r2, #1
 8001906:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800190a:	4821      	ldr	r0, [pc, #132]	; (8001990 <MX_GPIO_Init+0x118>)
 800190c:	f001 fa34 	bl	8002d78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PA3 */
  GPIO_InitStruct.Pin = ICM_INT_Pin|ICM_RESV_Pin|GPIO_PIN_3;
 8001910:	230b      	movs	r3, #11
 8001912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001914:	2300      	movs	r3, #0
 8001916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4619      	mov	r1, r3
 8001922:	481a      	ldr	r0, [pc, #104]	; (800198c <MX_GPIO_Init+0x114>)
 8001924:	f001 f8a4 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ICM_FSYNC_Pin|SPI1_CS_Pin|LCD_5_5V_EN_Pin;
 8001928:	f44f 738a 	mov.w	r3, #276	; 0x114
 800192c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800192e:	2301      	movs	r3, #1
 8001930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	4619      	mov	r1, r3
 8001940:	4812      	ldr	r0, [pc, #72]	; (800198c <MX_GPIO_Init+0x114>)
 8001942:	f001 f895 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BKLT_EN_Pin|AK_RSTN_Pin|TC_VEN_Pin|TC_RESETN_Pin;
 8001946:	f244 1305 	movw	r3, #16645	; 0x4105
 800194a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800194c:	2301      	movs	r3, #1
 800194e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001954:	2300      	movs	r3, #0
 8001956:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	4619      	mov	r1, r3
 800195e:	480c      	ldr	r0, [pc, #48]	; (8001990 <MX_GPIO_Init+0x118>)
 8001960:	f001 f886 	bl	8002a70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB5 PB9 */
  GPIO_InitStruct.Pin = BKLT_FEEDBACK_Pin|AK_DRDY_Pin|GPIO_PIN_5|GPIO_PIN_9;
 8001964:	f241 2322 	movw	r3, #4642	; 0x1222
 8001968:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196a:	2300      	movs	r3, #0
 800196c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	4805      	ldr	r0, [pc, #20]	; (8001990 <MX_GPIO_Init+0x118>)
 800197a:	f001 f879 	bl	8002a70 <HAL_GPIO_Init>

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020000 	.word	0x40020000
 8001990:	40020400 	.word	0x40020400

08001994 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800199c:	2030      	movs	r0, #48	; 0x30
 800199e:	f007 ff83 	bl	80098a8 <USBD_static_malloc>
 80019a2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d105      	bne.n	80019b6 <USBD_CUSTOM_HID_Init+0x22>
  {
    pdev->pClassData = NULL;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80019b2:	2302      	movs	r3, #2
 80019b4:	e039      	b.n	8001a2a <USBD_CUSTOM_HID_Init+0x96>
  }

  pdev->pClassData = (void *)hhid;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	7c1b      	ldrb	r3, [r3, #16]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d107      	bne.n	80019d6 <USBD_CUSTOM_HID_Init+0x42>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2205      	movs	r2, #5
 80019ca:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2205      	movs	r2, #5
 80019d0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80019d4:	e006      	b.n	80019e4 <USBD_CUSTOM_HID_Init+0x50>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2205      	movs	r2, #5
 80019da:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2205      	movs	r2, #5
 80019e0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80019e4:	2302      	movs	r3, #2
 80019e6:	2203      	movs	r2, #3
 80019e8:	2181      	movs	r1, #129	; 0x81
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f007 fe4b 	bl	8009686 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2201      	movs	r2, #1
 80019f4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80019f6:	2302      	movs	r3, #2
 80019f8:	2203      	movs	r2, #3
 80019fa:	2101      	movs	r1, #1
 80019fc:	6878      	ldr	r0, [r7, #4]
 80019fe:	f007 fe42 	bl	8009686 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2201      	movs	r2, #1
 8001a06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	231c      	movs	r3, #28
 8001a20:	2101      	movs	r1, #1
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f007 ff1e 	bl	8009864 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <MX_I2C1_Init+0x54>)
 8001a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x58>)
 8001a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a72:	f001 f99b 	bl	8002dac <HAL_I2C_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a7c:	f000 fcc2 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000254 	.word	0x20000254
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	000186a0 	.word	0x000186a0

08001a90 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <MX_I2C2_Init+0x54>)
 8001a98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a9a:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001a9c:	4a12      	ldr	r2, [pc, #72]	; (8001ae8 <MX_I2C2_Init+0x58>)
 8001a9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001ab2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab4:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001aba:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001acc:	4804      	ldr	r0, [pc, #16]	; (8001ae0 <MX_I2C2_Init+0x50>)
 8001ace:	f001 f96d 	bl	8002dac <HAL_I2C_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ad8:	f000 fc94 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001adc:	bf00      	nop
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	200002a8 	.word	0x200002a8
 8001ae4:	40005800 	.word	0x40005800
 8001ae8:	000186a0 	.word	0x000186a0

08001aec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	2200      	movs	r2, #0
 8001afa:	601a      	str	r2, [r3, #0]
 8001afc:	605a      	str	r2, [r3, #4]
 8001afe:	609a      	str	r2, [r3, #8]
 8001b00:	60da      	str	r2, [r3, #12]
 8001b02:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a3a      	ldr	r2, [pc, #232]	; (8001bf4 <HAL_I2C_MspInit+0x108>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d12c      	bne.n	8001b68 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
 8001b12:	4b39      	ldr	r3, [pc, #228]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a38      	ldr	r2, [pc, #224]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	61bb      	str	r3, [r7, #24]
 8001b28:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b2a:	23c0      	movs	r3, #192	; 0xc0
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b36:	2303      	movs	r3, #3
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	482d      	ldr	r0, [pc, #180]	; (8001bfc <HAL_I2C_MspInit+0x110>)
 8001b46:	f000 ff93 	bl	8002a70 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
 8001b4e:	4b2a      	ldr	r3, [pc, #168]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b52:	4a29      	ldr	r2, [pc, #164]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b58:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5a:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b62:	617b      	str	r3, [r7, #20]
 8001b64:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001b66:	e041      	b.n	8001bec <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a24      	ldr	r2, [pc, #144]	; (8001c00 <HAL_I2C_MspInit+0x114>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d13c      	bne.n	8001bec <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a1f      	ldr	r2, [pc, #124]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b94:	2312      	movs	r3, #18
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4814      	ldr	r0, [pc, #80]	; (8001bfc <HAL_I2C_MspInit+0x110>)
 8001bac:	f000 ff60 	bl	8002a70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb4:	2312      	movs	r3, #18
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001bc0:	2309      	movs	r3, #9
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	480c      	ldr	r0, [pc, #48]	; (8001bfc <HAL_I2C_MspInit+0x110>)
 8001bcc:	f000 ff50 	bl	8002a70 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	4b08      	ldr	r3, [pc, #32]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001bda:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001bde:	6413      	str	r3, [r2, #64]	; 0x40
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_I2C_MspInit+0x10c>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	68fb      	ldr	r3, [r7, #12]
}
 8001bec:	bf00      	nop
 8001bee:	3730      	adds	r7, #48	; 0x30
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}
 8001bf4:	40005400 	.word	0x40005400
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020400 	.word	0x40020400
 8001c00:	40005800 	.word	0x40005800

08001c04 <AKGetMeasurement>:
	int16_t z;
};

//returns true if data is valid	//TODO: clean this up a bit
bool AKGetMeasurement(struct Measure* data)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	6078      	str	r0, [r7, #4]
	buffer[0] = 0x10;	//read data
 8001c0c:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c0e:	2210      	movs	r2, #16
 8001c10:	701a      	strb	r2, [r3, #0]
	if ( HAL_I2C_Master_Transmit(&hi2c2, AK_ADDR, buffer, 1, 10) == HAL_OK)
 8001c12:	230a      	movs	r3, #10
 8001c14:	9300      	str	r3, [sp, #0]
 8001c16:	2301      	movs	r3, #1
 8001c18:	4a23      	ldr	r2, [pc, #140]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c1a:	211a      	movs	r1, #26
 8001c1c:	4823      	ldr	r0, [pc, #140]	; (8001cac <AKGetMeasurement+0xa8>)
 8001c1e:	f001 fa09 	bl	8003034 <HAL_I2C_Master_Transmit>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d139      	bne.n	8001c9c <AKGetMeasurement+0x98>
	{
		if( HAL_I2C_Master_Receive(&hi2c2, AK_ADDR, buffer, 9, 10) == HAL_OK)
 8001c28:	230a      	movs	r3, #10
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	2309      	movs	r3, #9
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c30:	211a      	movs	r1, #26
 8001c32:	481e      	ldr	r0, [pc, #120]	; (8001cac <AKGetMeasurement+0xa8>)
 8001c34:	f001 fafc 	bl	8003230 <HAL_I2C_Master_Receive>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d12e      	bne.n	8001c9c <AKGetMeasurement+0x98>
		{
			if ((buffer[0] & 1) && !(buffer[8] & 8))	//data ready and no overflow
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d028      	beq.n	8001c9c <AKGetMeasurement+0x98>
 8001c4a:	4b17      	ldr	r3, [pc, #92]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c4c:	7a1b      	ldrb	r3, [r3, #8]
 8001c4e:	f003 0308 	and.w	r3, r3, #8
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d122      	bne.n	8001c9c <AKGetMeasurement+0x98>
			{
				//magnetometer axes (x, y, z) are (right, down, front)
				//SteamVR expects (right, up, back)
				//units are 0.15 uT
				data->y = (int16_t)(buffer[1] | buffer[2] << 8);
 8001c56:	4b14      	ldr	r3, [pc, #80]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	b21a      	sxth	r2, r3
 8001c5c:	4b12      	ldr	r3, [pc, #72]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c5e:	789b      	ldrb	r3, [r3, #2]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	b21b      	sxth	r3, r3
 8001c64:	4313      	orrs	r3, r2
 8001c66:	b21a      	sxth	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	805a      	strh	r2, [r3, #2]
				data->z = (int16_t)(buffer[3] | buffer[4] << 8);
 8001c6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c6e:	78db      	ldrb	r3, [r3, #3]
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c74:	791b      	ldrb	r3, [r3, #4]
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	809a      	strh	r2, [r3, #4]
				data->x = (int16_t)(buffer[5] | buffer[6] << 8);
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c84:	795b      	ldrb	r3, [r3, #5]
 8001c86:	b21a      	sxth	r2, r3
 8001c88:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <AKGetMeasurement+0xa4>)
 8001c8a:	799b      	ldrb	r3, [r3, #6]
 8001c8c:	021b      	lsls	r3, r3, #8
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	4313      	orrs	r3, r2
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	801a      	strh	r2, [r3, #0]
				return true;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <AKGetMeasurement+0x9a>
			}
		}
	}
	return false;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000210 	.word	0x20000210
 8001cac:	200002a8 	.word	0x200002a8

08001cb0 <ICMGetMeasurement>:

bool ICMGetMeasurement(vec3* accelData, vec3* gyroData, int16_t* tempData)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af02      	add	r7, sp, #8
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
	buffer[0] = 0xBB;	//read data
 8001cbc:	4b51      	ldr	r3, [pc, #324]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001cbe:	22bb      	movs	r2, #187	; 0xbb
 8001cc0:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2110      	movs	r1, #16
 8001cc6:	4850      	ldr	r0, [pc, #320]	; (8001e08 <ICMGetMeasurement+0x158>)
 8001cc8:	f001 f856 	bl	8002d78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ccc:	2001      	movs	r0, #1
 8001cce:	f000 fd99 	bl	8002804 <HAL_Delay>
	if(HAL_SPI_TransmitReceive(&hspi1, buffer, buffer, 15, 10)!=HAL_OK)
 8001cd2:	230a      	movs	r3, #10
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	230f      	movs	r3, #15
 8001cd8:	4a4a      	ldr	r2, [pc, #296]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001cda:	494a      	ldr	r1, [pc, #296]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001cdc:	484b      	ldr	r0, [pc, #300]	; (8001e0c <ICMGetMeasurement+0x15c>)
 8001cde:	f003 fe36 	bl	800594e <HAL_SPI_TransmitReceive>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <ICMGetMeasurement+0x3c>
		return false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e087      	b.n	8001dfc <ICMGetMeasurement+0x14c>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001cec:	2201      	movs	r2, #1
 8001cee:	2110      	movs	r1, #16
 8001cf0:	4845      	ldr	r0, [pc, #276]	; (8001e08 <ICMGetMeasurement+0x158>)
 8001cf2:	f001 f841 	bl	8002d78 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 fd84 	bl	8002804 <HAL_Delay>

	//accelerometer axes (x, y, z) are (right, down, back)
	//SteamVR expects (right, up, back)
	accelData->y = (int16_t)(buffer[ 1] << 8 | buffer[ 2]);
 8001cfc:	4b41      	ldr	r3, [pc, #260]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	b21a      	sxth	r2, r3
 8001d04:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d06:	789b      	ldrb	r3, [r3, #2]
 8001d08:	b21b      	sxth	r3, r3
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	b21b      	sxth	r3, r3
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	edc3 7a01 	vstr	s15, [r3, #4]
	accelData->z = (int16_t)(buffer[ 3] << 8 | buffer[ 4]);
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d1e:	78db      	ldrb	r3, [r3, #3]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	4b37      	ldr	r3, [pc, #220]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d26:	791b      	ldrb	r3, [r3, #4]
 8001d28:	b21b      	sxth	r3, r3
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	b21b      	sxth	r3, r3
 8001d2e:	ee07 3a90 	vmov	s15, r3
 8001d32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	edc3 7a02 	vstr	s15, [r3, #8]
	accelData->x = (int16_t)(buffer[ 5] << 8 | buffer[ 6]) * -1.0;
 8001d3c:	4b31      	ldr	r3, [pc, #196]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d3e:	795b      	ldrb	r3, [r3, #5]
 8001d40:	021b      	lsls	r3, r3, #8
 8001d42:	b21a      	sxth	r2, r3
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d46:	799b      	ldrb	r3, [r3, #6]
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	b21b      	sxth	r3, r3
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fb94 	bl	800047c <__aeabi_i2d>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe fed0 	bl	8000b00 <__aeabi_d2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	ee07 3a90 	vmov	s15, r3
 8001d66:	eef1 7a67 	vneg.f32	s15, s15
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	edc3 7a00 	vstr	s15, [r3]
	*tempData    = (int16_t)(buffer[ 7] << 8 | buffer[ 8]);
 8001d70:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d72:	79db      	ldrb	r3, [r3, #7]
 8001d74:	021b      	lsls	r3, r3, #8
 8001d76:	b21a      	sxth	r2, r3
 8001d78:	4b22      	ldr	r3, [pc, #136]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d7a:	7a1b      	ldrb	r3, [r3, #8]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	b21a      	sxth	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	801a      	strh	r2, [r3, #0]
	gyroData->y  = (int16_t)(buffer[ 9] << 8 | buffer[10]);
 8001d86:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d88:	7a5b      	ldrb	r3, [r3, #9]
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	b21a      	sxth	r2, r3
 8001d8e:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001d90:	7a9b      	ldrb	r3, [r3, #10]
 8001d92:	b21b      	sxth	r3, r3
 8001d94:	4313      	orrs	r3, r2
 8001d96:	b21b      	sxth	r3, r3
 8001d98:	ee07 3a90 	vmov	s15, r3
 8001d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	edc3 7a01 	vstr	s15, [r3, #4]
	gyroData->z  = (int16_t)(buffer[11] << 8 | buffer[12]);
 8001da6:	4b17      	ldr	r3, [pc, #92]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001da8:	7adb      	ldrb	r3, [r3, #11]
 8001daa:	021b      	lsls	r3, r3, #8
 8001dac:	b21a      	sxth	r2, r3
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001db0:	7b1b      	ldrb	r3, [r3, #12]
 8001db2:	b21b      	sxth	r3, r3
 8001db4:	4313      	orrs	r3, r2
 8001db6:	b21b      	sxth	r3, r3
 8001db8:	ee07 3a90 	vmov	s15, r3
 8001dbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	edc3 7a02 	vstr	s15, [r3, #8]
	gyroData->x  = (int16_t)(buffer[14] << 8 | buffer[13]) * -1.0;
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001dc8:	7b9b      	ldrb	r3, [r3, #14]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	b21a      	sxth	r2, r3
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <ICMGetMeasurement+0x154>)
 8001dd0:	7b5b      	ldrb	r3, [r3, #13]
 8001dd2:	b21b      	sxth	r3, r3
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	b21b      	sxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7fe fb4f 	bl	800047c <__aeabi_i2d>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fe8b 	bl	8000b00 <__aeabi_d2f>
 8001dea:	4603      	mov	r3, r0
 8001dec:	ee07 3a90 	vmov	s15, r3
 8001df0:	eef1 7a67 	vneg.f32	s15, s15
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	edc3 7a00 	vstr	s15, [r3]

	return true;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000210 	.word	0x20000210
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	200002fc 	.word	0x200002fc

08001e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	f5ad 6dd9 	sub.w	sp, sp, #1736	; 0x6c8
 8001e16:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e18:	f000 fc82 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e1c:	f000 fa84 	bl	8002328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e20:	f7ff fd2a 	bl	8001878 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001e24:	f7ff fe06 	bl	8001a34 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001e28:	f000 fbde 	bl	80025e8 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001e2c:	f000 faf0 	bl	8002410 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001e30:	f7ff fe2e 	bl	8001a90 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 8001e34:	f007 f922 	bl	800907c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  USBD_CUSTOM_HID_Init(&hUsbDeviceFS);
 8001e38:	48b6      	ldr	r0, [pc, #728]	; (8002114 <main+0x304>)
 8001e3a:	f7ff fdab 	bl	8001994 <USBD_CUSTOM_HID_Init>
  //Currently unknown usage:
  //GPIOA, PIN 3
  //GPIOB, PINS 5, 9
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);	//GPIO B9 hi prevents Toshiba from receiving
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//GPIO B5 goes to light sensor, might be reset or input
  HAL_Delay(10);
 8001e3e:	200a      	movs	r0, #10
 8001e40:	f000 fce0 	bl	8002804 <HAL_Delay>
  //Initialising the imu components while we wait for hdmi to be ready


  //Mag: AsahiKASEI AK09915c (on I2C2)

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
 8001e44:	2201      	movs	r2, #1
 8001e46:	2104      	movs	r1, #4
 8001e48:	48b3      	ldr	r0, [pc, #716]	; (8002118 <main+0x308>)
 8001e4a:	f000 ff95 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f000 fcd8 	bl	8002804 <HAL_Delay>
  //soft reset
  buffer[0] = 0x32;
 8001e54:	4bb1      	ldr	r3, [pc, #708]	; (800211c <main+0x30c>)
 8001e56:	2232      	movs	r2, #50	; 0x32
 8001e58:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x01;
 8001e5a:	4bb0      	ldr	r3, [pc, #704]	; (800211c <main+0x30c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Master_Transmit(&hi2c2, AK_ADDR, buffer, 2, 100);
 8001e60:	2364      	movs	r3, #100	; 0x64
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	2302      	movs	r3, #2
 8001e66:	4aad      	ldr	r2, [pc, #692]	; (800211c <main+0x30c>)
 8001e68:	211a      	movs	r1, #26
 8001e6a:	48ad      	ldr	r0, [pc, #692]	; (8002120 <main+0x310>)
 8001e6c:	f001 f8e2 	bl	8003034 <HAL_I2C_Master_Transmit>
  HAL_Delay(1);
 8001e70:	2001      	movs	r0, #1
 8001e72:	f000 fcc7 	bl	8002804 <HAL_Delay>

  //test read WhoAmI
  buffer[0] = 0x00;
 8001e76:	4ba9      	ldr	r3, [pc, #676]	; (800211c <main+0x30c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	701a      	strb	r2, [r3, #0]
  HAL_I2C_Master_Transmit(&hi2c2, AK_ADDR, buffer, 1, 10);
 8001e7c:	230a      	movs	r3, #10
 8001e7e:	9300      	str	r3, [sp, #0]
 8001e80:	2301      	movs	r3, #1
 8001e82:	4aa6      	ldr	r2, [pc, #664]	; (800211c <main+0x30c>)
 8001e84:	211a      	movs	r1, #26
 8001e86:	48a6      	ldr	r0, [pc, #664]	; (8002120 <main+0x310>)
 8001e88:	f001 f8d4 	bl	8003034 <HAL_I2C_Master_Transmit>
  HAL_I2C_Master_Receive(&hi2c2, AK_ADDR, buffer, 2, 10);
 8001e8c:	230a      	movs	r3, #10
 8001e8e:	9300      	str	r3, [sp, #0]
 8001e90:	2302      	movs	r3, #2
 8001e92:	4aa2      	ldr	r2, [pc, #648]	; (800211c <main+0x30c>)
 8001e94:	211a      	movs	r1, #26
 8001e96:	48a2      	ldr	r0, [pc, #648]	; (8002120 <main+0x310>)
 8001e98:	f001 f9ca 	bl	8003230 <HAL_I2C_Master_Receive>

  //control settings
  buffer[0] = 0x30;
 8001e9c:	4b9f      	ldr	r3, [pc, #636]	; (800211c <main+0x30c>)
 8001e9e:	2230      	movs	r2, #48	; 0x30
 8001ea0:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x20; //enable noise filter
 8001ea2:	4b9e      	ldr	r3, [pc, #632]	; (800211c <main+0x30c>)
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	705a      	strb	r2, [r3, #1]
  buffer[2] = 0x4A;	//low noise drive & continuous measurement 200Hz
 8001ea8:	4b9c      	ldr	r3, [pc, #624]	; (800211c <main+0x30c>)
 8001eaa:	224a      	movs	r2, #74	; 0x4a
 8001eac:	709a      	strb	r2, [r3, #2]

  if ( HAL_I2C_Master_Transmit(&hi2c2, AK_ADDR, buffer, 3, 10) != HAL_OK)
 8001eae:	230a      	movs	r3, #10
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	4a99      	ldr	r2, [pc, #612]	; (800211c <main+0x30c>)
 8001eb6:	211a      	movs	r1, #26
 8001eb8:	4899      	ldr	r0, [pc, #612]	; (8002120 <main+0x310>)
 8001eba:	f001 f8bb 	bl	8003034 <HAL_I2C_Master_Transmit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <main+0xb8>
	  Error_Handler();
 8001ec4:	f000 fa9e 	bl	8002404 <Error_Handler>

  //Gryro/Accel: InvenSense ICM-20602 (on SPI1)

  //soft reset
  buffer[0] = 0x6B;	//write power management 1
 8001ec8:	4b94      	ldr	r3, [pc, #592]	; (800211c <main+0x30c>)
 8001eca:	226b      	movs	r2, #107	; 0x6b
 8001ecc:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x80;	//set reset bit
 8001ece:	4b93      	ldr	r3, [pc, #588]	; (800211c <main+0x30c>)
 8001ed0:	2280      	movs	r2, #128	; 0x80
 8001ed2:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	2110      	movs	r1, #16
 8001ed8:	4892      	ldr	r0, [pc, #584]	; (8002124 <main+0x314>)
 8001eda:	f000 ff4d 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001ede:	2001      	movs	r0, #1
 8001ee0:	f000 fc90 	bl	8002804 <HAL_Delay>
  if(HAL_SPI_TransmitReceive(&hspi1, buffer, buffer, 2, 10)!=HAL_OK)
 8001ee4:	230a      	movs	r3, #10
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	2302      	movs	r3, #2
 8001eea:	4a8c      	ldr	r2, [pc, #560]	; (800211c <main+0x30c>)
 8001eec:	498b      	ldr	r1, [pc, #556]	; (800211c <main+0x30c>)
 8001eee:	488e      	ldr	r0, [pc, #568]	; (8002128 <main+0x318>)
 8001ef0:	f003 fd2d 	bl	800594e <HAL_SPI_TransmitReceive>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <main+0xee>
	  Error_Handler();
 8001efa:	f000 fa83 	bl	8002404 <Error_Handler>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001efe:	2201      	movs	r2, #1
 8001f00:	2110      	movs	r1, #16
 8001f02:	4888      	ldr	r0, [pc, #544]	; (8002124 <main+0x314>)
 8001f04:	f000 ff38 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001f08:	2001      	movs	r0, #1
 8001f0a:	f000 fc7b 	bl	8002804 <HAL_Delay>

  //set sampling rate
  buffer[0] = 0x19;	//write sample rate divider
 8001f0e:	4b83      	ldr	r3, [pc, #524]	; (800211c <main+0x30c>)
 8001f10:	2219      	movs	r2, #25
 8001f12:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x04;	//200Hz
 8001f14:	4b81      	ldr	r3, [pc, #516]	; (800211c <main+0x30c>)
 8001f16:	2204      	movs	r2, #4
 8001f18:	705a      	strb	r2, [r3, #1]
  buffer[2] = 0x06;	//unexplained bit, maxed gyro and temp filtering
 8001f1a:	4b80      	ldr	r3, [pc, #512]	; (800211c <main+0x30c>)
 8001f1c:	2206      	movs	r2, #6
 8001f1e:	709a      	strb	r2, [r3, #2]
  buffer[3] = 0x00;	//gyro scale +/- 250dps, filter bypass disabled
 8001f20:	4b7e      	ldr	r3, [pc, #504]	; (800211c <main+0x30c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	70da      	strb	r2, [r3, #3]
  buffer[4] = 0x00;	//accel scale +/- 2g
 8001f26:	4b7d      	ldr	r3, [pc, #500]	; (800211c <main+0x30c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	711a      	strb	r2, [r3, #4]
  buffer[5] = 0x36;	//32 accel sample averaging (in LP mode?), filter bypass disabled, max accel filtering
 8001f2c:	4b7b      	ldr	r3, [pc, #492]	; (800211c <main+0x30c>)
 8001f2e:	2236      	movs	r2, #54	; 0x36
 8001f30:	715a      	strb	r2, [r3, #5]
  buffer[6] = 0x70;	//128 gyro sample averaging (in LP mode?)
 8001f32:	4b7a      	ldr	r3, [pc, #488]	; (800211c <main+0x30c>)
 8001f34:	2270      	movs	r2, #112	; 0x70
 8001f36:	719a      	strb	r2, [r3, #6]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2110      	movs	r1, #16
 8001f3c:	4879      	ldr	r0, [pc, #484]	; (8002124 <main+0x314>)
 8001f3e:	f000 ff1b 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 fc5e 	bl	8002804 <HAL_Delay>
  if(HAL_SPI_TransmitReceive(&hspi1, buffer, buffer, 7, 10)!=HAL_OK)
 8001f48:	230a      	movs	r3, #10
 8001f4a:	9300      	str	r3, [sp, #0]
 8001f4c:	2307      	movs	r3, #7
 8001f4e:	4a73      	ldr	r2, [pc, #460]	; (800211c <main+0x30c>)
 8001f50:	4972      	ldr	r1, [pc, #456]	; (800211c <main+0x30c>)
 8001f52:	4875      	ldr	r0, [pc, #468]	; (8002128 <main+0x318>)
 8001f54:	f003 fcfb 	bl	800594e <HAL_SPI_TransmitReceive>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d001      	beq.n	8001f62 <main+0x152>
	  Error_Handler();
 8001f5e:	f000 fa51 	bl	8002404 <Error_Handler>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001f62:	2201      	movs	r2, #1
 8001f64:	2110      	movs	r1, #16
 8001f66:	486f      	ldr	r0, [pc, #444]	; (8002124 <main+0x314>)
 8001f68:	f000 ff06 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001f6c:	2001      	movs	r0, #1
 8001f6e:	f000 fc49 	bl	8002804 <HAL_Delay>

  //wake device
  buffer[0] = 0x6B;	//write power management 1
 8001f72:	4b6a      	ldr	r3, [pc, #424]	; (800211c <main+0x30c>)
 8001f74:	226b      	movs	r2, #107	; 0x6b
 8001f76:	701a      	strb	r2, [r3, #0]
  buffer[1] = 0x01;	//wake device
 8001f78:	4b68      	ldr	r3, [pc, #416]	; (800211c <main+0x30c>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	705a      	strb	r2, [r3, #1]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2110      	movs	r1, #16
 8001f82:	4868      	ldr	r0, [pc, #416]	; (8002124 <main+0x314>)
 8001f84:	f000 fef8 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f000 fc3b 	bl	8002804 <HAL_Delay>
  if(HAL_SPI_TransmitReceive(&hspi1, buffer, buffer, 2, 10)!=HAL_OK)
 8001f8e:	230a      	movs	r3, #10
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2302      	movs	r3, #2
 8001f94:	4a61      	ldr	r2, [pc, #388]	; (800211c <main+0x30c>)
 8001f96:	4961      	ldr	r1, [pc, #388]	; (800211c <main+0x30c>)
 8001f98:	4863      	ldr	r0, [pc, #396]	; (8002128 <main+0x318>)
 8001f9a:	f003 fcd8 	bl	800594e <HAL_SPI_TransmitReceive>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <main+0x198>
	  Error_Handler();
 8001fa4:	f000 fa2e 	bl	8002404 <Error_Handler>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001fa8:	2201      	movs	r2, #1
 8001faa:	2110      	movs	r1, #16
 8001fac:	485d      	ldr	r0, [pc, #372]	; (8002124 <main+0x314>)
 8001fae:	f000 fee3 	bl	8002d78 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f000 fc26 	bl	8002804 <HAL_Delay>
  HAL_Delay(100);
  //PB1 seems to be an input related to back light power
  //  because using it as an output prevents backlight from turning on while driven low
*/

  HAL_Delay(5);	//wait for accel/gyro filter to be populated
 8001fb8:	2005      	movs	r0, #5
 8001fba:	f000 fc23 	bl	8002804 <HAL_Delay>
	quat q_correct;
	float mag_g, angle;
	float heading, bank, attitude;

	//variables related to keeping running sum
	struct Measure magBuffer[256] = {{0,0,0}};
 8001fbe:	463b      	mov	r3, r7
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f007 fcdb 	bl	8009984 <memset>
	int32_t magSumX = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
	int32_t magSumY = 0;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
	int32_t magSumZ = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
	uint8_t sumIndex = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 36b3 	strb.w	r3, [r7, #1715]	; 0x6b3

    /* USER CODE BEGIN 3 */
//	HAL_Delay(5);

	//keep a running sum to smooth magnetometer readings b/c AK09915 has ~10 bits worth of data for Earth's magnetic field strength
	if(AKGetMeasurement(&magMeas) == true)
 8001fe6:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 8001fea:	4618      	mov	r0, r3
 8001fec:	f7ff fe0a 	bl	8001c04 <AKGetMeasurement>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 808b 	beq.w	800210e <main+0x2fe>
	{
		magSumX -= magBuffer[sumIndex].x;
 8001ff8:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 8001ffc:	4639      	mov	r1, r7
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	440b      	add	r3, r1
 8002008:	f9b3 3000 	ldrsh.w	r3, [r3]
 800200c:	461a      	mov	r2, r3
 800200e:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 8002012:	1a9b      	subs	r3, r3, r2
 8002014:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
		magSumY -= magBuffer[sumIndex].y;
 8002018:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800201c:	4639      	mov	r1, r7
 800201e:	4613      	mov	r3, r2
 8002020:	005b      	lsls	r3, r3, #1
 8002022:	4413      	add	r3, r2
 8002024:	005b      	lsls	r3, r3, #1
 8002026:	440b      	add	r3, r1
 8002028:	3302      	adds	r3, #2
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	461a      	mov	r2, r3
 8002030:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		magSumZ -= magBuffer[sumIndex].z;
 800203a:	f897 26b3 	ldrb.w	r2, [r7, #1715]	; 0x6b3
 800203e:	4639      	mov	r1, r7
 8002040:	4613      	mov	r3, r2
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	4413      	add	r3, r2
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	440b      	add	r3, r1
 800204a:	3304      	adds	r3, #4
 800204c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002050:	461a      	mov	r2, r3
 8002052:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 8002056:	1a9b      	subs	r3, r3, r2
 8002058:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4

		magBuffer[sumIndex++] = magMeas;
 800205c:	f897 36b3 	ldrb.w	r3, [r7, #1715]	; 0x6b3
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	f887 26b3 	strb.w	r2, [r7, #1715]	; 0x6b3
 8002066:	4619      	mov	r1, r3
 8002068:	463a      	mov	r2, r7
 800206a:	460b      	mov	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	440b      	add	r3, r1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	4413      	add	r3, r2
 8002074:	461a      	mov	r2, r3
 8002076:	f507 63d1 	add.w	r3, r7, #1672	; 0x688
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	6010      	str	r0, [r2, #0]
 800207e:	889b      	ldrh	r3, [r3, #4]
 8002080:	8093      	strh	r3, [r2, #4]

		magSumX += magMeas.x;
 8002082:	f9b7 3688 	ldrsh.w	r3, [r7, #1672]	; 0x688
 8002086:	461a      	mov	r2, r3
 8002088:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 800208c:	4413      	add	r3, r2
 800208e:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
		magSumY += magMeas.y;
 8002092:	f9b7 368a 	ldrsh.w	r3, [r7, #1674]	; 0x68a
 8002096:	461a      	mov	r2, r3
 8002098:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 800209c:	4413      	add	r3, r2
 800209e:	f8c7 36b8 	str.w	r3, [r7, #1720]	; 0x6b8
		magSumZ += magMeas.z;
 80020a2:	f9b7 368c 	ldrsh.w	r3, [r7, #1676]	; 0x68c
 80020a6:	461a      	mov	r2, r3
 80020a8:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 80020ac:	4413      	add	r3, r2
 80020ae:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4

		v_mag_meas.x = magSumX;
 80020b2:	f8d7 36bc 	ldr.w	r3, [r7, #1724]	; 0x6bc
 80020b6:	ee07 3a90 	vmov	s15, r3
 80020ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020be:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 80020c2:	edc3 7a00 	vstr	s15, [r3]
		v_mag_meas.y = magSumY;
 80020c6:	f8d7 36b8 	ldr.w	r3, [r7, #1720]	; 0x6b8
 80020ca:	ee07 3a90 	vmov	s15, r3
 80020ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020d2:	f207 6344 	addw	r3, r7, #1604	; 0x644
 80020d6:	edc3 7a00 	vstr	s15, [r3]
		v_mag_meas.z = magSumZ;
 80020da:	f8d7 36b4 	ldr.w	r3, [r7, #1716]	; 0x6b4
 80020de:	ee07 3a90 	vmov	s15, r3
 80020e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e6:	f507 63c9 	add.w	r3, r7, #1608	; 0x648
 80020ea:	edc3 7a00 	vstr	s15, [r3]
	}
	else
		while(1);

	if(ICMGetMeasurement(&accelVec, &gyroVec, &tempData) != true)
 80020ee:	f207 6286 	addw	r2, r7, #1670	; 0x686
 80020f2:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 80020f6:	f207 639c 	addw	r3, r7, #1692	; 0x69c
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff fdd8 	bl	8001cb0 <ICMGetMeasurement>
 8002100:	4603      	mov	r3, r0
 8002102:	f083 0301 	eor.w	r3, r3, #1
 8002106:	b2db      	uxtb	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	d00f      	beq.n	800212c <main+0x31c>
 800210c:	e000      	b.n	8002110 <main+0x300>
		while(1);
 800210e:	e7fe      	b.n	800210e <main+0x2fe>
		while(1);
 8002110:	e7fe      	b.n	8002110 <main+0x300>
 8002112:	bf00      	nop
 8002114:	2000039c 	.word	0x2000039c
 8002118:	40020400 	.word	0x40020400
 800211c:	20000210 	.word	0x20000210
 8002120:	200002a8 	.word	0x200002a8
 8002124:	40020000 	.word	0x40020000
 8002128:	200002fc 	.word	0x200002fc


	if(v3normalize( &v_acc_meas, &accelVec) == 0)
 800212c:	f207 629c 	addw	r2, r7, #1692	; 0x69c
 8002130:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe ffba 	bl	80010b0 <v3normalize>
 800213c:	eef0 7a40 	vmov.f32	s15, s0
 8002140:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d105      	bne.n	8002156 <main+0x346>
		v_acc_meas = gV_world_down;
 800214a:	4a73      	ldr	r2, [pc, #460]	; (8002318 <main+0x508>)
 800214c:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8002150:	ca07      	ldmia	r2, {r0, r1, r2}
 8002152:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	if(v3normalize( &v_mag_meas, &v_mag_meas) == 0)
 8002156:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800215a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7fe ffa5 	bl	80010b0 <v3normalize>
 8002166:	eef0 7a40 	vmov.f32	s15, s0
 800216a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800216e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002172:	d105      	bne.n	8002180 <main+0x370>
		v_mag_meas = gV_world_north;
 8002174:	4a69      	ldr	r2, [pc, #420]	; (800231c <main+0x50c>)
 8002176:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800217a:	ca07      	ldmia	r2, {r0, r1, r2}
 800217c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#define INTEGRATING
#ifdef INTEGRATING

	// used when we incrementally maintain the sensor body attitude in the loop and apply correction to the last measured attitude each pass
	//                                 out
	Quat_RotateVec3( &gQ_gyroFrame, &v_meas_world_down, &v_acc_meas);
 8002180:	f207 624c 	addw	r2, r7, #1612	; 0x64c
 8002184:	f207 6334 	addw	r3, r7, #1588	; 0x634
 8002188:	4619      	mov	r1, r3
 800218a:	4865      	ldr	r0, [pc, #404]	; (8002320 <main+0x510>)
 800218c:	f7ff f93d 	bl	800140a <Quat_RotateVec3>
	v_meas_world_north.x = v_mag_meas.x;
	v_meas_world_north.y = v_mag_meas.y;
	v_meas_world_north.z = v_mag_meas.z;
#endif
	//      v_out   ,v_in1             , vin_2
	v3cross(&v_cross,&v_meas_world_down, &gV_world_down);	// create the 90 deg vector to rotate around from the measured G vector and the world view G vector
 8002190:	f207 6134 	addw	r1, r7, #1588	; 0x634
 8002194:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8002198:	4a5f      	ldr	r2, [pc, #380]	; (8002318 <main+0x508>)
 800219a:	4618      	mov	r0, r3
 800219c:	f7fe feda 	bl	8000f54 <v3cross>

	mag_g =  v3normalize(&v_cross,&v_cross); // The magnitude can not be used as the angle to rotate-- it can only provides  0-90 degrees, not 180
 80021a0:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 80021a4:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe ff80 	bl	80010b0 <v3normalize>
 80021b0:	f207 63ac 	addw	r3, r7, #1708	; 0x6ac
 80021b4:	ed83 0a00 	vstr	s0, [r3]

	// calculate the angle to rotate, this gives the 0-180 degrees we need
	angle = fabs( clamped_acos( v3dot( &v_meas_world_down, &gV_world_down) ) ); // Angles are always positive since the rotation angle flips appropriately.
 80021b8:	f207 6334 	addw	r3, r7, #1588	; 0x634
 80021bc:	4956      	ldr	r1, [pc, #344]	; (8002318 <main+0x508>)
 80021be:	4618      	mov	r0, r3
 80021c0:	f7fe fea0 	bl	8000f04 <v3dot>
 80021c4:	eef0 7a40 	vmov.f32	s15, s0
 80021c8:	eeb0 0a67 	vmov.f32	s0, s15
 80021cc:	f7fe fe64 	bl	8000e98 <clamped_acos>
 80021d0:	eef0 7a40 	vmov.f32	s15, s0
 80021d4:	eef0 7ae7 	vabs.f32	s15, s15
 80021d8:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 80021dc:	edc3 7a00 	vstr	s15, [r3]
//	angle = 0;

	// With the angle to rotate and the axis to rotate around, form a rotation quaternion (q_correct) - Then apply that to the quaternion representing the
	// the sensor body( Q_gyroFrame).

	Quat_SetAxisAndAngle( &q_correct, &v_cross, angle);
 80021e0:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 80021e4:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 80021e8:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 80021ec:	ed91 0a00 	vldr	s0, [r1]
 80021f0:	4611      	mov	r1, r2
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff f94a 	bl	800148c <Quat_SetAxisAndAngle>
	Quat_Multiply( &gQ_gyroFrame, &q_correct, &gQ_gyroFrame );
 80021f8:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 80021fc:	4a48      	ldr	r2, [pc, #288]	; (8002320 <main+0x510>)
 80021fe:	4619      	mov	r1, r3
 8002200:	4847      	ldr	r0, [pc, #284]	; (8002320 <main+0x510>)
 8002202:	f7fe fff0 	bl	80011e6 <Quat_Multiply>

	// now the same for the mag ---------------------------------------------------
#define do_mag
#ifdef do_mag
					// in 			// out 				/in
	Quat_RotateVec3( &gQ_gyroFrame, &v_meas_world_north, &v_mag_meas);
 8002206:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800220a:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 800220e:	4619      	mov	r1, r3
 8002210:	4843      	ldr	r0, [pc, #268]	; (8002320 <main+0x510>)
 8002212:	f7ff f8fa 	bl	800140a <Quat_RotateVec3>
	v_meas_world_north.z = 0.0f;	// take Z component out -- flatten to x & y only because of inclination ??
 8002216:	f04f 0300 	mov.w	r3, #0
 800221a:	f507 62c6 	add.w	r2, r7, #1584	; 0x630
 800221e:	6013      	str	r3, [r2, #0]
	v3normalize(&v_meas_world_north,&v_meas_world_north);
 8002220:	f507 62c5 	add.w	r2, r7, #1576	; 0x628
 8002224:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8002228:	4611      	mov	r1, r2
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe ff40 	bl	80010b0 <v3normalize>

	v3cross(&v_cross,&v_meas_world_north, &gV_world_north);
 8002230:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8002234:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8002238:	4a38      	ldr	r2, [pc, #224]	; (800231c <main+0x50c>)
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fe8a 	bl	8000f54 <v3cross>
	v3normalize(&v_cross,&v_cross);
 8002240:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 8002244:	f207 631c 	addw	r3, r7, #1564	; 0x61c
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f7fe ff30 	bl	80010b0 <v3normalize>

	angle = fabs( clamped_acos( v3dot( &v_meas_world_north, &gV_world_north) ) ); // Angles are always positive since the rotation angle flips appropriately.
 8002250:	f507 63c5 	add.w	r3, r7, #1576	; 0x628
 8002254:	4931      	ldr	r1, [pc, #196]	; (800231c <main+0x50c>)
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe fe54 	bl	8000f04 <v3dot>
 800225c:	eef0 7a40 	vmov.f32	s15, s0
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	f7fe fe18 	bl	8000e98 <clamped_acos>
 8002268:	eef0 7a40 	vmov.f32	s15, s0
 800226c:	eef0 7ae7 	vabs.f32	s15, s15
 8002270:	f507 63d5 	add.w	r3, r7, #1704	; 0x6a8
 8002274:	edc3 7a00 	vstr	s15, [r3]

//	if(angle > 0.001)
//		angle = 0.001;
//	angle = 0;
	// Get the quat that rotates our sensor toward the world vector by the specified amount
	Quat_SetAxisAndAngle( &q_correct, &v_cross, angle);
 8002278:	f207 621c 	addw	r2, r7, #1564	; 0x61c
 800227c:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 8002280:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 8002284:	ed91 0a00 	vldr	s0, [r1]
 8002288:	4611      	mov	r1, r2
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f8fe 	bl	800148c <Quat_SetAxisAndAngle>
	Quat_Multiply( &gQ_gyroFrame, &q_correct, &gQ_gyroFrame );
 8002290:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 8002294:	4a22      	ldr	r2, [pc, #136]	; (8002320 <main+0x510>)
 8002296:	4619      	mov	r1, r3
 8002298:	4821      	ldr	r0, [pc, #132]	; (8002320 <main+0x510>)
 800229a:	f7fe ffa4 	bl	80011e6 <Quat_Multiply>
#endif
	Quat_ToEuler( &gQ_gyroFrame, &heading, &bank, &attitude);
 800229e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80022a2:	f207 6204 	addw	r2, r7, #1540	; 0x604
 80022a6:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 80022aa:	481d      	ldr	r0, [pc, #116]	; (8002320 <main+0x510>)
 80022ac:	f7ff f97c 	bl	80015a8 <Quat_ToEuler>

	// Send HID report
	buf.items[0] = gQ_gyroFrame.w;	//w
 80022b0:	4b1b      	ldr	r3, [pc, #108]	; (8002320 <main+0x510>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f507 62cd 	add.w	r2, r7, #1640	; 0x668
 80022b8:	6013      	str	r3, [r2, #0]
	buf.items[1] = gQ_gyroFrame.y;	//x
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <main+0x510>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f207 626c 	addw	r2, r7, #1644	; 0x66c
 80022c2:	6013      	str	r3, [r2, #0]
	buf.items[2] = -gQ_gyroFrame.z;	//y
 80022c4:	4b16      	ldr	r3, [pc, #88]	; (8002320 <main+0x510>)
 80022c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80022ca:	eef1 7a67 	vneg.f32	s15, s15
 80022ce:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 80022d2:	edc3 7a00 	vstr	s15, [r3]
	buf.items[3] = -gQ_gyroFrame.x;	//z
 80022d6:	4b12      	ldr	r3, [pc, #72]	; (8002320 <main+0x510>)
 80022d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80022dc:	eef1 7a67 	vneg.f32	s15, s15
 80022e0:	f207 6374 	addw	r3, r7, #1652	; 0x674
 80022e4:	edc3 7a00 	vstr	s15, [r3]
	buf.items[4] = 0;	//vx
 80022e8:	f04f 0300 	mov.w	r3, #0
 80022ec:	f507 62cf 	add.w	r2, r7, #1656	; 0x678
 80022f0:	6013      	str	r3, [r2, #0]
	buf.items[5] = 0;	//vy
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f207 627c 	addw	r2, r7, #1660	; 0x67c
 80022fa:	6013      	str	r3, [r2, #0]
	buf.items[6] = 0;	//vz
 80022fc:	f04f 0300 	mov.w	r3, #0
 8002300:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8002304:	6013      	str	r3, [r2, #0]

	USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, buf.bytes, sizeof(buf));
 8002306:	f507 63cd 	add.w	r3, r7, #1640	; 0x668
 800230a:	221c      	movs	r2, #28
 800230c:	4619      	mov	r1, r3
 800230e:	4805      	ldr	r0, [pc, #20]	; (8002324 <main+0x514>)
 8002310:	f005 fc56 	bl	8007bc0 <USBD_CUSTOM_HID_SendReport>
  {
 8002314:	e667      	b.n	8001fe6 <main+0x1d6>
 8002316:	bf00      	nop
 8002318:	20000010 	.word	0x20000010
 800231c:	2000001c 	.word	0x2000001c
 8002320:	20000000 	.word	0x20000000
 8002324:	2000039c 	.word	0x2000039c

08002328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b094      	sub	sp, #80	; 0x50
 800232c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800232e:	f107 0320 	add.w	r3, r7, #32
 8002332:	2230      	movs	r2, #48	; 0x30
 8002334:	2100      	movs	r1, #0
 8002336:	4618      	mov	r0, r3
 8002338:	f007 fb24 	bl	8009984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800233c:	f107 030c 	add.w	r3, r7, #12
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	2300      	movs	r3, #0
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	4b2a      	ldr	r3, [pc, #168]	; (80023fc <SystemClock_Config+0xd4>)
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	4a29      	ldr	r2, [pc, #164]	; (80023fc <SystemClock_Config+0xd4>)
 8002356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235a:	6413      	str	r3, [r2, #64]	; 0x40
 800235c:	4b27      	ldr	r3, [pc, #156]	; (80023fc <SystemClock_Config+0xd4>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002368:	2300      	movs	r3, #0
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	4b24      	ldr	r3, [pc, #144]	; (8002400 <SystemClock_Config+0xd8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002374:	4a22      	ldr	r2, [pc, #136]	; (8002400 <SystemClock_Config+0xd8>)
 8002376:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800237a:	6013      	str	r3, [r2, #0]
 800237c:	4b20      	ldr	r3, [pc, #128]	; (8002400 <SystemClock_Config+0xd8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002388:	2303      	movs	r3, #3
 800238a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800238c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002392:	2301      	movs	r3, #1
 8002394:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002396:	2310      	movs	r3, #16
 8002398:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800239a:	2302      	movs	r3, #2
 800239c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80023a4:	2306      	movs	r3, #6
 80023a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80023a8:	2348      	movs	r3, #72	; 0x48
 80023aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80023ac:	2302      	movs	r3, #2
 80023ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80023b0:	2303      	movs	r3, #3
 80023b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023b4:	f107 0320 	add.w	r3, r7, #32
 80023b8:	4618      	mov	r0, r3
 80023ba:	f002 fdf7 	bl	8004fac <HAL_RCC_OscConfig>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80023c4:	f000 f81e 	bl	8002404 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023c8:	230f      	movs	r3, #15
 80023ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80023cc:	2300      	movs	r3, #0
 80023ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80023dc:	f107 030c 	add.w	r3, r7, #12
 80023e0:	2100      	movs	r1, #0
 80023e2:	4618      	mov	r0, r3
 80023e4:	f003 f85a 	bl	800549c <HAL_RCC_ClockConfig>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d001      	beq.n	80023f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80023ee:	f000 f809 	bl	8002404 <Error_Handler>
  }
}
 80023f2:	bf00      	nop
 80023f4:	3750      	adds	r7, #80	; 0x50
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	40023800 	.word	0x40023800
 8002400:	40007000 	.word	0x40007000

08002404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002408:	b672      	cpsid	i
}
 800240a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800240c:	e7fe      	b.n	800240c <Error_Handler+0x8>
	...

08002410 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002414:	4b17      	ldr	r3, [pc, #92]	; (8002474 <MX_SPI1_Init+0x64>)
 8002416:	4a18      	ldr	r2, [pc, #96]	; (8002478 <MX_SPI1_Init+0x68>)
 8002418:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <MX_SPI1_Init+0x64>)
 800241c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002420:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002422:	4b14      	ldr	r3, [pc, #80]	; (8002474 <MX_SPI1_Init+0x64>)
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <MX_SPI1_Init+0x64>)
 800242a:	2200      	movs	r2, #0
 800242c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800242e:	4b11      	ldr	r3, [pc, #68]	; (8002474 <MX_SPI1_Init+0x64>)
 8002430:	2200      	movs	r2, #0
 8002432:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <MX_SPI1_Init+0x64>)
 8002436:	2200      	movs	r2, #0
 8002438:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <MX_SPI1_Init+0x64>)
 800243c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002440:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002442:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <MX_SPI1_Init+0x64>)
 8002444:	2200      	movs	r2, #0
 8002446:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <MX_SPI1_Init+0x64>)
 800244a:	2200      	movs	r2, #0
 800244c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800244e:	4b09      	ldr	r3, [pc, #36]	; (8002474 <MX_SPI1_Init+0x64>)
 8002450:	2200      	movs	r2, #0
 8002452:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <MX_SPI1_Init+0x64>)
 8002456:	2200      	movs	r2, #0
 8002458:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <MX_SPI1_Init+0x64>)
 800245c:	220a      	movs	r2, #10
 800245e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002460:	4804      	ldr	r0, [pc, #16]	; (8002474 <MX_SPI1_Init+0x64>)
 8002462:	f003 f9eb 	bl	800583c <HAL_SPI_Init>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800246c:	f7ff ffca 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}
 8002474:	200002fc 	.word	0x200002fc
 8002478:	40013000 	.word	0x40013000

0800247c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a19      	ldr	r2, [pc, #100]	; (8002500 <HAL_SPI_MspInit+0x84>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d12b      	bne.n	80024f6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <HAL_SPI_MspInit+0x88>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a17      	ldr	r2, [pc, #92]	; (8002504 <HAL_SPI_MspInit+0x88>)
 80024a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_SPI_MspInit+0x88>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b11      	ldr	r3, [pc, #68]	; (8002504 <HAL_SPI_MspInit+0x88>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	4a10      	ldr	r2, [pc, #64]	; (8002504 <HAL_SPI_MspInit+0x88>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	; 0x30
 80024ca:	4b0e      	ldr	r3, [pc, #56]	; (8002504 <HAL_SPI_MspInit+0x88>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80024d6:	23e0      	movs	r3, #224	; 0xe0
 80024d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80024e6:	2305      	movs	r3, #5
 80024e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	; (8002508 <HAL_SPI_MspInit+0x8c>)
 80024f2:	f000 fabd 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	; 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40013000 	.word	0x40013000
 8002504:	40023800 	.word	0x40023800
 8002508:	40020000 	.word	0x40020000

0800250c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_MspInit+0x4c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_MspInit+0x4c>)
 800251c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_MspInit+0x4c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_MspInit+0x4c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_MspInit+0x4c>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_MspInit+0x4c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	40023800 	.word	0x40023800

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <NMI_Handler+0x4>

08002562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <MemManage_Handler+0x4>

0800256e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <UsageFault_Handler+0x4>

0800257a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr

08002596 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002596:	b480      	push	{r7}
 8002598:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a8:	f000 f90c 	bl	80027c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <OTG_FS_IRQHandler+0x10>)
 80025b6:	f001 fcde 	bl	8003f76 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000086c 	.word	0x2000086c

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	; (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 80025ee:	4a12      	ldr	r2, [pc, #72]	; (8002638 <MX_USART1_UART_Init+0x50>)
 80025f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80025f2:	4b10      	ldr	r3, [pc, #64]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 80025f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80025fa:	4b0e      	ldr	r3, [pc, #56]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002600:	4b0c      	ldr	r3, [pc, #48]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002602:	2200      	movs	r2, #0
 8002604:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002608:	2200      	movs	r2, #0
 800260a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800260c:	4b09      	ldr	r3, [pc, #36]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 800260e:	220c      	movs	r2, #12
 8002610:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002614:	2200      	movs	r2, #0
 8002616:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002618:	4b06      	ldr	r3, [pc, #24]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 800261a:	2200      	movs	r2, #0
 800261c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800261e:	4805      	ldr	r0, [pc, #20]	; (8002634 <MX_USART1_UART_Init+0x4c>)
 8002620:	f003 fc02 	bl	8005e28 <HAL_UART_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800262a:	f7ff feeb 	bl	8002404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000354 	.word	0x20000354
 8002638:	40011000 	.word	0x40011000

0800263c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08a      	sub	sp, #40	; 0x28
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	605a      	str	r2, [r3, #4]
 800264e:	609a      	str	r2, [r3, #8]
 8002650:	60da      	str	r2, [r3, #12]
 8002652:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_UART_MspInit+0x84>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d12c      	bne.n	80026b8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <HAL_UART_MspInit+0x88>)
 8002664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002666:	4a17      	ldr	r2, [pc, #92]	; (80026c4 <HAL_UART_MspInit+0x88>)
 8002668:	f043 0310 	orr.w	r3, r3, #16
 800266c:	6453      	str	r3, [r2, #68]	; 0x44
 800266e:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <HAL_UART_MspInit+0x88>)
 8002670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002672:	f003 0310 	and.w	r3, r3, #16
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <HAL_UART_MspInit+0x88>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	4a10      	ldr	r2, [pc, #64]	; (80026c4 <HAL_UART_MspInit+0x88>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6313      	str	r3, [r2, #48]	; 0x30
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <HAL_UART_MspInit+0x88>)
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a0:	2300      	movs	r3, #0
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a8:	2307      	movs	r3, #7
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	4805      	ldr	r0, [pc, #20]	; (80026c8 <HAL_UART_MspInit+0x8c>)
 80026b4:	f000 f9dc 	bl	8002a70 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80026b8:	bf00      	nop
 80026ba:	3728      	adds	r7, #40	; 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40011000 	.word	0x40011000
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40020000 	.word	0x40020000

080026cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002704 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026d0:	480d      	ldr	r0, [pc, #52]	; (8002708 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026d2:	490e      	ldr	r1, [pc, #56]	; (800270c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026d4:	4a0e      	ldr	r2, [pc, #56]	; (8002710 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026d8:	e002      	b.n	80026e0 <LoopCopyDataInit>

080026da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026de:	3304      	adds	r3, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026e4:	d3f9      	bcc.n	80026da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026e6:	4a0b      	ldr	r2, [pc, #44]	; (8002714 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026e8:	4c0b      	ldr	r4, [pc, #44]	; (8002718 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026ec:	e001      	b.n	80026f2 <LoopFillZerobss>

080026ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f0:	3204      	adds	r2, #4

080026f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026f4:	d3fb      	bcc.n	80026ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80026f6:	f7ff ff65 	bl	80025c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fa:	f007 f91f 	bl	800993c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026fe:	f7ff fb87 	bl	8001e10 <main>
  bx  lr    
 8002702:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002704:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800270c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002710:	0800be30 	.word	0x0800be30
  ldr r2, =_sbss
 8002714:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8002718:	20000c74 	.word	0x20000c74

0800271c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC_IRQHandler>
	...

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002724:	4b0e      	ldr	r3, [pc, #56]	; (8002760 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a0d      	ldr	r2, [pc, #52]	; (8002760 <HAL_Init+0x40>)
 800272a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800272e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002730:	4b0b      	ldr	r3, [pc, #44]	; (8002760 <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_Init+0x40>)
 8002736:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800273a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a07      	ldr	r2, [pc, #28]	; (8002760 <HAL_Init+0x40>)
 8002742:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002746:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002748:	2003      	movs	r0, #3
 800274a:	f000 f94f 	bl	80029ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800274e:	2000      	movs	r0, #0
 8002750:	f000 f808 	bl	8002764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002754:	f7ff feda 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	40023c00 	.word	0x40023c00

08002764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800276c:	4b12      	ldr	r3, [pc, #72]	; (80027b8 <HAL_InitTick+0x54>)
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	4b12      	ldr	r3, [pc, #72]	; (80027bc <HAL_InitTick+0x58>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4619      	mov	r1, r3
 8002776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800277a:	fbb3 f3f1 	udiv	r3, r3, r1
 800277e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002782:	4618      	mov	r0, r3
 8002784:	f000 f967 	bl	8002a56 <HAL_SYSTICK_Config>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e00e      	b.n	80027b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b0f      	cmp	r3, #15
 8002796:	d80a      	bhi.n	80027ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002798:	2200      	movs	r2, #0
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	f04f 30ff 	mov.w	r0, #4294967295
 80027a0:	f000 f92f 	bl	8002a02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027a4:	4a06      	ldr	r2, [pc, #24]	; (80027c0 <HAL_InitTick+0x5c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e000      	b.n	80027b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20000028 	.word	0x20000028
 80027bc:	20000030 	.word	0x20000030
 80027c0:	2000002c 	.word	0x2000002c

080027c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <HAL_IncTick+0x20>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	461a      	mov	r2, r3
 80027ce:	4b06      	ldr	r3, [pc, #24]	; (80027e8 <HAL_IncTick+0x24>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	4a04      	ldr	r2, [pc, #16]	; (80027e8 <HAL_IncTick+0x24>)
 80027d6:	6013      	str	r3, [r2, #0]
}
 80027d8:	bf00      	nop
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	20000030 	.word	0x20000030
 80027e8:	20000398 	.word	0x20000398

080027ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return uwTick;
 80027f0:	4b03      	ldr	r3, [pc, #12]	; (8002800 <HAL_GetTick+0x14>)
 80027f2:	681b      	ldr	r3, [r3, #0]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000398 	.word	0x20000398

08002804 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800280c:	f7ff ffee 	bl	80027ec <HAL_GetTick>
 8002810:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281c:	d005      	beq.n	800282a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_Delay+0x44>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	461a      	mov	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4413      	add	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800282a:	bf00      	nop
 800282c:	f7ff ffde 	bl	80027ec <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	429a      	cmp	r2, r3
 800283a:	d8f7      	bhi.n	800282c <HAL_Delay+0x28>
  {
  }
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000030 	.word	0x20000030

0800284c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800285c:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002862:	68ba      	ldr	r2, [r7, #8]
 8002864:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002868:	4013      	ands	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002874:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800287c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800287e:	4a04      	ldr	r2, [pc, #16]	; (8002890 <__NVIC_SetPriorityGrouping+0x44>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	60d3      	str	r3, [r2, #12]
}
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__NVIC_GetPriorityGrouping+0x18>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	0a1b      	lsrs	r3, r3, #8
 800289e:	f003 0307 	and.w	r3, r3, #7
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	db0b      	blt.n	80028da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028c2:	79fb      	ldrb	r3, [r7, #7]
 80028c4:	f003 021f 	and.w	r2, r3, #31
 80028c8:	4907      	ldr	r1, [pc, #28]	; (80028e8 <__NVIC_EnableIRQ+0x38>)
 80028ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ce:	095b      	lsrs	r3, r3, #5
 80028d0:	2001      	movs	r0, #1
 80028d2:	fa00 f202 	lsl.w	r2, r0, r2
 80028d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	e000e100 	.word	0xe000e100

080028ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	4603      	mov	r3, r0
 80028f4:	6039      	str	r1, [r7, #0]
 80028f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	db0a      	blt.n	8002916 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	490c      	ldr	r1, [pc, #48]	; (8002938 <__NVIC_SetPriority+0x4c>)
 8002906:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800290a:	0112      	lsls	r2, r2, #4
 800290c:	b2d2      	uxtb	r2, r2
 800290e:	440b      	add	r3, r1
 8002910:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002914:	e00a      	b.n	800292c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	b2da      	uxtb	r2, r3
 800291a:	4908      	ldr	r1, [pc, #32]	; (800293c <__NVIC_SetPriority+0x50>)
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	3b04      	subs	r3, #4
 8002924:	0112      	lsls	r2, r2, #4
 8002926:	b2d2      	uxtb	r2, r2
 8002928:	440b      	add	r3, r1
 800292a:	761a      	strb	r2, [r3, #24]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000e100 	.word	0xe000e100
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002940:	b480      	push	{r7}
 8002942:	b089      	sub	sp, #36	; 0x24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f1c3 0307 	rsb	r3, r3, #7
 800295a:	2b04      	cmp	r3, #4
 800295c:	bf28      	it	cs
 800295e:	2304      	movcs	r3, #4
 8002960:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3304      	adds	r3, #4
 8002966:	2b06      	cmp	r3, #6
 8002968:	d902      	bls.n	8002970 <NVIC_EncodePriority+0x30>
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3b03      	subs	r3, #3
 800296e:	e000      	b.n	8002972 <NVIC_EncodePriority+0x32>
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002974:	f04f 32ff 	mov.w	r2, #4294967295
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43da      	mvns	r2, r3
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	401a      	ands	r2, r3
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002988:	f04f 31ff 	mov.w	r1, #4294967295
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	fa01 f303 	lsl.w	r3, r1, r3
 8002992:	43d9      	mvns	r1, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002998:	4313      	orrs	r3, r2
         );
}
 800299a:	4618      	mov	r0, r3
 800299c:	3724      	adds	r7, #36	; 0x24
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr
	...

080029a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	d301      	bcc.n	80029be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00f      	b.n	80029de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <SysTick_Config+0x40>)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	3b01      	subs	r3, #1
 80029c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029c6:	210f      	movs	r1, #15
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295
 80029cc:	f7ff ff8e 	bl	80028ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <SysTick_Config+0x40>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029d6:	4b04      	ldr	r3, [pc, #16]	; (80029e8 <SysTick_Config+0x40>)
 80029d8:	2207      	movs	r2, #7
 80029da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	e000e010 	.word	0xe000e010

080029ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b082      	sub	sp, #8
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f7ff ff29 	bl	800284c <__NVIC_SetPriorityGrouping>
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b086      	sub	sp, #24
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	4603      	mov	r3, r0
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a14:	f7ff ff3e 	bl	8002894 <__NVIC_GetPriorityGrouping>
 8002a18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	6978      	ldr	r0, [r7, #20]
 8002a20:	f7ff ff8e 	bl	8002940 <NVIC_EncodePriority>
 8002a24:	4602      	mov	r2, r0
 8002a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a2a:	4611      	mov	r1, r2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff ff5d 	bl	80028ec <__NVIC_SetPriority>
}
 8002a32:	bf00      	nop
 8002a34:	3718      	adds	r7, #24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	4603      	mov	r3, r0
 8002a42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7ff ff31 	bl	80028b0 <__NVIC_EnableIRQ>
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b082      	sub	sp, #8
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7ff ffa2 	bl	80029a8 <SysTick_Config>
 8002a64:	4603      	mov	r3, r0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3708      	adds	r7, #8
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61fb      	str	r3, [r7, #28]
 8002a8a:	e159      	b.n	8002d40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	f040 8148 	bne.w	8002d3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d005      	beq.n	8002ac2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d130      	bne.n	8002b24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	2203      	movs	r2, #3
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af8:	2201      	movs	r2, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 0201 	and.w	r2, r3, #1
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	2b03      	cmp	r3, #3
 8002b2e:	d017      	beq.n	8002b60 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 0303 	and.w	r3, r3, #3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d123      	bne.n	8002bb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	220f      	movs	r2, #15
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0307 	and.w	r3, r3, #7
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	08da      	lsrs	r2, r3, #3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	3208      	adds	r2, #8
 8002bae:	69b9      	ldr	r1, [r7, #24]
 8002bb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f003 0203 	and.w	r2, r3, #3
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	69ba      	ldr	r2, [r7, #24]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80a2 	beq.w	8002d3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	4a56      	ldr	r2, [pc, #344]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c04:	6453      	str	r3, [r2, #68]	; 0x44
 8002c06:	4b54      	ldr	r3, [pc, #336]	; (8002d58 <HAL_GPIO_Init+0x2e8>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c12:	4a52      	ldr	r2, [pc, #328]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	089b      	lsrs	r3, r3, #2
 8002c18:	3302      	adds	r3, #2
 8002c1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f003 0303 	and.w	r3, r3, #3
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	220f      	movs	r2, #15
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4013      	ands	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a49      	ldr	r2, [pc, #292]	; (8002d60 <HAL_GPIO_Init+0x2f0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d019      	beq.n	8002c72 <HAL_GPIO_Init+0x202>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a48      	ldr	r2, [pc, #288]	; (8002d64 <HAL_GPIO_Init+0x2f4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_GPIO_Init+0x1fe>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a47      	ldr	r2, [pc, #284]	; (8002d68 <HAL_GPIO_Init+0x2f8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d00d      	beq.n	8002c6a <HAL_GPIO_Init+0x1fa>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_GPIO_Init+0x2fc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d007      	beq.n	8002c66 <HAL_GPIO_Init+0x1f6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a45      	ldr	r2, [pc, #276]	; (8002d70 <HAL_GPIO_Init+0x300>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d101      	bne.n	8002c62 <HAL_GPIO_Init+0x1f2>
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c62:	2307      	movs	r3, #7
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x204>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x2ec>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c92:	4b38      	ldr	r3, [pc, #224]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cb6:	4a2f      	ldr	r2, [pc, #188]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cbc:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ce0:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce6:	4b23      	ldr	r3, [pc, #140]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d0a:	4a1a      	ldr	r2, [pc, #104]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d10:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d34:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_GPIO_Init+0x304>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f aea2 	bls.w	8002a8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40013c00 	.word	0x40013c00

08002d78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
 8002d84:	4613      	mov	r3, r2
 8002d86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d88:	787b      	ldrb	r3, [r7, #1]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d8e:	887a      	ldrh	r2, [r7, #2]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d94:	e003      	b.n	8002d9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d96:	887b      	ldrh	r3, [r7, #2]
 8002d98:	041a      	lsls	r2, r3, #16
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	619a      	str	r2, [r3, #24]
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e12b      	b.n	8003016 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f7fe fe8a 	bl	8001aec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2224      	movs	r2, #36	; 0x24
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681a      	ldr	r2, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f022 0201 	bic.w	r2, r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dfe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e0e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e10:	f002 fcec 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8002e14:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	4a81      	ldr	r2, [pc, #516]	; (8003020 <HAL_I2C_Init+0x274>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d807      	bhi.n	8002e30 <HAL_I2C_Init+0x84>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4a80      	ldr	r2, [pc, #512]	; (8003024 <HAL_I2C_Init+0x278>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf94      	ite	ls
 8002e28:	2301      	movls	r3, #1
 8002e2a:	2300      	movhi	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	e006      	b.n	8002e3e <HAL_I2C_Init+0x92>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4a7d      	ldr	r2, [pc, #500]	; (8003028 <HAL_I2C_Init+0x27c>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	bf94      	ite	ls
 8002e38:	2301      	movls	r3, #1
 8002e3a:	2300      	movhi	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e0e7      	b.n	8003016 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	4a78      	ldr	r2, [pc, #480]	; (800302c <HAL_I2C_Init+0x280>)
 8002e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4e:	0c9b      	lsrs	r3, r3, #18
 8002e50:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	4a6a      	ldr	r2, [pc, #424]	; (8003020 <HAL_I2C_Init+0x274>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d802      	bhi.n	8002e80 <HAL_I2C_Init+0xd4>
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	e009      	b.n	8002e94 <HAL_I2C_Init+0xe8>
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	4a69      	ldr	r2, [pc, #420]	; (8003030 <HAL_I2C_Init+0x284>)
 8002e8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e90:	099b      	lsrs	r3, r3, #6
 8002e92:	3301      	adds	r3, #1
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6812      	ldr	r2, [r2, #0]
 8002e98:	430b      	orrs	r3, r1
 8002e9a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002ea6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	495c      	ldr	r1, [pc, #368]	; (8003020 <HAL_I2C_Init+0x274>)
 8002eb0:	428b      	cmp	r3, r1
 8002eb2:	d819      	bhi.n	8002ee8 <HAL_I2C_Init+0x13c>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e59      	subs	r1, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec2:	1c59      	adds	r1, r3, #1
 8002ec4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ec8:	400b      	ands	r3, r1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_I2C_Init+0x138>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1e59      	subs	r1, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002edc:	3301      	adds	r3, #1
 8002ede:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ee2:	e051      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	e04f      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d111      	bne.n	8002f14 <HAL_I2C_Init+0x168>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	1e58      	subs	r0, r3, #1
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	440b      	add	r3, r1
 8002efe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f02:	3301      	adds	r3, #1
 8002f04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf0c      	ite	eq
 8002f0c:	2301      	moveq	r3, #1
 8002f0e:	2300      	movne	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	e012      	b.n	8002f3a <HAL_I2C_Init+0x18e>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e58      	subs	r0, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6859      	ldr	r1, [r3, #4]
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	0099      	lsls	r1, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_I2C_Init+0x196>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e022      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10e      	bne.n	8002f68 <HAL_I2C_Init+0x1bc>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1e58      	subs	r0, r3, #1
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6859      	ldr	r1, [r3, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	005b      	lsls	r3, r3, #1
 8002f56:	440b      	add	r3, r1
 8002f58:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f66:	e00f      	b.n	8002f88 <HAL_I2C_Init+0x1dc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	1e58      	subs	r0, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6859      	ldr	r1, [r3, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	0099      	lsls	r1, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f7e:	3301      	adds	r3, #1
 8002f80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	6809      	ldr	r1, [r1, #0]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	69da      	ldr	r2, [r3, #28]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6a1b      	ldr	r3, [r3, #32]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fb6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6911      	ldr	r1, [r2, #16]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	68d2      	ldr	r2, [r2, #12]
 8002fc2:	4311      	orrs	r1, r2
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	6812      	ldr	r2, [r2, #0]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	431a      	orrs	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f042 0201 	orr.w	r2, r2, #1
 8002ff6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2220      	movs	r2, #32
 8003002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3710      	adds	r7, #16
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	000186a0 	.word	0x000186a0
 8003024:	001e847f 	.word	0x001e847f
 8003028:	003d08ff 	.word	0x003d08ff
 800302c:	431bde83 	.word	0x431bde83
 8003030:	10624dd3 	.word	0x10624dd3

08003034 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	461a      	mov	r2, r3
 8003040:	460b      	mov	r3, r1
 8003042:	817b      	strh	r3, [r7, #10]
 8003044:	4613      	mov	r3, r2
 8003046:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7ff fbd0 	bl	80027ec <HAL_GetTick>
 800304c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	f040 80e0 	bne.w	800321c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2319      	movs	r3, #25
 8003062:	2201      	movs	r2, #1
 8003064:	4970      	ldr	r1, [pc, #448]	; (8003228 <HAL_I2C_Master_Transmit+0x1f4>)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fc58 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	e0d3      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_I2C_Master_Transmit+0x50>
 8003080:	2302      	movs	r3, #2
 8003082:	e0cc      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d007      	beq.n	80030aa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2210      	movs	r2, #16
 80030c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	893a      	ldrh	r2, [r7, #8]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	4a50      	ldr	r2, [pc, #320]	; (800322c <HAL_I2C_Master_Transmit+0x1f8>)
 80030ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030ec:	8979      	ldrh	r1, [r7, #10]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	6a3a      	ldr	r2, [r7, #32]
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 fac2 	bl	800367c <I2C_MasterRequestWrite>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e08d      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003102:	2300      	movs	r3, #0
 8003104:	613b      	str	r3, [r7, #16]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003118:	e066      	b.n	80031e8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	6a39      	ldr	r1, [r7, #32]
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fcd2 	bl	8003ac8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d00d      	beq.n	8003146 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	2b04      	cmp	r3, #4
 8003130:	d107      	bne.n	8003142 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003140:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e06b      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	781a      	ldrb	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	3b01      	subs	r3, #1
 8003164:	b29a      	uxth	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316e:	3b01      	subs	r3, #1
 8003170:	b29a      	uxth	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0304 	and.w	r3, r3, #4
 8003180:	2b04      	cmp	r3, #4
 8003182:	d11b      	bne.n	80031bc <HAL_I2C_Master_Transmit+0x188>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	2b00      	cmp	r3, #0
 800318a:	d017      	beq.n	80031bc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	3b01      	subs	r3, #1
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6a39      	ldr	r1, [r7, #32]
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f000 fcc2 	bl	8003b4a <I2C_WaitOnBTFFlagUntilTimeout>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00d      	beq.n	80031e8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d0:	2b04      	cmp	r3, #4
 80031d2:	d107      	bne.n	80031e4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e01a      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d194      	bne.n	800311a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003218:	2300      	movs	r3, #0
 800321a:	e000      	b.n	800321e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800321c:	2302      	movs	r3, #2
  }
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	00100002 	.word	0x00100002
 800322c:	ffff0000 	.word	0xffff0000

08003230 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	; 0x30
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	607a      	str	r2, [r7, #4]
 800323a:	461a      	mov	r2, r3
 800323c:	460b      	mov	r3, r1
 800323e:	817b      	strh	r3, [r7, #10]
 8003240:	4613      	mov	r3, r2
 8003242:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003244:	f7ff fad2 	bl	80027ec <HAL_GetTick>
 8003248:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b20      	cmp	r3, #32
 8003254:	f040 820b 	bne.w	800366e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325a:	9300      	str	r3, [sp, #0]
 800325c:	2319      	movs	r3, #25
 800325e:	2201      	movs	r2, #1
 8003260:	497c      	ldr	r1, [pc, #496]	; (8003454 <HAL_I2C_Master_Receive+0x224>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fb5a 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800326e:	2302      	movs	r3, #2
 8003270:	e1fe      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003278:	2b01      	cmp	r3, #1
 800327a:	d101      	bne.n	8003280 <HAL_I2C_Master_Receive+0x50>
 800327c:	2302      	movs	r3, #2
 800327e:	e1f7      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b01      	cmp	r3, #1
 8003294:	d007      	beq.n	80032a6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2222      	movs	r2, #34	; 0x22
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2210      	movs	r2, #16
 80032c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	893a      	ldrh	r2, [r7, #8]
 80032d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29a      	uxth	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4a5c      	ldr	r2, [pc, #368]	; (8003458 <HAL_I2C_Master_Receive+0x228>)
 80032e6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032e8:	8979      	ldrh	r1, [r7, #10]
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	f000 fa46 	bl	8003780 <I2C_MasterRequestRead>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e1b8      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d113      	bne.n	800332e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003306:	2300      	movs	r3, #0
 8003308:	623b      	str	r3, [r7, #32]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	623b      	str	r3, [r7, #32]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	623b      	str	r3, [r7, #32]
 800331a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	e18c      	b.n	8003648 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	2b01      	cmp	r3, #1
 8003334:	d11b      	bne.n	800336e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003344:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003346:	2300      	movs	r3, #0
 8003348:	61fb      	str	r3, [r7, #28]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
 8003350:	61fb      	str	r3, [r7, #28]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	699b      	ldr	r3, [r3, #24]
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	e16c      	b.n	8003648 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003372:	2b02      	cmp	r3, #2
 8003374:	d11b      	bne.n	80033ae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003384:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003394:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003396:	2300      	movs	r3, #0
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	61bb      	str	r3, [r7, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	e14c      	b.n	8003648 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033be:	2300      	movs	r3, #0
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695b      	ldr	r3, [r3, #20]
 80033c8:	617b      	str	r3, [r7, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80033d4:	e138      	b.n	8003648 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033da:	2b03      	cmp	r3, #3
 80033dc:	f200 80f1 	bhi.w	80035c2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d123      	bne.n	8003430 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033ea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 fbed 	bl	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e139      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800342e:	e10b      	b.n	8003648 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003434:	2b02      	cmp	r3, #2
 8003436:	d14e      	bne.n	80034d6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	2200      	movs	r2, #0
 8003440:	4906      	ldr	r1, [pc, #24]	; (800345c <HAL_I2C_Master_Receive+0x22c>)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 fa6a 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e10e      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
 8003452:	bf00      	nop
 8003454:	00100002 	.word	0x00100002
 8003458:	ffff0000 	.word	0xffff0000
 800345c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800346e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	b2d2      	uxtb	r2, r2
 800347c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29b      	uxth	r3, r3
 800349a:	3b01      	subs	r3, #1
 800349c:	b29a      	uxth	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ac:	b2d2      	uxtb	r2, r2
 80034ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034d4:	e0b8      	b.n	8003648 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034dc:	2200      	movs	r2, #0
 80034de:	4966      	ldr	r1, [pc, #408]	; (8003678 <HAL_I2C_Master_Receive+0x448>)
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 fa1b 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d001      	beq.n	80034f0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e0bf      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	b2d2      	uxtb	r2, r2
 800350c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	1c5a      	adds	r2, r3, #1
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800351c:	3b01      	subs	r3, #1
 800351e:	b29a      	uxth	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003538:	2200      	movs	r2, #0
 800353a:	494f      	ldr	r1, [pc, #316]	; (8003678 <HAL_I2C_Master_Receive+0x448>)
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f000 f9ed 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e091      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800355a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	691a      	ldr	r2, [r3, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356e:	1c5a      	adds	r2, r3, #1
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003584:	b29b      	uxth	r3, r3
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	691a      	ldr	r2, [r3, #16]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035c0:	e042      	b.n	8003648 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 fb00 	bl	8003bcc <I2C_WaitOnRXNEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e04c      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	695b      	ldr	r3, [r3, #20]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b04      	cmp	r3, #4
 8003614:	d118      	bne.n	8003648 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364c:	2b00      	cmp	r3, #0
 800364e:	f47f aec2 	bne.w	80033d6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2220      	movs	r2, #32
 8003656:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800366a:	2300      	movs	r3, #0
 800366c:	e000      	b.n	8003670 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
  }
}
 8003670:	4618      	mov	r0, r3
 8003672:	3728      	adds	r7, #40	; 0x28
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	00010004 	.word	0x00010004

0800367c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	607a      	str	r2, [r7, #4]
 8003686:	603b      	str	r3, [r7, #0]
 8003688:	460b      	mov	r3, r1
 800368a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	2b08      	cmp	r3, #8
 8003696:	d006      	beq.n	80036a6 <I2C_MasterRequestWrite+0x2a>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d003      	beq.n	80036a6 <I2C_MasterRequestWrite+0x2a>
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036a4:	d108      	bne.n	80036b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036b4:	601a      	str	r2, [r3, #0]
 80036b6:	e00b      	b.n	80036d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036bc:	2b12      	cmp	r3, #18
 80036be:	d107      	bne.n	80036d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 f91d 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00d      	beq.n	8003704 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f6:	d103      	bne.n	8003700 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e035      	b.n	8003770 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800370c:	d108      	bne.n	8003720 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800370e:	897b      	ldrh	r3, [r7, #10]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800371c:	611a      	str	r2, [r3, #16]
 800371e:	e01b      	b.n	8003758 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003720:	897b      	ldrh	r3, [r7, #10]
 8003722:	11db      	asrs	r3, r3, #7
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 0306 	and.w	r3, r3, #6
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f063 030f 	orn	r3, r3, #15
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	490e      	ldr	r1, [pc, #56]	; (8003778 <I2C_MasterRequestWrite+0xfc>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f943 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e010      	b.n	8003770 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800374e:	897b      	ldrh	r3, [r7, #10]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4907      	ldr	r1, [pc, #28]	; (800377c <I2C_MasterRequestWrite+0x100>)
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f000 f933 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e000      	b.n	8003770 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	00010008 	.word	0x00010008
 800377c:	00010002 	.word	0x00010002

08003780 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af02      	add	r7, sp, #8
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	603b      	str	r3, [r7, #0]
 800378c:	460b      	mov	r3, r1
 800378e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003794:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d006      	beq.n	80037ba <I2C_MasterRequestRead+0x3a>
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d003      	beq.n	80037ba <I2C_MasterRequestRead+0x3a>
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037b8:	d108      	bne.n	80037cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037c8:	601a      	str	r2, [r3, #0]
 80037ca:	e00b      	b.n	80037e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d0:	2b11      	cmp	r3, #17
 80037d2:	d107      	bne.n	80037e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	9300      	str	r3, [sp, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f893 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00d      	beq.n	8003818 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800380a:	d103      	bne.n	8003814 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e079      	b.n	800390c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003820:	d108      	bne.n	8003834 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003822:	897b      	ldrh	r3, [r7, #10]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	b2da      	uxtb	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	611a      	str	r2, [r3, #16]
 8003832:	e05f      	b.n	80038f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003834:	897b      	ldrh	r3, [r7, #10]
 8003836:	11db      	asrs	r3, r3, #7
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0306 	and.w	r3, r3, #6
 800383e:	b2db      	uxtb	r3, r3
 8003840:	f063 030f 	orn	r3, r3, #15
 8003844:	b2da      	uxtb	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	4930      	ldr	r1, [pc, #192]	; (8003914 <I2C_MasterRequestRead+0x194>)
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 f8b9 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e054      	b.n	800390c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003862:	897b      	ldrh	r3, [r7, #10]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	4929      	ldr	r1, [pc, #164]	; (8003918 <I2C_MasterRequestRead+0x198>)
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f8a9 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e044      	b.n	800390c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	613b      	str	r3, [r7, #16]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f831 	bl	800391c <I2C_WaitOnFlagUntilTimeout>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ce:	d103      	bne.n	80038d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e017      	b.n	800390c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038dc:	897b      	ldrh	r3, [r7, #10]
 80038de:	11db      	asrs	r3, r3, #7
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	f003 0306 	and.w	r3, r3, #6
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	f063 030e 	orn	r3, r3, #14
 80038ec:	b2da      	uxtb	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	4907      	ldr	r1, [pc, #28]	; (8003918 <I2C_MasterRequestRead+0x198>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 f865 	bl	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}
 8003914:	00010008 	.word	0x00010008
 8003918:	00010002 	.word	0x00010002

0800391c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	60f8      	str	r0, [r7, #12]
 8003924:	60b9      	str	r1, [r7, #8]
 8003926:	603b      	str	r3, [r7, #0]
 8003928:	4613      	mov	r3, r2
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800392c:	e025      	b.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003934:	d021      	beq.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003936:	f7fe ff59 	bl	80027ec <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	683a      	ldr	r2, [r7, #0]
 8003942:	429a      	cmp	r2, r3
 8003944:	d302      	bcc.n	800394c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	f043 0220 	orr.w	r2, r3, #32
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e023      	b.n	80039c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	0c1b      	lsrs	r3, r3, #16
 800397e:	b2db      	uxtb	r3, r3
 8003980:	2b01      	cmp	r3, #1
 8003982:	d10d      	bne.n	80039a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	43da      	mvns	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	4013      	ands	r3, r2
 8003990:	b29b      	uxth	r3, r3
 8003992:	2b00      	cmp	r3, #0
 8003994:	bf0c      	ite	eq
 8003996:	2301      	moveq	r3, #1
 8003998:	2300      	movne	r3, #0
 800399a:	b2db      	uxtb	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	e00c      	b.n	80039ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	43da      	mvns	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	79fb      	ldrb	r3, [r7, #7]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d0b6      	beq.n	800392e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d8:	e051      	b.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e8:	d123      	bne.n	8003a32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a02:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2220      	movs	r2, #32
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f043 0204 	orr.w	r2, r3, #4
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e046      	b.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d021      	beq.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a3a:	f7fe fed7 	bl	80027ec <HAL_GetTick>
 8003a3e:	4602      	mov	r2, r0
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d302      	bcc.n	8003a50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d116      	bne.n	8003a7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	f043 0220 	orr.w	r2, r3, #32
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e020      	b.n	8003ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	0c1b      	lsrs	r3, r3, #16
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10c      	bne.n	8003aa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	43da      	mvns	r2, r3
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4013      	ands	r3, r2
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	bf14      	ite	ne
 8003a9a:	2301      	movne	r3, #1
 8003a9c:	2300      	moveq	r3, #0
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e00b      	b.n	8003aba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	43da      	mvns	r2, r3
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4013      	ands	r3, r2
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bf14      	ite	ne
 8003ab4:	2301      	movne	r3, #1
 8003ab6:	2300      	moveq	r3, #0
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d18d      	bne.n	80039da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3710      	adds	r7, #16
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ad4:	e02d      	b.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8ce 	bl	8003c78 <I2C_IsAcknowledgeFailed>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e02d      	b.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d021      	beq.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fe fe7d 	bl	80027ec <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d116      	bne.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2200      	movs	r2, #0
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	f043 0220 	orr.w	r2, r3, #32
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e007      	b.n	8003b42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d1ca      	bne.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3710      	adds	r7, #16
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b084      	sub	sp, #16
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b56:	e02d      	b.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f88d 	bl	8003c78 <I2C_IsAcknowledgeFailed>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e02d      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6e:	d021      	beq.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b70:	f7fe fe3c 	bl	80027ec <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d302      	bcc.n	8003b86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d116      	bne.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e007      	b.n	8003bc4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d1ca      	bne.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd8:	e042      	b.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b10      	cmp	r3, #16
 8003be6:	d119      	bne.n	8003c1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f06f 0210 	mvn.w	r2, #16
 8003bf0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2220      	movs	r2, #32
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e029      	b.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c1c:	f7fe fde6 	bl	80027ec <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	68ba      	ldr	r2, [r7, #8]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d302      	bcc.n	8003c32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d116      	bne.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2200      	movs	r2, #0
 8003c36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	f043 0220 	orr.w	r2, r3, #32
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e007      	b.n	8003c70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	d1b5      	bne.n	8003bda <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c8e:	d11b      	bne.n	8003cc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb4:	f043 0204 	orr.w	r2, r3, #4
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003cd6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cd8:	b08f      	sub	sp, #60	; 0x3c
 8003cda:	af0a      	add	r7, sp, #40	; 0x28
 8003cdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e10f      	b.n	8003f08 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d106      	bne.n	8003d08 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f005 fb1c 	bl	8009340 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2203      	movs	r2, #3
 8003d0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f002 fba9 	bl	800647e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	687e      	ldr	r6, [r7, #4]
 8003d34:	466d      	mov	r5, sp
 8003d36:	f106 0410 	add.w	r4, r6, #16
 8003d3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d46:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d4a:	1d33      	adds	r3, r6, #4
 8003d4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4e:	6838      	ldr	r0, [r7, #0]
 8003d50:	f002 fa80 	bl	8006254 <USB_CoreInit>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d005      	beq.n	8003d66 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e0d0      	b.n	8003f08 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 fb97 	bl	80064a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d72:	2300      	movs	r3, #0
 8003d74:	73fb      	strb	r3, [r7, #15]
 8003d76:	e04a      	b.n	8003e0e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d78:	7bfa      	ldrb	r2, [r7, #15]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	00db      	lsls	r3, r3, #3
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	333d      	adds	r3, #61	; 0x3d
 8003d88:	2201      	movs	r2, #1
 8003d8a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d8c:	7bfa      	ldrb	r2, [r7, #15]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	333c      	adds	r3, #60	; 0x3c
 8003d9c:	7bfa      	ldrb	r2, [r7, #15]
 8003d9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003da0:	7bfa      	ldrb	r2, [r7, #15]
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	b298      	uxth	r0, r3
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	4613      	mov	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	3342      	adds	r3, #66	; 0x42
 8003db4:	4602      	mov	r2, r0
 8003db6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	333f      	adds	r3, #63	; 0x3f
 8003dc8:	2200      	movs	r2, #0
 8003dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	3344      	adds	r3, #68	; 0x44
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3348      	adds	r3, #72	; 0x48
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	3350      	adds	r3, #80	; 0x50
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	3301      	adds	r3, #1
 8003e0c:	73fb      	strb	r3, [r7, #15]
 8003e0e:	7bfa      	ldrb	r2, [r7, #15]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d3af      	bcc.n	8003d78 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	e044      	b.n	8003ea8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e1e:	7bfa      	ldrb	r2, [r7, #15]
 8003e20:	6879      	ldr	r1, [r7, #4]
 8003e22:	4613      	mov	r3, r2
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	1a9b      	subs	r3, r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003e30:	2200      	movs	r2, #0
 8003e32:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e60:	7bfa      	ldrb	r2, [r7, #15]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	00db      	lsls	r3, r3, #3
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e76:	7bfa      	ldrb	r2, [r7, #15]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e8c:	7bfa      	ldrb	r2, [r7, #15]
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	4613      	mov	r3, r2
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	1a9b      	subs	r3, r3, r2
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	440b      	add	r3, r1
 8003e9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
 8003ea8:	7bfa      	ldrb	r2, [r7, #15]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d3b5      	bcc.n	8003e1e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	603b      	str	r3, [r7, #0]
 8003eb8:	687e      	ldr	r6, [r7, #4]
 8003eba:	466d      	mov	r5, sp
 8003ebc:	f106 0410 	add.w	r4, r6, #16
 8003ec0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ec6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ecc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ed0:	1d33      	adds	r3, r6, #4
 8003ed2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ed4:	6838      	ldr	r0, [r7, #0]
 8003ed6:	f002 fb0d 	bl	80064f4 <USB_DevInit>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e00d      	b.n	8003f08 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f003 fb55 	bl	80075b0 <USB_DevDisconnect>

  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3714      	adds	r7, #20
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f10 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_PCD_Start+0x1c>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e020      	b.n	8003f6e <HAL_PCD_Start+0x5e>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d109      	bne.n	8003f50 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d005      	beq.n	8003f50 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f002 fa81 	bl	800645c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f003 fb05 	bl	800756e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003f76:	b590      	push	{r4, r7, lr}
 8003f78:	b08d      	sub	sp, #52	; 0x34
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f003 fbc3 	bl	8007718 <USB_GetMode>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f040 839d 	bne.w	80046d4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f003 fb27 	bl	80075f2 <USB_ReadInterrupts>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 8393 	beq.w	80046d2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 fb1e 	bl	80075f2 <USB_ReadInterrupts>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d107      	bne.n	8003fd0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	695a      	ldr	r2, [r3, #20]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f002 0202 	and.w	r2, r2, #2
 8003fce:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f003 fb0c 	bl	80075f2 <USB_ReadInterrupts>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d161      	bne.n	80040a8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699a      	ldr	r2, [r3, #24]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0210 	bic.w	r2, r2, #16
 8003ff2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	f003 020f 	and.w	r2, r3, #15
 8004000:	4613      	mov	r3, r2
 8004002:	00db      	lsls	r3, r3, #3
 8004004:	1a9b      	subs	r3, r3, r2
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	4413      	add	r3, r2
 8004010:	3304      	adds	r3, #4
 8004012:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	0c5b      	lsrs	r3, r3, #17
 8004018:	f003 030f 	and.w	r3, r3, #15
 800401c:	2b02      	cmp	r3, #2
 800401e:	d124      	bne.n	800406a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004026:	4013      	ands	r3, r2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d035      	beq.n	8004098 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004036:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800403a:	b29b      	uxth	r3, r3
 800403c:	461a      	mov	r2, r3
 800403e:	6a38      	ldr	r0, [r7, #32]
 8004040:	f003 f972 	bl	8007328 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	68da      	ldr	r2, [r3, #12]
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	091b      	lsrs	r3, r3, #4
 800404c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004050:	441a      	add	r2, r3
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	091b      	lsrs	r3, r3, #4
 800405e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004062:	441a      	add	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	619a      	str	r2, [r3, #24]
 8004068:	e016      	b.n	8004098 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	0c5b      	lsrs	r3, r3, #17
 800406e:	f003 030f 	and.w	r3, r3, #15
 8004072:	2b06      	cmp	r3, #6
 8004074:	d110      	bne.n	8004098 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800407c:	2208      	movs	r2, #8
 800407e:	4619      	mov	r1, r3
 8004080:	6a38      	ldr	r0, [r7, #32]
 8004082:	f003 f951 	bl	8007328 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	699a      	ldr	r2, [r3, #24]
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004092:	441a      	add	r2, r3
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0210 	orr.w	r2, r2, #16
 80040a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f003 faa0 	bl	80075f2 <USB_ReadInterrupts>
 80040b2:	4603      	mov	r3, r0
 80040b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040bc:	d16e      	bne.n	800419c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 faa6 	bl	8007618 <USB_ReadDevAllOutEpInterrupt>
 80040cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80040ce:	e062      	b.n	8004196 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80040d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d057      	beq.n	800418a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	4611      	mov	r1, r2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f003 facb 	bl	8007680 <USB_ReadDevOutEPInterrupt>
 80040ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00c      	beq.n	8004110 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	461a      	mov	r2, r3
 8004104:	2301      	movs	r3, #1
 8004106:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004108:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fd98 	bl	8004c40 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00c      	beq.n	8004134 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411c:	015a      	lsls	r2, r3, #5
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	4413      	add	r3, r2
 8004122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004126:	461a      	mov	r2, r3
 8004128:	2308      	movs	r3, #8
 800412a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800412c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fe92 	bl	8004e58 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f003 0310 	and.w	r3, r3, #16
 800413a:	2b00      	cmp	r3, #0
 800413c:	d008      	beq.n	8004150 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800414a:	461a      	mov	r2, r3
 800414c:	2310      	movs	r3, #16
 800414e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004166:	461a      	mov	r2, r3
 8004168:	2320      	movs	r3, #32
 800416a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d009      	beq.n	800418a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	461a      	mov	r2, r3
 8004184:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004188:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	3301      	adds	r3, #1
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	085b      	lsrs	r3, r3, #1
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004198:	2b00      	cmp	r3, #0
 800419a:	d199      	bne.n	80040d0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f003 fa26 	bl	80075f2 <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80041b0:	f040 80c0 	bne.w	8004334 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f003 fa47 	bl	800764c <USB_ReadDevAllInEpInterrupt>
 80041be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80041c4:	e0b2      	b.n	800432c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80041c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	f000 80a7 	beq.w	8004320 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	4611      	mov	r1, r2
 80041dc:	4618      	mov	r0, r3
 80041de:	f003 fa6d 	bl	80076bc <USB_ReadDevInEPInterrupt>
 80041e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d057      	beq.n	800429e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	2201      	movs	r2, #1
 80041f6:	fa02 f303 	lsl.w	r3, r2, r3
 80041fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	43db      	mvns	r3, r3
 8004208:	69f9      	ldr	r1, [r7, #28]
 800420a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800420e:	4013      	ands	r3, r2
 8004210:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421e:	461a      	mov	r2, r3
 8004220:	2301      	movs	r3, #1
 8004222:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d132      	bne.n	8004292 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800422c:	6879      	ldr	r1, [r7, #4]
 800422e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004230:	4613      	mov	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	1a9b      	subs	r3, r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	440b      	add	r3, r1
 800423a:	3348      	adds	r3, #72	; 0x48
 800423c:	6819      	ldr	r1, [r3, #0]
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	4403      	add	r3, r0
 800424c:	3344      	adds	r3, #68	; 0x44
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4419      	add	r1, r3
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004256:	4613      	mov	r3, r2
 8004258:	00db      	lsls	r3, r3, #3
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4403      	add	r3, r0
 8004260:	3348      	adds	r3, #72	; 0x48
 8004262:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d113      	bne.n	8004292 <HAL_PCD_IRQHandler+0x31c>
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800426e:	4613      	mov	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3350      	adds	r3, #80	; 0x50
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d108      	bne.n	8004292 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800428a:	461a      	mov	r2, r3
 800428c:	2101      	movs	r1, #1
 800428e:	f003 fa75 	bl	800777c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	b2db      	uxtb	r3, r3
 8004296:	4619      	mov	r1, r3
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f005 f8d2 	bl	8009442 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042b4:	461a      	mov	r2, r3
 80042b6:	2308      	movs	r3, #8
 80042b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	461a      	mov	r2, r3
 80042d2:	2310      	movs	r3, #16
 80042d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d008      	beq.n	80042f2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	461a      	mov	r2, r3
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d008      	beq.n	800430e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004308:	461a      	mov	r2, r3
 800430a:	2302      	movs	r3, #2
 800430c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004318:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f000 fc03 	bl	8004b26 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	3301      	adds	r3, #1
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	2b00      	cmp	r3, #0
 8004330:	f47f af49 	bne.w	80041c6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f003 f95a 	bl	80075f2 <USB_ReadInterrupts>
 800433e:	4603      	mov	r3, r0
 8004340:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004344:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004348:	d122      	bne.n	8004390 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004364:	2b01      	cmp	r3, #1
 8004366:	d108      	bne.n	800437a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004370:	2100      	movs	r1, #0
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 fe0e 	bl	8004f94 <HAL_PCDEx_LPM_Callback>
 8004378:	e002      	b.n	8004380 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f005 f8ce 	bl	800951c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	695a      	ldr	r2, [r3, #20]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800438e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f003 f92c 	bl	80075f2 <USB_ReadInterrupts>
 800439a:	4603      	mov	r3, r0
 800439c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043a4:	d112      	bne.n	80043cc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d102      	bne.n	80043bc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f005 f88a 	bl	80094d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695a      	ldr	r2, [r3, #20]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80043ca:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f003 f90e 	bl	80075f2 <USB_ReadInterrupts>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e0:	f040 80c7 	bne.w	8004572 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	69fa      	ldr	r2, [r7, #28]
 80043ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043f2:	f023 0301 	bic.w	r3, r3, #1
 80043f6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2110      	movs	r1, #16
 80043fe:	4618      	mov	r0, r3
 8004400:	f002 f9dc 	bl	80067bc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004404:	2300      	movs	r3, #0
 8004406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004408:	e056      	b.n	80044b8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004416:	461a      	mov	r2, r3
 8004418:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800441c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800441e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004438:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800443c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	4413      	add	r3, r2
 8004446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800444e:	0151      	lsls	r1, r2, #5
 8004450:	69fa      	ldr	r2, [r7, #28]
 8004452:	440a      	add	r2, r1
 8004454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004458:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800445c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800445e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446a:	461a      	mov	r2, r3
 800446c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004470:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	4413      	add	r3, r2
 800447a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004482:	0151      	lsls	r1, r2, #5
 8004484:	69fa      	ldr	r2, [r7, #28]
 8004486:	440a      	add	r2, r1
 8004488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800448c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004490:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a2:	0151      	lsls	r1, r2, #5
 80044a4:	69fa      	ldr	r2, [r7, #28]
 80044a6:	440a      	add	r2, r1
 80044a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044b0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80044b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b4:	3301      	adds	r3, #1
 80044b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044be:	429a      	cmp	r2, r3
 80044c0:	d3a3      	bcc.n	800440a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80044d4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d016      	beq.n	800450c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044e8:	69fa      	ldr	r2, [r7, #28]
 80044ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ee:	f043 030b 	orr.w	r3, r3, #11
 80044f2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fe:	69fa      	ldr	r2, [r7, #28]
 8004500:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004504:	f043 030b 	orr.w	r3, r3, #11
 8004508:	6453      	str	r3, [r2, #68]	; 0x44
 800450a:	e015      	b.n	8004538 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800451a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800451e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004522:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004532:	f043 030b 	orr.w	r3, r3, #11
 8004536:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	69fa      	ldr	r2, [r7, #28]
 8004542:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004546:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800454a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6818      	ldr	r0, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800455c:	461a      	mov	r2, r3
 800455e:	f003 f90d 	bl	800777c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004570:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4618      	mov	r0, r3
 8004578:	f003 f83b 	bl	80075f2 <USB_ReadInterrupts>
 800457c:	4603      	mov	r3, r0
 800457e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004582:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004586:	d124      	bne.n	80045d2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f003 f8d1 	bl	8007734 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f002 f971 	bl	800687e <USB_GetDevSpeed>
 800459c:	4603      	mov	r3, r0
 800459e:	461a      	mov	r2, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681c      	ldr	r4, [r3, #0]
 80045a8:	f001 f914 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 80045ac:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	4620      	mov	r0, r4
 80045b8:	f001 feae 	bl	8006318 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f004 ff68 	bl	8009492 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	695a      	ldr	r2, [r3, #20]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80045d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4618      	mov	r0, r3
 80045d8:	f003 f80b 	bl	80075f2 <USB_ReadInterrupts>
 80045dc:	4603      	mov	r3, r0
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	d10a      	bne.n	80045fc <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f004 ff45 	bl	8009476 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	695a      	ldr	r2, [r3, #20]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f002 0208 	and.w	r2, r2, #8
 80045fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f002 fff6 	bl	80075f2 <USB_ReadInterrupts>
 8004606:	4603      	mov	r3, r0
 8004608:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800460c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004610:	d10f      	bne.n	8004632 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004612:	2300      	movs	r3, #0
 8004614:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	b2db      	uxtb	r3, r3
 800461a:	4619      	mov	r1, r3
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f004 ff9d 	bl	800955c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	695a      	ldr	r2, [r3, #20]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f002 ffdb 	bl	80075f2 <USB_ReadInterrupts>
 800463c:	4603      	mov	r3, r0
 800463e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004642:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004646:	d10f      	bne.n	8004668 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004648:	2300      	movs	r3, #0
 800464a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464e:	b2db      	uxtb	r3, r3
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f004 ff70 	bl	8009538 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4618      	mov	r0, r3
 800466e:	f002 ffc0 	bl	80075f2 <USB_ReadInterrupts>
 8004672:	4603      	mov	r3, r0
 8004674:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800467c:	d10a      	bne.n	8004694 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f004 ff7e 	bl	8009580 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f002 ffaa 	bl	80075f2 <USB_ReadInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f003 0304 	and.w	r3, r3, #4
 80046a4:	2b04      	cmp	r3, #4
 80046a6:	d115      	bne.n	80046d4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f004 ff6e 	bl	800959c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	6859      	ldr	r1, [r3, #4]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69ba      	ldr	r2, [r7, #24]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	605a      	str	r2, [r3, #4]
 80046d0:	e000      	b.n	80046d4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80046d2:	bf00      	nop
    }
  }
}
 80046d4:	3734      	adds	r7, #52	; 0x34
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}

080046da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80046da:	b580      	push	{r7, lr}
 80046dc:	b082      	sub	sp, #8
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_PCD_SetAddress+0x1a>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e013      	b.n	800471c <HAL_PCD_SetAddress+0x42>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	78fa      	ldrb	r2, [r7, #3]
 8004700:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f002 ff08 	bl	8007522 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	4608      	mov	r0, r1
 800472e:	4611      	mov	r1, r2
 8004730:	461a      	mov	r2, r3
 8004732:	4603      	mov	r3, r0
 8004734:	70fb      	strb	r3, [r7, #3]
 8004736:	460b      	mov	r3, r1
 8004738:	803b      	strh	r3, [r7, #0]
 800473a:	4613      	mov	r3, r2
 800473c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800473e:	2300      	movs	r3, #0
 8004740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004742:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004746:	2b00      	cmp	r3, #0
 8004748:	da0f      	bge.n	800476a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	f003 020f 	and.w	r2, r3, #15
 8004750:	4613      	mov	r3, r2
 8004752:	00db      	lsls	r3, r3, #3
 8004754:	1a9b      	subs	r3, r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	3338      	adds	r3, #56	; 0x38
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	4413      	add	r3, r2
 800475e:	3304      	adds	r3, #4
 8004760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	705a      	strb	r2, [r3, #1]
 8004768:	e00f      	b.n	800478a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800476a:	78fb      	ldrb	r3, [r7, #3]
 800476c:	f003 020f 	and.w	r2, r3, #15
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	1a9b      	subs	r3, r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	4413      	add	r3, r2
 8004780:	3304      	adds	r3, #4
 8004782:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800478a:	78fb      	ldrb	r3, [r7, #3]
 800478c:	f003 030f 	and.w	r3, r3, #15
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004796:	883a      	ldrh	r2, [r7, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	78ba      	ldrb	r2, [r7, #2]
 80047a0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	785b      	ldrb	r3, [r3, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	b29a      	uxth	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047b4:	78bb      	ldrb	r3, [r7, #2]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d102      	bne.n	80047c0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d101      	bne.n	80047ce <HAL_PCD_EP_Open+0xaa>
 80047ca:	2302      	movs	r3, #2
 80047cc:	e00e      	b.n	80047ec <HAL_PCD_EP_Open+0xc8>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68f9      	ldr	r1, [r7, #12]
 80047dc:	4618      	mov	r0, r3
 80047de:	f002 f873 	bl	80068c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80047ea:	7afb      	ldrb	r3, [r7, #11]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3710      	adds	r7, #16
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004804:	2b00      	cmp	r3, #0
 8004806:	da0f      	bge.n	8004828 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004808:	78fb      	ldrb	r3, [r7, #3]
 800480a:	f003 020f 	and.w	r2, r3, #15
 800480e:	4613      	mov	r3, r2
 8004810:	00db      	lsls	r3, r3, #3
 8004812:	1a9b      	subs	r3, r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	3338      	adds	r3, #56	; 0x38
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	4413      	add	r3, r2
 800481c:	3304      	adds	r3, #4
 800481e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	705a      	strb	r2, [r3, #1]
 8004826:	e00f      	b.n	8004848 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	f003 020f 	and.w	r2, r3, #15
 800482e:	4613      	mov	r3, r2
 8004830:	00db      	lsls	r3, r3, #3
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800483a:	687a      	ldr	r2, [r7, #4]
 800483c:	4413      	add	r3, r2
 800483e:	3304      	adds	r3, #4
 8004840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	b2da      	uxtb	r2, r3
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800485a:	2b01      	cmp	r3, #1
 800485c:	d101      	bne.n	8004862 <HAL_PCD_EP_Close+0x6e>
 800485e:	2302      	movs	r3, #2
 8004860:	e00e      	b.n	8004880 <HAL_PCD_EP_Close+0x8c>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	4618      	mov	r0, r3
 8004872:	f002 f8b1 	bl	80069d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	460b      	mov	r3, r1
 8004896:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004898:	7afb      	ldrb	r3, [r7, #11]
 800489a:	f003 020f 	and.w	r2, r3, #15
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	1a9b      	subs	r3, r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	2200      	movs	r2, #0
 80048c2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	2200      	movs	r2, #0
 80048c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048ca:	7afb      	ldrb	r3, [r7, #11]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d102      	bne.n	80048e4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80048e4:	7afb      	ldrb	r3, [r7, #11]
 80048e6:	f003 030f 	and.w	r3, r3, #15
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d109      	bne.n	8004902 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6818      	ldr	r0, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	6979      	ldr	r1, [r7, #20]
 80048fc:	f002 fb8c 	bl	8007018 <USB_EP0StartXfer>
 8004900:	e008      	b.n	8004914 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6818      	ldr	r0, [r3, #0]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	f002 f93e 	bl	8006b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3718      	adds	r7, #24
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}

0800491e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b086      	sub	sp, #24
 8004922:	af00      	add	r7, sp, #0
 8004924:	60f8      	str	r0, [r7, #12]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
 800492a:	460b      	mov	r3, r1
 800492c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800492e:	7afb      	ldrb	r3, [r7, #11]
 8004930:	f003 020f 	and.w	r2, r3, #15
 8004934:	4613      	mov	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	3338      	adds	r3, #56	; 0x38
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4413      	add	r3, r2
 8004942:	3304      	adds	r3, #4
 8004944:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2200      	movs	r2, #0
 8004956:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2201      	movs	r2, #1
 800495c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800495e:	7afb      	ldrb	r3, [r7, #11]
 8004960:	f003 030f 	and.w	r3, r3, #15
 8004964:	b2da      	uxtb	r2, r3
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d102      	bne.n	8004978 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004978:	7afb      	ldrb	r3, [r7, #11]
 800497a:	f003 030f 	and.w	r3, r3, #15
 800497e:	2b00      	cmp	r3, #0
 8004980:	d109      	bne.n	8004996 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6818      	ldr	r0, [r3, #0]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	b2db      	uxtb	r3, r3
 800498c:	461a      	mov	r2, r3
 800498e:	6979      	ldr	r1, [r7, #20]
 8004990:	f002 fb42 	bl	8007018 <USB_EP0StartXfer>
 8004994:	e008      	b.n	80049a8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6818      	ldr	r0, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	461a      	mov	r2, r3
 80049a2:	6979      	ldr	r1, [r7, #20]
 80049a4:	f002 f8f4 	bl	8006b90 <USB_EPStartXfer>
  }

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3718      	adds	r7, #24
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}

080049b2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049b2:	b580      	push	{r7, lr}
 80049b4:	b084      	sub	sp, #16
 80049b6:	af00      	add	r7, sp, #0
 80049b8:	6078      	str	r0, [r7, #4]
 80049ba:	460b      	mov	r3, r1
 80049bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049be:	78fb      	ldrb	r3, [r7, #3]
 80049c0:	f003 020f 	and.w	r2, r3, #15
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d901      	bls.n	80049d0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e050      	b.n	8004a72 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	da0f      	bge.n	80049f8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	f003 020f 	and.w	r2, r3, #15
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	1a9b      	subs	r3, r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	3338      	adds	r3, #56	; 0x38
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	4413      	add	r3, r2
 80049ec:	3304      	adds	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2201      	movs	r2, #1
 80049f4:	705a      	strb	r2, [r3, #1]
 80049f6:	e00d      	b.n	8004a14 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	1a9b      	subs	r3, r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	4413      	add	r3, r2
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2200      	movs	r2, #0
 8004a12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_EP_SetStall+0x82>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e01e      	b.n	8004a72 <HAL_PCD_EP_SetStall+0xc0>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f002 fc99 	bl	800737a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a48:	78fb      	ldrb	r3, [r7, #3]
 8004a4a:	f003 030f 	and.w	r3, r3, #15
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10a      	bne.n	8004a68 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	b2d9      	uxtb	r1, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a62:	461a      	mov	r2, r3
 8004a64:	f002 fe8a 	bl	800777c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	460b      	mov	r3, r1
 8004a84:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	f003 020f 	and.w	r2, r3, #15
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d901      	bls.n	8004a98 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e042      	b.n	8004b1e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	da0f      	bge.n	8004ac0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 020f 	and.w	r2, r3, #15
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	00db      	lsls	r3, r3, #3
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	3338      	adds	r3, #56	; 0x38
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	3304      	adds	r3, #4
 8004ab6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2201      	movs	r2, #1
 8004abc:	705a      	strb	r2, [r3, #1]
 8004abe:	e00f      	b.n	8004ae0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ac0:	78fb      	ldrb	r3, [r7, #3]
 8004ac2:	f003 020f 	and.w	r2, r3, #15
 8004ac6:	4613      	mov	r3, r2
 8004ac8:	00db      	lsls	r3, r3, #3
 8004aca:	1a9b      	subs	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	4413      	add	r3, r2
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ae6:	78fb      	ldrb	r3, [r7, #3]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_PCD_EP_ClrStall+0x86>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e00e      	b.n	8004b1e <HAL_PCD_EP_ClrStall+0xa4>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68f9      	ldr	r1, [r7, #12]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f002 fca1 	bl	8007456 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b08a      	sub	sp, #40	; 0x28
 8004b2a:	af02      	add	r7, sp, #8
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	00db      	lsls	r3, r3, #3
 8004b40:	1a9b      	subs	r3, r3, r2
 8004b42:	009b      	lsls	r3, r3, #2
 8004b44:	3338      	adds	r3, #56	; 0x38
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	4413      	add	r3, r2
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	699a      	ldr	r2, [r3, #24]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d901      	bls.n	8004b5e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e06c      	b.n	8004c38 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	695a      	ldr	r2, [r3, #20]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d902      	bls.n	8004b7a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	3303      	adds	r3, #3
 8004b7e:	089b      	lsrs	r3, r3, #2
 8004b80:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b82:	e02b      	b.n	8004bdc <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	695a      	ldr	r2, [r3, #20]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d902      	bls.n	8004ba0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	3303      	adds	r3, #3
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	68d9      	ldr	r1, [r3, #12]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	6978      	ldr	r0, [r7, #20]
 8004bc0:	f002 fb7d 	bl	80072be <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	441a      	add	r2, r3
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	699a      	ldr	r2, [r3, #24]
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	441a      	add	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	69ba      	ldr	r2, [r7, #24]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d809      	bhi.n	8004c06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	699a      	ldr	r2, [r3, #24]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d203      	bcs.n	8004c06 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1be      	bne.n	8004b84 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	695a      	ldr	r2, [r3, #20]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d811      	bhi.n	8004c36 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	2201      	movs	r2, #1
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	43db      	mvns	r3, r3
 8004c2c:	6939      	ldr	r1, [r7, #16]
 8004c2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c32:	4013      	ands	r3, r2
 8004c34:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c36:	2300      	movs	r3, #0
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3720      	adds	r7, #32
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	333c      	adds	r3, #60	; 0x3c
 8004c58:	3304      	adds	r3, #4
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	015a      	lsls	r2, r3, #5
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	4413      	add	r3, r2
 8004c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	f040 80a0 	bne.w	8004db8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0308 	and.w	r3, r3, #8
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d015      	beq.n	8004cae <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a72      	ldr	r2, [pc, #456]	; (8004e50 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	f240 80dd 	bls.w	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	f000 80d7 	beq.w	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004caa:	6093      	str	r3, [r2, #8]
 8004cac:	e0cb      	b.n	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d009      	beq.n	8004ccc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2320      	movs	r3, #32
 8004cc8:	6093      	str	r3, [r2, #8]
 8004cca:	e0bc      	b.n	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f040 80b7 	bne.w	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	4a5d      	ldr	r2, [pc, #372]	; (8004e50 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d90f      	bls.n	8004d00 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00a      	beq.n	8004d00 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cfc:	6093      	str	r3, [r2, #8]
 8004cfe:	e0a2      	b.n	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	00db      	lsls	r3, r3, #3
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d12:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	0159      	lsls	r1, r3, #5
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d26:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4403      	add	r3, r0
 8004d36:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d3a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d3c:	6879      	ldr	r1, [r7, #4]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d4e:	6819      	ldr	r1, [r3, #0]
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4403      	add	r3, r0
 8004d5e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4419      	add	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	00db      	lsls	r3, r3, #3
 8004d6e:	1a9b      	subs	r3, r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4403      	add	r3, r0
 8004d74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d78:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d114      	bne.n	8004daa <PCD_EP_OutXfrComplete_int+0x16a>
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	683a      	ldr	r2, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	1a9b      	subs	r3, r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d108      	bne.n	8004daa <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004da2:	461a      	mov	r2, r3
 8004da4:	2101      	movs	r1, #1
 8004da6:	f002 fce9 	bl	800777c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	4619      	mov	r1, r3
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f004 fb2b 	bl	800940c <HAL_PCD_DataOutStageCallback>
 8004db6:	e046      	b.n	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	4a26      	ldr	r2, [pc, #152]	; (8004e54 <PCD_EP_OutXfrComplete_int+0x214>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d124      	bne.n	8004e0a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	015a      	lsls	r2, r3, #5
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ddc:	6093      	str	r3, [r2, #8]
 8004dde:	e032      	b.n	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0320 	and.w	r3, r3, #32
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d008      	beq.n	8004dfc <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	015a      	lsls	r2, r3, #5
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	4413      	add	r3, r2
 8004df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df6:	461a      	mov	r2, r3
 8004df8:	2320      	movs	r3, #32
 8004dfa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	4619      	mov	r1, r3
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f004 fb02 	bl	800940c <HAL_PCD_DataOutStageCallback>
 8004e08:	e01d      	b.n	8004e46 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d114      	bne.n	8004e3a <PCD_EP_OutXfrComplete_int+0x1fa>
 8004e10:	6879      	ldr	r1, [r7, #4]
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	4613      	mov	r3, r2
 8004e16:	00db      	lsls	r3, r3, #3
 8004e18:	1a9b      	subs	r3, r3, r2
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d108      	bne.n	8004e3a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6818      	ldr	r0, [r3, #0]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e32:	461a      	mov	r2, r3
 8004e34:	2100      	movs	r1, #0
 8004e36:	f002 fca1 	bl	800777c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	b2db      	uxtb	r3, r3
 8004e3e:	4619      	mov	r1, r3
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f004 fae3 	bl	800940c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3718      	adds	r7, #24
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	4f54300a 	.word	0x4f54300a
 8004e54:	4f54310a 	.word	0x4f54310a

08004e58 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b086      	sub	sp, #24
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	333c      	adds	r3, #60	; 0x3c
 8004e70:	3304      	adds	r3, #4
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	015a      	lsls	r2, r3, #5
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d90e      	bls.n	8004eac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f004 fa9b 	bl	80093e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d90c      	bls.n	8004ed4 <PCD_EP_OutSetupPacket_int+0x7c>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	691b      	ldr	r3, [r3, #16]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d108      	bne.n	8004ed4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ecc:	461a      	mov	r2, r3
 8004ece:	2101      	movs	r1, #1
 8004ed0:	f002 fc54 	bl	800777c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	4f54300a 	.word	0x4f54300a

08004ee4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	70fb      	strb	r3, [r7, #3]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004efc:	78fb      	ldrb	r3, [r7, #3]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d107      	bne.n	8004f12 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f02:	883b      	ldrh	r3, [r7, #0]
 8004f04:	0419      	lsls	r1, r3, #16
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68ba      	ldr	r2, [r7, #8]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8004f10:	e028      	b.n	8004f64 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f18:	0c1b      	lsrs	r3, r3, #16
 8004f1a:	68ba      	ldr	r2, [r7, #8]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f20:	2300      	movs	r3, #0
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	e00d      	b.n	8004f42 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	3340      	adds	r3, #64	; 0x40
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4413      	add	r3, r2
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	68ba      	ldr	r2, [r7, #8]
 8004f38:	4413      	add	r3, r2
 8004f3a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	7bfa      	ldrb	r2, [r7, #15]
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d3ec      	bcc.n	8004f26 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f4c:	883b      	ldrh	r3, [r7, #0]
 8004f4e:	0418      	lsls	r0, r3, #16
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6819      	ldr	r1, [r3, #0]
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	3b01      	subs	r3, #1
 8004f58:	68ba      	ldr	r2, [r7, #8]
 8004f5a:	4302      	orrs	r2, r0
 8004f5c:	3340      	adds	r3, #64	; 0x40
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	440b      	add	r3, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3714      	adds	r7, #20
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	887a      	ldrh	r2, [r7, #2]
 8004f84:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b083      	sub	sp, #12
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004fa0:	bf00      	nop
 8004fa2:	370c      	adds	r7, #12
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr

08004fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e264      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d075      	beq.n	80050b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fca:	4ba3      	ldr	r3, [pc, #652]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd6:	4ba0      	ldr	r3, [pc, #640]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d112      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe2:	4b9d      	ldr	r3, [pc, #628]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fee:	d10b      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	4b99      	ldr	r3, [pc, #612]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05b      	beq.n	80050b4 <HAL_RCC_OscConfig+0x108>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d157      	bne.n	80050b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e23f      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x74>
 8005012:	4b91      	ldr	r3, [pc, #580]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a90      	ldr	r2, [pc, #576]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x98>
 800502a:	4b8b      	ldr	r3, [pc, #556]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a8a      	ldr	r2, [pc, #552]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b88      	ldr	r3, [pc, #544]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a87      	ldr	r2, [pc, #540]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005044:	4b84      	ldr	r3, [pc, #528]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a83      	ldr	r2, [pc, #524]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b81      	ldr	r3, [pc, #516]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a80      	ldr	r2, [pc, #512]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800505a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7fd fbc2 	bl	80027ec <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506c:	f7fd fbbe 	bl	80027ec <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	; 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e204      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b76      	ldr	r3, [pc, #472]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xc0>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7fd fbae 	bl	80027ec <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005094:	f7fd fbaa 	bl	80027ec <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	; 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1f0      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	4b6c      	ldr	r3, [pc, #432]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0xe8>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d063      	beq.n	800518a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c2:	4b65      	ldr	r3, [pc, #404]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ce:	4b62      	ldr	r3, [pc, #392]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d11c      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050da:	4b5f      	ldr	r3, [pc, #380]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d116      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	4b5c      	ldr	r3, [pc, #368]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e1c4      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fe:	4b56      	ldr	r3, [pc, #344]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4952      	ldr	r1, [pc, #328]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	e03a      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800511c:	4b4f      	ldr	r3, [pc, #316]	; (800525c <HAL_RCC_OscConfig+0x2b0>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7fd fb63 	bl	80027ec <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512a:	f7fd fb5f 	bl	80027ec <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1a5      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	4b46      	ldr	r3, [pc, #280]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b43      	ldr	r3, [pc, #268]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4940      	ldr	r1, [pc, #256]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	4b3f      	ldr	r3, [pc, #252]	; (800525c <HAL_RCC_OscConfig+0x2b0>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7fd fb42 	bl	80027ec <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516c:	f7fd fb3e 	bl	80027ec <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e184      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	4b36      	ldr	r3, [pc, #216]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d030      	beq.n	80051f8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519e:	4b30      	ldr	r3, [pc, #192]	; (8005260 <HAL_RCC_OscConfig+0x2b4>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7fd fb22 	bl	80027ec <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ac:	f7fd fb1e 	bl	80027ec <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e164      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	4b26      	ldr	r3, [pc, #152]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80051c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x200>
 80051ca:	e015      	b.n	80051f8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051cc:	4b24      	ldr	r3, [pc, #144]	; (8005260 <HAL_RCC_OscConfig+0x2b4>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7fd fb0b 	bl	80027ec <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	e008      	b.n	80051ec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051da:	f7fd fb07 	bl	80027ec <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e14d      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051ec:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1f0      	bne.n	80051da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 80a0 	beq.w	8005346 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005206:	2300      	movs	r3, #0
 8005208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520a:	4b13      	ldr	r3, [pc, #76]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800520c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d10f      	bne.n	8005236 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005216:	2300      	movs	r3, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	4a0e      	ldr	r2, [pc, #56]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005224:	6413      	str	r3, [r2, #64]	; 0x40
 8005226:	4b0c      	ldr	r3, [pc, #48]	; (8005258 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522e:	60bb      	str	r3, [r7, #8]
 8005230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005232:	2301      	movs	r3, #1
 8005234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005236:	4b0b      	ldr	r3, [pc, #44]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d121      	bne.n	8005286 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005242:	4b08      	ldr	r3, [pc, #32]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a07      	ldr	r2, [pc, #28]	; (8005264 <HAL_RCC_OscConfig+0x2b8>)
 8005248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800524e:	f7fd facd 	bl	80027ec <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	e011      	b.n	800527a <HAL_RCC_OscConfig+0x2ce>
 8005256:	bf00      	nop
 8005258:	40023800 	.word	0x40023800
 800525c:	42470000 	.word	0x42470000
 8005260:	42470e80 	.word	0x42470e80
 8005264:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005268:	f7fd fac0 	bl	80027ec <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e106      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800527a:	4b85      	ldr	r3, [pc, #532]	; (8005490 <HAL_RCC_OscConfig+0x4e4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d106      	bne.n	800529c <HAL_RCC_OscConfig+0x2f0>
 800528e:	4b81      	ldr	r3, [pc, #516]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005292:	4a80      	ldr	r2, [pc, #512]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005294:	f043 0301 	orr.w	r3, r3, #1
 8005298:	6713      	str	r3, [r2, #112]	; 0x70
 800529a:	e01c      	b.n	80052d6 <HAL_RCC_OscConfig+0x32a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d10c      	bne.n	80052be <HAL_RCC_OscConfig+0x312>
 80052a4:	4b7b      	ldr	r3, [pc, #492]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	4a7a      	ldr	r2, [pc, #488]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052aa:	f043 0304 	orr.w	r3, r3, #4
 80052ae:	6713      	str	r3, [r2, #112]	; 0x70
 80052b0:	4b78      	ldr	r3, [pc, #480]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	4a77      	ldr	r2, [pc, #476]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052b6:	f043 0301 	orr.w	r3, r3, #1
 80052ba:	6713      	str	r3, [r2, #112]	; 0x70
 80052bc:	e00b      	b.n	80052d6 <HAL_RCC_OscConfig+0x32a>
 80052be:	4b75      	ldr	r3, [pc, #468]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c2:	4a74      	ldr	r2, [pc, #464]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052c4:	f023 0301 	bic.w	r3, r3, #1
 80052c8:	6713      	str	r3, [r2, #112]	; 0x70
 80052ca:	4b72      	ldr	r3, [pc, #456]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ce:	4a71      	ldr	r2, [pc, #452]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052d0:	f023 0304 	bic.w	r3, r3, #4
 80052d4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d015      	beq.n	800530a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052de:	f7fd fa85 	bl	80027ec <HAL_GetTick>
 80052e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052e4:	e00a      	b.n	80052fc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e6:	f7fd fa81 	bl	80027ec <HAL_GetTick>
 80052ea:	4602      	mov	r2, r0
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e0c5      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052fc:	4b65      	ldr	r3, [pc, #404]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0ee      	beq.n	80052e6 <HAL_RCC_OscConfig+0x33a>
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800530a:	f7fd fa6f 	bl	80027ec <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005312:	f7fd fa6b 	bl	80027ec <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e0af      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005328:	4b5a      	ldr	r3, [pc, #360]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 800532a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005334:	7dfb      	ldrb	r3, [r7, #23]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d105      	bne.n	8005346 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800533a:	4b56      	ldr	r3, [pc, #344]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	4a55      	ldr	r2, [pc, #340]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005340:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005344:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	699b      	ldr	r3, [r3, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 809b 	beq.w	8005486 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 030c 	and.w	r3, r3, #12
 8005358:	2b08      	cmp	r3, #8
 800535a:	d05c      	beq.n	8005416 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	2b02      	cmp	r3, #2
 8005362:	d141      	bne.n	80053e8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005364:	4b4c      	ldr	r3, [pc, #304]	; (8005498 <HAL_RCC_OscConfig+0x4ec>)
 8005366:	2200      	movs	r2, #0
 8005368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fd fa3f 	bl	80027ec <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005372:	f7fd fa3b 	bl	80027ec <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b02      	cmp	r3, #2
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e081      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005384:	4b43      	ldr	r3, [pc, #268]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1f0      	bne.n	8005372 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	431a      	orrs	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	019b      	lsls	r3, r3, #6
 80053a0:	431a      	orrs	r2, r3
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	085b      	lsrs	r3, r3, #1
 80053a8:	3b01      	subs	r3, #1
 80053aa:	041b      	lsls	r3, r3, #16
 80053ac:	431a      	orrs	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b2:	061b      	lsls	r3, r3, #24
 80053b4:	4937      	ldr	r1, [pc, #220]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ba:	4b37      	ldr	r3, [pc, #220]	; (8005498 <HAL_RCC_OscConfig+0x4ec>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c0:	f7fd fa14 	bl	80027ec <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c6:	e008      	b.n	80053da <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c8:	f7fd fa10 	bl	80027ec <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d901      	bls.n	80053da <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80053d6:	2303      	movs	r3, #3
 80053d8:	e056      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053da:	4b2e      	ldr	r3, [pc, #184]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d0f0      	beq.n	80053c8 <HAL_RCC_OscConfig+0x41c>
 80053e6:	e04e      	b.n	8005486 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCC_OscConfig+0x4ec>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ee:	f7fd f9fd 	bl	80027ec <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f6:	f7fd f9f9 	bl	80027ec <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e03f      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005408:	4b22      	ldr	r3, [pc, #136]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f0      	bne.n	80053f6 <HAL_RCC_OscConfig+0x44a>
 8005414:	e037      	b.n	8005486 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e032      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005422:	4b1c      	ldr	r3, [pc, #112]	; (8005494 <HAL_RCC_OscConfig+0x4e8>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d028      	beq.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d121      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005448:	429a      	cmp	r2, r3
 800544a:	d11a      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005452:	4013      	ands	r3, r2
 8005454:	687a      	ldr	r2, [r7, #4]
 8005456:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005458:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800545a:	4293      	cmp	r3, r2
 800545c:	d111      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	085b      	lsrs	r3, r3, #1
 800546a:	3b01      	subs	r3, #1
 800546c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546e:	429a      	cmp	r2, r3
 8005470:	d107      	bne.n	8005482 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547e:	429a      	cmp	r2, r3
 8005480:	d001      	beq.n	8005486 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	40007000 	.word	0x40007000
 8005494:	40023800 	.word	0x40023800
 8005498:	42470060 	.word	0x42470060

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0cc      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b68      	ldr	r3, [pc, #416]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90c      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b65      	ldr	r3, [pc, #404]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b63      	ldr	r3, [pc, #396]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0b8      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f0:	4b59      	ldr	r3, [pc, #356]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a58      	ldr	r2, [pc, #352]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80054fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005508:	4b53      	ldr	r3, [pc, #332]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a52      	ldr	r2, [pc, #328]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b50      	ldr	r3, [pc, #320]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	494d      	ldr	r1, [pc, #308]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d044      	beq.n	80055bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b47      	ldr	r3, [pc, #284]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d119      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d003      	beq.n	800555a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005556:	2b03      	cmp	r3, #3
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e067      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b37      	ldr	r3, [pc, #220]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4934      	ldr	r1, [pc, #208]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800558c:	f7fd f92e 	bl	80027ec <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fd f92a 	bl	80027ec <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b2b      	ldr	r3, [pc, #172]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055bc:	4b25      	ldr	r3, [pc, #148]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d20c      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b22      	ldr	r3, [pc, #136]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b20      	ldr	r3, [pc, #128]	; (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e032      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b19      	ldr	r3, [pc, #100]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4916      	ldr	r1, [pc, #88]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800560e:	4b12      	ldr	r3, [pc, #72]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490e      	ldr	r1, [pc, #56]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005622:	f000 f821 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005626:	4602      	mov	r2, r0
 8005628:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	490a      	ldr	r1, [pc, #40]	; (800565c <HAL_RCC_ClockConfig+0x1c0>)
 8005634:	5ccb      	ldrb	r3, [r1, r3]
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	4a09      	ldr	r2, [pc, #36]	; (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800563e:	4b09      	ldr	r3, [pc, #36]	; (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7fd f88e 	bl	8002764 <HAL_InitTick>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00
 8005658:	40023800 	.word	0x40023800
 800565c:	0800bbb8 	.word	0x0800bbb8
 8005660:	20000028 	.word	0x20000028
 8005664:	2000002c 	.word	0x2000002c

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	b5b0      	push	{r4, r5, r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800566e:	2100      	movs	r1, #0
 8005670:	6079      	str	r1, [r7, #4]
 8005672:	2100      	movs	r1, #0
 8005674:	60f9      	str	r1, [r7, #12]
 8005676:	2100      	movs	r1, #0
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800567a:	2100      	movs	r1, #0
 800567c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800567e:	4952      	ldr	r1, [pc, #328]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005680:	6889      	ldr	r1, [r1, #8]
 8005682:	f001 010c 	and.w	r1, r1, #12
 8005686:	2908      	cmp	r1, #8
 8005688:	d00d      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x3e>
 800568a:	2908      	cmp	r1, #8
 800568c:	f200 8094 	bhi.w	80057b8 <HAL_RCC_GetSysClockFreq+0x150>
 8005690:	2900      	cmp	r1, #0
 8005692:	d002      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x32>
 8005694:	2904      	cmp	r1, #4
 8005696:	d003      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x38>
 8005698:	e08e      	b.n	80057b8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800569a:	4b4c      	ldr	r3, [pc, #304]	; (80057cc <HAL_RCC_GetSysClockFreq+0x164>)
 800569c:	60bb      	str	r3, [r7, #8]
       break;
 800569e:	e08e      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056a0:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80056a2:	60bb      	str	r3, [r7, #8]
      break;
 80056a4:	e08b      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a6:	4948      	ldr	r1, [pc, #288]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056a8:	6849      	ldr	r1, [r1, #4]
 80056aa:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80056ae:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056b0:	4945      	ldr	r1, [pc, #276]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056b2:	6849      	ldr	r1, [r1, #4]
 80056b4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80056b8:	2900      	cmp	r1, #0
 80056ba:	d024      	beq.n	8005706 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056bc:	4942      	ldr	r1, [pc, #264]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x160>)
 80056be:	6849      	ldr	r1, [r1, #4]
 80056c0:	0989      	lsrs	r1, r1, #6
 80056c2:	4608      	mov	r0, r1
 80056c4:	f04f 0100 	mov.w	r1, #0
 80056c8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80056cc:	f04f 0500 	mov.w	r5, #0
 80056d0:	ea00 0204 	and.w	r2, r0, r4
 80056d4:	ea01 0305 	and.w	r3, r1, r5
 80056d8:	493d      	ldr	r1, [pc, #244]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80056da:	fb01 f003 	mul.w	r0, r1, r3
 80056de:	2100      	movs	r1, #0
 80056e0:	fb01 f102 	mul.w	r1, r1, r2
 80056e4:	1844      	adds	r4, r0, r1
 80056e6:	493a      	ldr	r1, [pc, #232]	; (80057d0 <HAL_RCC_GetSysClockFreq+0x168>)
 80056e8:	fba2 0101 	umull	r0, r1, r2, r1
 80056ec:	1863      	adds	r3, r4, r1
 80056ee:	4619      	mov	r1, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	461a      	mov	r2, r3
 80056f4:	f04f 0300 	mov.w	r3, #0
 80056f8:	f7fb fa52 	bl	8000ba0 <__aeabi_uldivmod>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4613      	mov	r3, r2
 8005702:	60fb      	str	r3, [r7, #12]
 8005704:	e04a      	b.n	800579c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005706:	4b30      	ldr	r3, [pc, #192]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x160>)
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	099b      	lsrs	r3, r3, #6
 800570c:	461a      	mov	r2, r3
 800570e:	f04f 0300 	mov.w	r3, #0
 8005712:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005716:	f04f 0100 	mov.w	r1, #0
 800571a:	ea02 0400 	and.w	r4, r2, r0
 800571e:	ea03 0501 	and.w	r5, r3, r1
 8005722:	4620      	mov	r0, r4
 8005724:	4629      	mov	r1, r5
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	014b      	lsls	r3, r1, #5
 8005730:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005734:	0142      	lsls	r2, r0, #5
 8005736:	4610      	mov	r0, r2
 8005738:	4619      	mov	r1, r3
 800573a:	1b00      	subs	r0, r0, r4
 800573c:	eb61 0105 	sbc.w	r1, r1, r5
 8005740:	f04f 0200 	mov.w	r2, #0
 8005744:	f04f 0300 	mov.w	r3, #0
 8005748:	018b      	lsls	r3, r1, #6
 800574a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800574e:	0182      	lsls	r2, r0, #6
 8005750:	1a12      	subs	r2, r2, r0
 8005752:	eb63 0301 	sbc.w	r3, r3, r1
 8005756:	f04f 0000 	mov.w	r0, #0
 800575a:	f04f 0100 	mov.w	r1, #0
 800575e:	00d9      	lsls	r1, r3, #3
 8005760:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005764:	00d0      	lsls	r0, r2, #3
 8005766:	4602      	mov	r2, r0
 8005768:	460b      	mov	r3, r1
 800576a:	1912      	adds	r2, r2, r4
 800576c:	eb45 0303 	adc.w	r3, r5, r3
 8005770:	f04f 0000 	mov.w	r0, #0
 8005774:	f04f 0100 	mov.w	r1, #0
 8005778:	0299      	lsls	r1, r3, #10
 800577a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800577e:	0290      	lsls	r0, r2, #10
 8005780:	4602      	mov	r2, r0
 8005782:	460b      	mov	r3, r1
 8005784:	4610      	mov	r0, r2
 8005786:	4619      	mov	r1, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	461a      	mov	r2, r3
 800578c:	f04f 0300 	mov.w	r3, #0
 8005790:	f7fb fa06 	bl	8000ba0 <__aeabi_uldivmod>
 8005794:	4602      	mov	r2, r0
 8005796:	460b      	mov	r3, r1
 8005798:	4613      	mov	r3, r2
 800579a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800579c:	4b0a      	ldr	r3, [pc, #40]	; (80057c8 <HAL_RCC_GetSysClockFreq+0x160>)
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	0c1b      	lsrs	r3, r3, #16
 80057a2:	f003 0303 	and.w	r3, r3, #3
 80057a6:	3301      	adds	r3, #1
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b4:	60bb      	str	r3, [r7, #8]
      break;
 80057b6:	e002      	b.n	80057be <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057b8:	4b04      	ldr	r3, [pc, #16]	; (80057cc <HAL_RCC_GetSysClockFreq+0x164>)
 80057ba:	60bb      	str	r3, [r7, #8]
      break;
 80057bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057be:	68bb      	ldr	r3, [r7, #8]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3710      	adds	r7, #16
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bdb0      	pop	{r4, r5, r7, pc}
 80057c8:	40023800 	.word	0x40023800
 80057cc:	00f42400 	.word	0x00f42400
 80057d0:	00b71b00 	.word	0x00b71b00

080057d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057d4:	b480      	push	{r7}
 80057d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057d8:	4b03      	ldr	r3, [pc, #12]	; (80057e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80057da:	681b      	ldr	r3, [r3, #0]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	20000028 	.word	0x20000028

080057ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80057f0:	f7ff fff0 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 80057f4:	4602      	mov	r2, r0
 80057f6:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_RCC_GetPCLK1Freq+0x20>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	0a9b      	lsrs	r3, r3, #10
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	4903      	ldr	r1, [pc, #12]	; (8005810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005802:	5ccb      	ldrb	r3, [r1, r3]
 8005804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40023800 	.word	0x40023800
 8005810:	0800bbc8 	.word	0x0800bbc8

08005814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005818:	f7ff ffdc 	bl	80057d4 <HAL_RCC_GetHCLKFreq>
 800581c:	4602      	mov	r2, r0
 800581e:	4b05      	ldr	r3, [pc, #20]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	0b5b      	lsrs	r3, r3, #13
 8005824:	f003 0307 	and.w	r3, r3, #7
 8005828:	4903      	ldr	r1, [pc, #12]	; (8005838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800582a:	5ccb      	ldrb	r3, [r1, r3]
 800582c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	bd80      	pop	{r7, pc}
 8005834:	40023800 	.word	0x40023800
 8005838:	0800bbc8 	.word	0x0800bbc8

0800583c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b082      	sub	sp, #8
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e07b      	b.n	8005946 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	2b00      	cmp	r3, #0
 8005854:	d108      	bne.n	8005868 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800585e:	d009      	beq.n	8005874 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	61da      	str	r2, [r3, #28]
 8005866:	e005      	b.n	8005874 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7fc fdf4 	bl	800247c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f003 0301 	and.w	r3, r3, #1
 80058da:	431a      	orrs	r2, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058e4:	431a      	orrs	r2, r3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058ee:	431a      	orrs	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a1b      	ldr	r3, [r3, #32]
 80058f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f8:	ea42 0103 	orr.w	r1, r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005900:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	699b      	ldr	r3, [r3, #24]
 8005910:	0c1b      	lsrs	r3, r3, #16
 8005912:	f003 0104 	and.w	r1, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f003 0210 	and.w	r2, r3, #16
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69da      	ldr	r2, [r3, #28]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005934:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b08c      	sub	sp, #48	; 0x30
 8005952:	af00      	add	r7, sp, #0
 8005954:	60f8      	str	r0, [r7, #12]
 8005956:	60b9      	str	r1, [r7, #8]
 8005958:	607a      	str	r2, [r7, #4]
 800595a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800595c:	2301      	movs	r3, #1
 800595e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800596c:	2b01      	cmp	r3, #1
 800596e:	d101      	bne.n	8005974 <HAL_SPI_TransmitReceive+0x26>
 8005970:	2302      	movs	r3, #2
 8005972:	e18a      	b.n	8005c8a <HAL_SPI_TransmitReceive+0x33c>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800597c:	f7fc ff36 	bl	80027ec <HAL_GetTick>
 8005980:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005988:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005992:	887b      	ldrh	r3, [r7, #2]
 8005994:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005996:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800599a:	2b01      	cmp	r3, #1
 800599c:	d00f      	beq.n	80059be <HAL_SPI_TransmitReceive+0x70>
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059a4:	d107      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d103      	bne.n	80059b6 <HAL_SPI_TransmitReceive+0x68>
 80059ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d003      	beq.n	80059be <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80059b6:	2302      	movs	r3, #2
 80059b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059bc:	e15b      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_SPI_TransmitReceive+0x82>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d002      	beq.n	80059d0 <HAL_SPI_TransmitReceive+0x82>
 80059ca:	887b      	ldrh	r3, [r7, #2]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d103      	bne.n	80059d8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80059d6:	e14e      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d003      	beq.n	80059ec <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2205      	movs	r2, #5
 80059e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	887a      	ldrh	r2, [r7, #2]
 80059fc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	887a      	ldrh	r2, [r7, #2]
 8005a02:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	887a      	ldrh	r2, [r7, #2]
 8005a0e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	887a      	ldrh	r2, [r7, #2]
 8005a14:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2c:	2b40      	cmp	r3, #64	; 0x40
 8005a2e:	d007      	beq.n	8005a40 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a48:	d178      	bne.n	8005b3c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_SPI_TransmitReceive+0x10a>
 8005a52:	8b7b      	ldrh	r3, [r7, #26]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d166      	bne.n	8005b26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5c:	881a      	ldrh	r2, [r3, #0]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a68:	1c9a      	adds	r2, r3, #2
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	3b01      	subs	r3, #1
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005a7c:	e053      	b.n	8005b26 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 0302 	and.w	r3, r3, #2
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d11b      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x176>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d016      	beq.n	8005ac4 <HAL_SPI_TransmitReceive+0x176>
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d113      	bne.n	8005ac4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa0:	881a      	ldrh	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	1c9a      	adds	r2, r3, #2
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ab6:	b29b      	uxth	r3, r3
 8005ab8:	3b01      	subs	r3, #1
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d119      	bne.n	8005b06 <HAL_SPI_TransmitReceive+0x1b8>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad6:	b29b      	uxth	r3, r3
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d014      	beq.n	8005b06 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	b292      	uxth	r2, r2
 8005ae8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	1c9a      	adds	r2, r3, #2
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	3b01      	subs	r3, #1
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b02:	2301      	movs	r3, #1
 8005b04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b06:	f7fc fe71 	bl	80027ec <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d807      	bhi.n	8005b26 <HAL_SPI_TransmitReceive+0x1d8>
 8005b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d003      	beq.n	8005b26 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b24:	e0a7      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1a6      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x130>
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1a1      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x130>
 8005b3a:	e07c      	b.n	8005c36 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x1fc>
 8005b44:	8b7b      	ldrh	r3, [r7, #26]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d16b      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	330c      	adds	r3, #12
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b70:	e057      	b.n	8005c22 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d11c      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x26c>
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d017      	beq.n	8005bba <HAL_SPI_TransmitReceive+0x26c>
 8005b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d114      	bne.n	8005bba <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	330c      	adds	r3, #12
 8005b9a:	7812      	ldrb	r2, [r2, #0]
 8005b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29a      	uxth	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d119      	bne.n	8005bfc <HAL_SPI_TransmitReceive+0x2ae>
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d014      	beq.n	8005bfc <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bdc:	b2d2      	uxtb	r2, r2
 8005bde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005bfc:	f7fc fdf6 	bl	80027ec <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d803      	bhi.n	8005c14 <HAL_SPI_TransmitReceive+0x2c6>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c12:	d102      	bne.n	8005c1a <HAL_SPI_TransmitReceive+0x2cc>
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c20:	e029      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1a2      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0x224>
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d19d      	bne.n	8005b72 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c3a:	68f8      	ldr	r0, [r7, #12]
 8005c3c:	f000 f8b2 	bl	8005da4 <SPI_EndRxTxTransaction>
 8005c40:	4603      	mov	r3, r0
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d006      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2220      	movs	r2, #32
 8005c50:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005c52:	e010      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10b      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	617b      	str	r3, [r7, #20]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	617b      	str	r3, [r7, #20]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	617b      	str	r3, [r7, #20]
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	e000      	b.n	8005c76 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005c74:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005c86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3730      	adds	r7, #48	; 0x30
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
	...

08005c94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b088      	sub	sp, #32
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ca4:	f7fc fda2 	bl	80027ec <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	1a9b      	subs	r3, r3, r2
 8005cae:	683a      	ldr	r2, [r7, #0]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cb4:	f7fc fd9a 	bl	80027ec <HAL_GetTick>
 8005cb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cba:	4b39      	ldr	r3, [pc, #228]	; (8005da0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	015b      	lsls	r3, r3, #5
 8005cc0:	0d1b      	lsrs	r3, r3, #20
 8005cc2:	69fa      	ldr	r2, [r7, #28]
 8005cc4:	fb02 f303 	mul.w	r3, r2, r3
 8005cc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cca:	e054      	b.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd2:	d050      	beq.n	8005d76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005cd4:	f7fc fd8a 	bl	80027ec <HAL_GetTick>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	69fa      	ldr	r2, [r7, #28]
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d902      	bls.n	8005cea <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ce4:	69fb      	ldr	r3, [r7, #28]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d13d      	bne.n	8005d66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005cf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d02:	d111      	bne.n	8005d28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d0c:	d004      	beq.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d16:	d107      	bne.n	8005d28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d30:	d10f      	bne.n	8005d52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d40:	601a      	str	r2, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e017      	b.n	8005d96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d101      	bne.n	8005d70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	3b01      	subs	r3, #1
 8005d74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	4013      	ands	r3, r2
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	bf0c      	ite	eq
 8005d86:	2301      	moveq	r3, #1
 8005d88:	2300      	movne	r3, #0
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	461a      	mov	r2, r3
 8005d8e:	79fb      	ldrb	r3, [r7, #7]
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d19b      	bne.n	8005ccc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3720      	adds	r7, #32
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000028 	.word	0x20000028

08005da4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b088      	sub	sp, #32
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005db0:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <SPI_EndRxTxTransaction+0x7c>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1b      	ldr	r2, [pc, #108]	; (8005e24 <SPI_EndRxTxTransaction+0x80>)
 8005db6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dba:	0d5b      	lsrs	r3, r3, #21
 8005dbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dc0:	fb02 f303 	mul.w	r3, r2, r3
 8005dc4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dce:	d112      	bne.n	8005df6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	9300      	str	r3, [sp, #0]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	2180      	movs	r1, #128	; 0x80
 8005dda:	68f8      	ldr	r0, [r7, #12]
 8005ddc:	f7ff ff5a 	bl	8005c94 <SPI_WaitFlagStateUntilTimeout>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d016      	beq.n	8005e14 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005df2:	2303      	movs	r3, #3
 8005df4:	e00f      	b.n	8005e16 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00a      	beq.n	8005e12 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e0c:	2b80      	cmp	r3, #128	; 0x80
 8005e0e:	d0f2      	beq.n	8005df6 <SPI_EndRxTxTransaction+0x52>
 8005e10:	e000      	b.n	8005e14 <SPI_EndRxTxTransaction+0x70>
        break;
 8005e12:	bf00      	nop
  }

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000028 	.word	0x20000028
 8005e24:	165e9f81 	.word	0x165e9f81

08005e28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b082      	sub	sp, #8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d101      	bne.n	8005e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e03f      	b.n	8005eba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f7fc fbf4 	bl	800263c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2224      	movs	r2, #36	; 0x24
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68da      	ldr	r2, [r3, #12]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f829 	bl	8005ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	691a      	ldr	r2, [r3, #16]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	68da      	ldr	r2, [r3, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2220      	movs	r2, #32
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb8:	2300      	movs	r3, #0
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3708      	adds	r7, #8
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec8:	b09f      	sub	sp, #124	; 0x7c
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	691b      	ldr	r3, [r3, #16]
 8005ed4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ed8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eda:	68d9      	ldr	r1, [r3, #12]
 8005edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	ea40 0301 	orr.w	r3, r0, r1
 8005ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	689a      	ldr	r2, [r3, #8]
 8005eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	431a      	orrs	r2, r3
 8005ef0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	431a      	orrs	r2, r3
 8005ef6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef8:	69db      	ldr	r3, [r3, #28]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f08:	f021 010c 	bic.w	r1, r1, #12
 8005f0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f12:	430b      	orrs	r3, r1
 8005f14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695b      	ldr	r3, [r3, #20]
 8005f1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f22:	6999      	ldr	r1, [r3, #24]
 8005f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	ea40 0301 	orr.w	r3, r0, r1
 8005f2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	4bc5      	ldr	r3, [pc, #788]	; (8006248 <UART_SetConfig+0x384>)
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d004      	beq.n	8005f42 <UART_SetConfig+0x7e>
 8005f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	4bc3      	ldr	r3, [pc, #780]	; (800624c <UART_SetConfig+0x388>)
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d103      	bne.n	8005f4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f42:	f7ff fc67 	bl	8005814 <HAL_RCC_GetPCLK2Freq>
 8005f46:	6778      	str	r0, [r7, #116]	; 0x74
 8005f48:	e002      	b.n	8005f50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f4a:	f7ff fc4f 	bl	80057ec <HAL_RCC_GetPCLK1Freq>
 8005f4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f58:	f040 80b6 	bne.w	80060c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f5e:	461c      	mov	r4, r3
 8005f60:	f04f 0500 	mov.w	r5, #0
 8005f64:	4622      	mov	r2, r4
 8005f66:	462b      	mov	r3, r5
 8005f68:	1891      	adds	r1, r2, r2
 8005f6a:	6439      	str	r1, [r7, #64]	; 0x40
 8005f6c:	415b      	adcs	r3, r3
 8005f6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005f70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f74:	1912      	adds	r2, r2, r4
 8005f76:	eb45 0303 	adc.w	r3, r5, r3
 8005f7a:	f04f 0000 	mov.w	r0, #0
 8005f7e:	f04f 0100 	mov.w	r1, #0
 8005f82:	00d9      	lsls	r1, r3, #3
 8005f84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f88:	00d0      	lsls	r0, r2, #3
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	1911      	adds	r1, r2, r4
 8005f90:	6639      	str	r1, [r7, #96]	; 0x60
 8005f92:	416b      	adcs	r3, r5
 8005f94:	667b      	str	r3, [r7, #100]	; 0x64
 8005f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	f04f 0300 	mov.w	r3, #0
 8005fa0:	1891      	adds	r1, r2, r2
 8005fa2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fa4:	415b      	adcs	r3, r3
 8005fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fa8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005fb0:	f7fa fdf6 	bl	8000ba0 <__aeabi_uldivmod>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4ba5      	ldr	r3, [pc, #660]	; (8006250 <UART_SetConfig+0x38c>)
 8005fba:	fba3 2302 	umull	r2, r3, r3, r2
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	011e      	lsls	r6, r3, #4
 8005fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fc4:	461c      	mov	r4, r3
 8005fc6:	f04f 0500 	mov.w	r5, #0
 8005fca:	4622      	mov	r2, r4
 8005fcc:	462b      	mov	r3, r5
 8005fce:	1891      	adds	r1, r2, r2
 8005fd0:	6339      	str	r1, [r7, #48]	; 0x30
 8005fd2:	415b      	adcs	r3, r3
 8005fd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005fda:	1912      	adds	r2, r2, r4
 8005fdc:	eb45 0303 	adc.w	r3, r5, r3
 8005fe0:	f04f 0000 	mov.w	r0, #0
 8005fe4:	f04f 0100 	mov.w	r1, #0
 8005fe8:	00d9      	lsls	r1, r3, #3
 8005fea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fee:	00d0      	lsls	r0, r2, #3
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	1911      	adds	r1, r2, r4
 8005ff6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ff8:	416b      	adcs	r3, r5
 8005ffa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ffc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	461a      	mov	r2, r3
 8006002:	f04f 0300 	mov.w	r3, #0
 8006006:	1891      	adds	r1, r2, r2
 8006008:	62b9      	str	r1, [r7, #40]	; 0x28
 800600a:	415b      	adcs	r3, r3
 800600c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800600e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006012:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006016:	f7fa fdc3 	bl	8000ba0 <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4b8c      	ldr	r3, [pc, #560]	; (8006250 <UART_SetConfig+0x38c>)
 8006020:	fba3 1302 	umull	r1, r3, r3, r2
 8006024:	095b      	lsrs	r3, r3, #5
 8006026:	2164      	movs	r1, #100	; 0x64
 8006028:	fb01 f303 	mul.w	r3, r1, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	3332      	adds	r3, #50	; 0x32
 8006032:	4a87      	ldr	r2, [pc, #540]	; (8006250 <UART_SetConfig+0x38c>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	095b      	lsrs	r3, r3, #5
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006040:	441e      	add	r6, r3
 8006042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006044:	4618      	mov	r0, r3
 8006046:	f04f 0100 	mov.w	r1, #0
 800604a:	4602      	mov	r2, r0
 800604c:	460b      	mov	r3, r1
 800604e:	1894      	adds	r4, r2, r2
 8006050:	623c      	str	r4, [r7, #32]
 8006052:	415b      	adcs	r3, r3
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
 8006056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800605a:	1812      	adds	r2, r2, r0
 800605c:	eb41 0303 	adc.w	r3, r1, r3
 8006060:	f04f 0400 	mov.w	r4, #0
 8006064:	f04f 0500 	mov.w	r5, #0
 8006068:	00dd      	lsls	r5, r3, #3
 800606a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800606e:	00d4      	lsls	r4, r2, #3
 8006070:	4622      	mov	r2, r4
 8006072:	462b      	mov	r3, r5
 8006074:	1814      	adds	r4, r2, r0
 8006076:	653c      	str	r4, [r7, #80]	; 0x50
 8006078:	414b      	adcs	r3, r1
 800607a:	657b      	str	r3, [r7, #84]	; 0x54
 800607c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	461a      	mov	r2, r3
 8006082:	f04f 0300 	mov.w	r3, #0
 8006086:	1891      	adds	r1, r2, r2
 8006088:	61b9      	str	r1, [r7, #24]
 800608a:	415b      	adcs	r3, r3
 800608c:	61fb      	str	r3, [r7, #28]
 800608e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006092:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006096:	f7fa fd83 	bl	8000ba0 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4b6c      	ldr	r3, [pc, #432]	; (8006250 <UART_SetConfig+0x38c>)
 80060a0:	fba3 1302 	umull	r1, r3, r3, r2
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	2164      	movs	r1, #100	; 0x64
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	1ad3      	subs	r3, r2, r3
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	3332      	adds	r3, #50	; 0x32
 80060b2:	4a67      	ldr	r2, [pc, #412]	; (8006250 <UART_SetConfig+0x38c>)
 80060b4:	fba2 2303 	umull	r2, r3, r2, r3
 80060b8:	095b      	lsrs	r3, r3, #5
 80060ba:	f003 0207 	and.w	r2, r3, #7
 80060be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4432      	add	r2, r6
 80060c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80060c6:	e0b9      	b.n	800623c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80060c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060ca:	461c      	mov	r4, r3
 80060cc:	f04f 0500 	mov.w	r5, #0
 80060d0:	4622      	mov	r2, r4
 80060d2:	462b      	mov	r3, r5
 80060d4:	1891      	adds	r1, r2, r2
 80060d6:	6139      	str	r1, [r7, #16]
 80060d8:	415b      	adcs	r3, r3
 80060da:	617b      	str	r3, [r7, #20]
 80060dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80060e0:	1912      	adds	r2, r2, r4
 80060e2:	eb45 0303 	adc.w	r3, r5, r3
 80060e6:	f04f 0000 	mov.w	r0, #0
 80060ea:	f04f 0100 	mov.w	r1, #0
 80060ee:	00d9      	lsls	r1, r3, #3
 80060f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80060f4:	00d0      	lsls	r0, r2, #3
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	eb12 0804 	adds.w	r8, r2, r4
 80060fe:	eb43 0905 	adc.w	r9, r3, r5
 8006102:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	4618      	mov	r0, r3
 8006108:	f04f 0100 	mov.w	r1, #0
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	f04f 0300 	mov.w	r3, #0
 8006114:	008b      	lsls	r3, r1, #2
 8006116:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800611a:	0082      	lsls	r2, r0, #2
 800611c:	4640      	mov	r0, r8
 800611e:	4649      	mov	r1, r9
 8006120:	f7fa fd3e 	bl	8000ba0 <__aeabi_uldivmod>
 8006124:	4602      	mov	r2, r0
 8006126:	460b      	mov	r3, r1
 8006128:	4b49      	ldr	r3, [pc, #292]	; (8006250 <UART_SetConfig+0x38c>)
 800612a:	fba3 2302 	umull	r2, r3, r3, r2
 800612e:	095b      	lsrs	r3, r3, #5
 8006130:	011e      	lsls	r6, r3, #4
 8006132:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006134:	4618      	mov	r0, r3
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	1894      	adds	r4, r2, r2
 8006140:	60bc      	str	r4, [r7, #8]
 8006142:	415b      	adcs	r3, r3
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800614a:	1812      	adds	r2, r2, r0
 800614c:	eb41 0303 	adc.w	r3, r1, r3
 8006150:	f04f 0400 	mov.w	r4, #0
 8006154:	f04f 0500 	mov.w	r5, #0
 8006158:	00dd      	lsls	r5, r3, #3
 800615a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800615e:	00d4      	lsls	r4, r2, #3
 8006160:	4622      	mov	r2, r4
 8006162:	462b      	mov	r3, r5
 8006164:	1814      	adds	r4, r2, r0
 8006166:	64bc      	str	r4, [r7, #72]	; 0x48
 8006168:	414b      	adcs	r3, r1
 800616a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800616c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	4618      	mov	r0, r3
 8006172:	f04f 0100 	mov.w	r1, #0
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	008b      	lsls	r3, r1, #2
 8006180:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006184:	0082      	lsls	r2, r0, #2
 8006186:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800618a:	f7fa fd09 	bl	8000ba0 <__aeabi_uldivmod>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4b2f      	ldr	r3, [pc, #188]	; (8006250 <UART_SetConfig+0x38c>)
 8006194:	fba3 1302 	umull	r1, r3, r3, r2
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	2164      	movs	r1, #100	; 0x64
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	3332      	adds	r3, #50	; 0x32
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <UART_SetConfig+0x38c>)
 80061a8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061b2:	441e      	add	r6, r3
 80061b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b6:	4618      	mov	r0, r3
 80061b8:	f04f 0100 	mov.w	r1, #0
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	1894      	adds	r4, r2, r2
 80061c2:	603c      	str	r4, [r7, #0]
 80061c4:	415b      	adcs	r3, r3
 80061c6:	607b      	str	r3, [r7, #4]
 80061c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061cc:	1812      	adds	r2, r2, r0
 80061ce:	eb41 0303 	adc.w	r3, r1, r3
 80061d2:	f04f 0400 	mov.w	r4, #0
 80061d6:	f04f 0500 	mov.w	r5, #0
 80061da:	00dd      	lsls	r5, r3, #3
 80061dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80061e0:	00d4      	lsls	r4, r2, #3
 80061e2:	4622      	mov	r2, r4
 80061e4:	462b      	mov	r3, r5
 80061e6:	eb12 0a00 	adds.w	sl, r2, r0
 80061ea:	eb43 0b01 	adc.w	fp, r3, r1
 80061ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	4618      	mov	r0, r3
 80061f4:	f04f 0100 	mov.w	r1, #0
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	008b      	lsls	r3, r1, #2
 8006202:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006206:	0082      	lsls	r2, r0, #2
 8006208:	4650      	mov	r0, sl
 800620a:	4659      	mov	r1, fp
 800620c:	f7fa fcc8 	bl	8000ba0 <__aeabi_uldivmod>
 8006210:	4602      	mov	r2, r0
 8006212:	460b      	mov	r3, r1
 8006214:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <UART_SetConfig+0x38c>)
 8006216:	fba3 1302 	umull	r1, r3, r3, r2
 800621a:	095b      	lsrs	r3, r3, #5
 800621c:	2164      	movs	r1, #100	; 0x64
 800621e:	fb01 f303 	mul.w	r3, r1, r3
 8006222:	1ad3      	subs	r3, r2, r3
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	3332      	adds	r3, #50	; 0x32
 8006228:	4a09      	ldr	r2, [pc, #36]	; (8006250 <UART_SetConfig+0x38c>)
 800622a:	fba2 2303 	umull	r2, r3, r2, r3
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	f003 020f 	and.w	r2, r3, #15
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4432      	add	r2, r6
 800623a:	609a      	str	r2, [r3, #8]
}
 800623c:	bf00      	nop
 800623e:	377c      	adds	r7, #124	; 0x7c
 8006240:	46bd      	mov	sp, r7
 8006242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006246:	bf00      	nop
 8006248:	40011000 	.word	0x40011000
 800624c:	40011400 	.word	0x40011400
 8006250:	51eb851f 	.word	0x51eb851f

08006254 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006254:	b084      	sub	sp, #16
 8006256:	b580      	push	{r7, lr}
 8006258:	b084      	sub	sp, #16
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	f107 001c 	add.w	r0, r7, #28
 8006262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b01      	cmp	r3, #1
 800626a:	d122      	bne.n	80062b2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006270:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006280:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006296:	2b01      	cmp	r3, #1
 8006298:	d105      	bne.n	80062a6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 fac6 	bl	8007838 <USB_CoreReset>
 80062ac:	4603      	mov	r3, r0
 80062ae:	73fb      	strb	r3, [r7, #15]
 80062b0:	e01a      	b.n	80062e8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 faba 	bl	8007838 <USB_CoreReset>
 80062c4:	4603      	mov	r3, r0
 80062c6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	639a      	str	r2, [r3, #56]	; 0x38
 80062da:	e005      	b.n	80062e8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80062e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d10b      	bne.n	8006306 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f043 0206 	orr.w	r2, r3, #6
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f043 0220 	orr.w	r2, r3, #32
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006306:	7bfb      	ldrb	r3, [r7, #15]
}
 8006308:	4618      	mov	r0, r3
 800630a:	3710      	adds	r7, #16
 800630c:	46bd      	mov	sp, r7
 800630e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006312:	b004      	add	sp, #16
 8006314:	4770      	bx	lr
	...

08006318 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006318:	b480      	push	{r7}
 800631a:	b087      	sub	sp, #28
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	4613      	mov	r3, r2
 8006324:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d165      	bne.n	80063f8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4a41      	ldr	r2, [pc, #260]	; (8006434 <USB_SetTurnaroundTime+0x11c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d906      	bls.n	8006342 <USB_SetTurnaroundTime+0x2a>
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	4a40      	ldr	r2, [pc, #256]	; (8006438 <USB_SetTurnaroundTime+0x120>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d202      	bcs.n	8006342 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800633c:	230f      	movs	r3, #15
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e062      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	4a3c      	ldr	r2, [pc, #240]	; (8006438 <USB_SetTurnaroundTime+0x120>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d306      	bcc.n	8006358 <USB_SetTurnaroundTime+0x40>
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	4a3b      	ldr	r2, [pc, #236]	; (800643c <USB_SetTurnaroundTime+0x124>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d202      	bcs.n	8006358 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006352:	230e      	movs	r3, #14
 8006354:	617b      	str	r3, [r7, #20]
 8006356:	e057      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	4a38      	ldr	r2, [pc, #224]	; (800643c <USB_SetTurnaroundTime+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d306      	bcc.n	800636e <USB_SetTurnaroundTime+0x56>
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4a37      	ldr	r2, [pc, #220]	; (8006440 <USB_SetTurnaroundTime+0x128>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d202      	bcs.n	800636e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006368:	230d      	movs	r3, #13
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e04c      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	4a33      	ldr	r2, [pc, #204]	; (8006440 <USB_SetTurnaroundTime+0x128>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d306      	bcc.n	8006384 <USB_SetTurnaroundTime+0x6c>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	4a32      	ldr	r2, [pc, #200]	; (8006444 <USB_SetTurnaroundTime+0x12c>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d802      	bhi.n	8006384 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800637e:	230c      	movs	r3, #12
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e041      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4a2f      	ldr	r2, [pc, #188]	; (8006444 <USB_SetTurnaroundTime+0x12c>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d906      	bls.n	800639a <USB_SetTurnaroundTime+0x82>
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4a2e      	ldr	r2, [pc, #184]	; (8006448 <USB_SetTurnaroundTime+0x130>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d802      	bhi.n	800639a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006394:	230b      	movs	r3, #11
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e036      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	4a2a      	ldr	r2, [pc, #168]	; (8006448 <USB_SetTurnaroundTime+0x130>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d906      	bls.n	80063b0 <USB_SetTurnaroundTime+0x98>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	4a29      	ldr	r2, [pc, #164]	; (800644c <USB_SetTurnaroundTime+0x134>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d802      	bhi.n	80063b0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80063aa:	230a      	movs	r3, #10
 80063ac:	617b      	str	r3, [r7, #20]
 80063ae:	e02b      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	4a26      	ldr	r2, [pc, #152]	; (800644c <USB_SetTurnaroundTime+0x134>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d906      	bls.n	80063c6 <USB_SetTurnaroundTime+0xae>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4a25      	ldr	r2, [pc, #148]	; (8006450 <USB_SetTurnaroundTime+0x138>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d202      	bcs.n	80063c6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80063c0:	2309      	movs	r3, #9
 80063c2:	617b      	str	r3, [r7, #20]
 80063c4:	e020      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	4a21      	ldr	r2, [pc, #132]	; (8006450 <USB_SetTurnaroundTime+0x138>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d306      	bcc.n	80063dc <USB_SetTurnaroundTime+0xc4>
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	4a20      	ldr	r2, [pc, #128]	; (8006454 <USB_SetTurnaroundTime+0x13c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d802      	bhi.n	80063dc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80063d6:	2308      	movs	r3, #8
 80063d8:	617b      	str	r3, [r7, #20]
 80063da:	e015      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4a1d      	ldr	r2, [pc, #116]	; (8006454 <USB_SetTurnaroundTime+0x13c>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d906      	bls.n	80063f2 <USB_SetTurnaroundTime+0xda>
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	4a1c      	ldr	r2, [pc, #112]	; (8006458 <USB_SetTurnaroundTime+0x140>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d202      	bcs.n	80063f2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80063ec:	2307      	movs	r3, #7
 80063ee:	617b      	str	r3, [r7, #20]
 80063f0:	e00a      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80063f2:	2306      	movs	r3, #6
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	e007      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d102      	bne.n	8006404 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80063fe:	2309      	movs	r3, #9
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e001      	b.n	8006408 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006404:	2309      	movs	r3, #9
 8006406:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	68db      	ldr	r3, [r3, #12]
 800640c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	029b      	lsls	r3, r3, #10
 800641c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006420:	431a      	orrs	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	371c      	adds	r7, #28
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	00d8acbf 	.word	0x00d8acbf
 8006438:	00e4e1c0 	.word	0x00e4e1c0
 800643c:	00f42400 	.word	0x00f42400
 8006440:	01067380 	.word	0x01067380
 8006444:	011a499f 	.word	0x011a499f
 8006448:	01312cff 	.word	0x01312cff
 800644c:	014ca43f 	.word	0x014ca43f
 8006450:	016e3600 	.word	0x016e3600
 8006454:	01a6ab1f 	.word	0x01a6ab1f
 8006458:	01e84800 	.word	0x01e84800

0800645c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	f043 0201 	orr.w	r2, r3, #1
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800647e:	b480      	push	{r7}
 8006480:	b083      	sub	sp, #12
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f023 0201 	bic.w	r2, r3, #1
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80064b8:	78fb      	ldrb	r3, [r7, #3]
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	d106      	bne.n	80064cc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	60da      	str	r2, [r3, #12]
 80064ca:	e00b      	b.n	80064e4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d106      	bne.n	80064e0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60da      	str	r2, [r3, #12]
 80064de:	e001      	b.n	80064e4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e003      	b.n	80064ec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80064e4:	2032      	movs	r0, #50	; 0x32
 80064e6:	f7fc f98d 	bl	8002804 <HAL_Delay>

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064f4:	b084      	sub	sp, #16
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006502:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800650e:	2300      	movs	r3, #0
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	e009      	b.n	8006528 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	3340      	adds	r3, #64	; 0x40
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	4413      	add	r3, r2
 800651e:	2200      	movs	r2, #0
 8006520:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	3301      	adds	r3, #1
 8006526:	613b      	str	r3, [r7, #16]
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b0e      	cmp	r3, #14
 800652c:	d9f2      	bls.n	8006514 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006530:	2b00      	cmp	r3, #0
 8006532:	d11c      	bne.n	800656e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006558:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	639a      	str	r2, [r3, #56]	; 0x38
 800656c:	e00b      	b.n	8006586 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006572:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800657e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800658c:	461a      	mov	r2, r3
 800658e:	2300      	movs	r3, #0
 8006590:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006598:	4619      	mov	r1, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065a0:	461a      	mov	r2, r3
 80065a2:	680b      	ldr	r3, [r1, #0]
 80065a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d10c      	bne.n	80065c6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d104      	bne.n	80065bc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80065b2:	2100      	movs	r1, #0
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f949 	bl	800684c <USB_SetDevSpeed>
 80065ba:	e008      	b.n	80065ce <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80065bc:	2101      	movs	r1, #1
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 f944 	bl	800684c <USB_SetDevSpeed>
 80065c4:	e003      	b.n	80065ce <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80065c6:	2103      	movs	r1, #3
 80065c8:	6878      	ldr	r0, [r7, #4]
 80065ca:	f000 f93f 	bl	800684c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80065ce:	2110      	movs	r1, #16
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 f8f3 	bl	80067bc <USB_FlushTxFifo>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f911 	bl	8006808 <USB_FlushRxFifo>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d001      	beq.n	80065f0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065f6:	461a      	mov	r2, r3
 80065f8:	2300      	movs	r3, #0
 80065fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006602:	461a      	mov	r2, r3
 8006604:	2300      	movs	r3, #0
 8006606:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660e:	461a      	mov	r2, r3
 8006610:	2300      	movs	r3, #0
 8006612:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006614:	2300      	movs	r3, #0
 8006616:	613b      	str	r3, [r7, #16]
 8006618:	e043      	b.n	80066a2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	015a      	lsls	r2, r3, #5
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	4413      	add	r3, r2
 8006622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800662c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006630:	d118      	bne.n	8006664 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d10a      	bne.n	800664e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	015a      	lsls	r2, r3, #5
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	4413      	add	r3, r2
 8006640:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006644:	461a      	mov	r2, r3
 8006646:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	e013      	b.n	8006676 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	015a      	lsls	r2, r3, #5
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	4413      	add	r3, r2
 8006656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665a:	461a      	mov	r2, r3
 800665c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	e008      	b.n	8006676 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	015a      	lsls	r2, r3, #5
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006670:	461a      	mov	r2, r3
 8006672:	2300      	movs	r3, #0
 8006674:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	015a      	lsls	r2, r3, #5
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	4413      	add	r3, r2
 800667e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006682:	461a      	mov	r2, r3
 8006684:	2300      	movs	r3, #0
 8006686:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	461a      	mov	r2, r3
 8006696:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800669a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	3301      	adds	r3, #1
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d3b7      	bcc.n	800661a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	e043      	b.n	8006738 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	015a      	lsls	r2, r3, #5
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	4413      	add	r3, r2
 80066b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066c6:	d118      	bne.n	80066fa <USB_DevInit+0x206>
    {
      if (i == 0U)
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	015a      	lsls	r2, r3, #5
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	4413      	add	r3, r2
 80066d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066da:	461a      	mov	r2, r3
 80066dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066e0:	6013      	str	r3, [r2, #0]
 80066e2:	e013      	b.n	800670c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f0:	461a      	mov	r2, r3
 80066f2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80066f6:	6013      	str	r3, [r2, #0]
 80066f8:	e008      	b.n	800670c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	015a      	lsls	r2, r3, #5
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	4413      	add	r3, r2
 8006702:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006706:	461a      	mov	r2, r3
 8006708:	2300      	movs	r3, #0
 800670a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006718:	461a      	mov	r2, r3
 800671a:	2300      	movs	r3, #0
 800671c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	4413      	add	r3, r2
 8006726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800672a:	461a      	mov	r2, r3
 800672c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006730:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	3301      	adds	r3, #1
 8006736:	613b      	str	r3, [r7, #16]
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	693a      	ldr	r2, [r7, #16]
 800673c:	429a      	cmp	r2, r3
 800673e:	d3b7      	bcc.n	80066b0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800674e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006752:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2200      	movs	r2, #0
 8006758:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006760:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006764:	2b00      	cmp	r3, #0
 8006766:	d105      	bne.n	8006774 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	f043 0210 	orr.w	r2, r3, #16
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699a      	ldr	r2, [r3, #24]
 8006778:	4b0f      	ldr	r3, [pc, #60]	; (80067b8 <USB_DevInit+0x2c4>)
 800677a:	4313      	orrs	r3, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006782:	2b00      	cmp	r3, #0
 8006784:	d005      	beq.n	8006792 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	f043 0208 	orr.w	r2, r3, #8
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	2b01      	cmp	r3, #1
 8006796:	d107      	bne.n	80067a8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067a0:	f043 0304 	orr.w	r3, r3, #4
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067b4:	b004      	add	sp, #16
 80067b6:	4770      	bx	lr
 80067b8:	803c3800 	.word	0x803c3800

080067bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	019b      	lsls	r3, r3, #6
 80067ce:	f043 0220 	orr.w	r2, r3, #32
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4a09      	ldr	r2, [pc, #36]	; (8006804 <USB_FlushTxFifo+0x48>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d901      	bls.n	80067e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e006      	b.n	80067f6 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	f003 0320 	and.w	r3, r3, #32
 80067f0:	2b20      	cmp	r3, #32
 80067f2:	d0f0      	beq.n	80067d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80067f4:	2300      	movs	r3, #0
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	00030d40 	.word	0x00030d40

08006808 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2210      	movs	r2, #16
 8006818:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3301      	adds	r3, #1
 800681e:	60fb      	str	r3, [r7, #12]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4a09      	ldr	r2, [pc, #36]	; (8006848 <USB_FlushRxFifo+0x40>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d901      	bls.n	800682c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006828:	2303      	movs	r3, #3
 800682a:	e006      	b.n	800683a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0310 	and.w	r3, r3, #16
 8006834:	2b10      	cmp	r3, #16
 8006836:	d0f0      	beq.n	800681a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	00030d40 	.word	0x00030d40

0800684c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	78fb      	ldrb	r3, [r7, #3]
 8006866:	68f9      	ldr	r1, [r7, #12]
 8006868:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800686c:	4313      	orrs	r3, r2
 800686e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3714      	adds	r7, #20
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800687e:	b480      	push	{r7}
 8006880:	b087      	sub	sp, #28
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 0306 	and.w	r3, r3, #6
 8006896:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d102      	bne.n	80068a4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800689e:	2300      	movs	r3, #0
 80068a0:	75fb      	strb	r3, [r7, #23]
 80068a2:	e00a      	b.n	80068ba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d002      	beq.n	80068b0 <USB_GetDevSpeed+0x32>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b06      	cmp	r3, #6
 80068ae:	d102      	bne.n	80068b6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80068b0:	2302      	movs	r3, #2
 80068b2:	75fb      	strb	r3, [r7, #23]
 80068b4:	e001      	b.n	80068ba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80068b6:	230f      	movs	r3, #15
 80068b8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	785b      	ldrb	r3, [r3, #1]
 80068e0:	2b01      	cmp	r3, #1
 80068e2:	d13a      	bne.n	800695a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ea:	69da      	ldr	r2, [r3, #28]
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	2101      	movs	r1, #1
 80068f6:	fa01 f303 	lsl.w	r3, r1, r3
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	68f9      	ldr	r1, [r7, #12]
 80068fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006902:	4313      	orrs	r3, r2
 8006904:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006918:	2b00      	cmp	r3, #0
 800691a:	d155      	bne.n	80069c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	78db      	ldrb	r3, [r3, #3]
 8006936:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006938:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	059b      	lsls	r3, r3, #22
 800693e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006940:	4313      	orrs	r3, r2
 8006942:	68ba      	ldr	r2, [r7, #8]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	440a      	add	r2, r1
 800694a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	e036      	b.n	80069c8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006960:	69da      	ldr	r2, [r3, #28]
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	f003 030f 	and.w	r3, r3, #15
 800696a:	2101      	movs	r1, #1
 800696c:	fa01 f303 	lsl.w	r3, r1, r3
 8006970:	041b      	lsls	r3, r3, #16
 8006972:	68f9      	ldr	r1, [r7, #12]
 8006974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006978:	4313      	orrs	r3, r2
 800697a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	4413      	add	r3, r2
 8006984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800698e:	2b00      	cmp	r3, #0
 8006990:	d11a      	bne.n	80069c8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	015a      	lsls	r2, r3, #5
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	4413      	add	r3, r2
 800699a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	78db      	ldrb	r3, [r3, #3]
 80069ac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80069ae:	430b      	orrs	r3, r1
 80069b0:	4313      	orrs	r3, r2
 80069b2:	68ba      	ldr	r2, [r7, #8]
 80069b4:	0151      	lsls	r1, r2, #5
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	440a      	add	r2, r1
 80069ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069c6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3714      	adds	r7, #20
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
	...

080069d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	785b      	ldrb	r3, [r3, #1]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d161      	bne.n	8006ab8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	015a      	lsls	r2, r3, #5
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	4413      	add	r3, r2
 80069fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a0a:	d11f      	bne.n	8006a4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	68ba      	ldr	r2, [r7, #8]
 8006a1c:	0151      	lsls	r1, r2, #5
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	440a      	add	r2, r1
 8006a22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006a2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	015a      	lsls	r2, r3, #5
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	4413      	add	r3, r2
 8006a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	0151      	lsls	r1, r2, #5
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	440a      	add	r2, r1
 8006a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	43db      	mvns	r3, r3
 8006a66:	68f9      	ldr	r1, [r7, #12]
 8006a68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a76:	69da      	ldr	r2, [r3, #28]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	2101      	movs	r1, #1
 8006a82:	fa01 f303 	lsl.w	r3, r1, r3
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	43db      	mvns	r3, r3
 8006a8a:	68f9      	ldr	r1, [r7, #12]
 8006a8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006a90:	4013      	ands	r3, r2
 8006a92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	015a      	lsls	r2, r3, #5
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	0159      	lsls	r1, r3, #5
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	440b      	add	r3, r1
 8006aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aae:	4619      	mov	r1, r3
 8006ab0:	4b35      	ldr	r3, [pc, #212]	; (8006b88 <USB_DeactivateEndpoint+0x1b0>)
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	600b      	str	r3, [r1, #0]
 8006ab6:	e060      	b.n	8006b7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	015a      	lsls	r2, r3, #5
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	4413      	add	r3, r2
 8006ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ace:	d11f      	bne.n	8006b10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68ba      	ldr	r2, [r7, #8]
 8006ae0:	0151      	lsls	r1, r2, #5
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	440a      	add	r2, r1
 8006ae6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006aea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006aee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b0a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	f003 030f 	and.w	r3, r3, #15
 8006b20:	2101      	movs	r1, #1
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	041b      	lsls	r3, r3, #16
 8006b28:	43db      	mvns	r3, r3
 8006b2a:	68f9      	ldr	r1, [r7, #12]
 8006b2c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b30:	4013      	ands	r3, r2
 8006b32:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3a:	69da      	ldr	r2, [r3, #28]
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	2101      	movs	r1, #1
 8006b46:	fa01 f303 	lsl.w	r3, r1, r3
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	43db      	mvns	r3, r3
 8006b4e:	68f9      	ldr	r1, [r7, #12]
 8006b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b54:	4013      	ands	r3, r2
 8006b56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	015a      	lsls	r2, r3, #5
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	0159      	lsls	r1, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	440b      	add	r3, r1
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	4619      	mov	r1, r3
 8006b74:	4b05      	ldr	r3, [pc, #20]	; (8006b8c <USB_DeactivateEndpoint+0x1b4>)
 8006b76:	4013      	ands	r3, r2
 8006b78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	ec337800 	.word	0xec337800
 8006b8c:	eff37800 	.word	0xeff37800

08006b90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	4613      	mov	r3, r2
 8006b9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	785b      	ldrb	r3, [r3, #1]
 8006bac:	2b01      	cmp	r3, #1
 8006bae:	f040 815c 	bne.w	8006e6a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d132      	bne.n	8006c20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	015a      	lsls	r2, r3, #5
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	0151      	lsls	r1, r2, #5
 8006bcc:	69fa      	ldr	r2, [r7, #28]
 8006bce:	440a      	add	r2, r1
 8006bd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bd8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bdc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	69fb      	ldr	r3, [r7, #28]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	0151      	lsls	r1, r2, #5
 8006bf0:	69fa      	ldr	r2, [r7, #28]
 8006bf2:	440a      	add	r2, r1
 8006bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bfc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006bfe:	69bb      	ldr	r3, [r7, #24]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	691b      	ldr	r3, [r3, #16]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	0151      	lsls	r1, r2, #5
 8006c10:	69fa      	ldr	r2, [r7, #28]
 8006c12:	440a      	add	r2, r1
 8006c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c18:	0cdb      	lsrs	r3, r3, #19
 8006c1a:	04db      	lsls	r3, r3, #19
 8006c1c:	6113      	str	r3, [r2, #16]
 8006c1e:	e074      	b.n	8006d0a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	015a      	lsls	r2, r3, #5
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	4413      	add	r3, r2
 8006c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	0151      	lsls	r1, r2, #5
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	440a      	add	r2, r1
 8006c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c3a:	0cdb      	lsrs	r3, r3, #19
 8006c3c:	04db      	lsls	r3, r3, #19
 8006c3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006c40:	69bb      	ldr	r3, [r7, #24]
 8006c42:	015a      	lsls	r2, r3, #5
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	4413      	add	r3, r2
 8006c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4c:	691b      	ldr	r3, [r3, #16]
 8006c4e:	69ba      	ldr	r2, [r7, #24]
 8006c50:	0151      	lsls	r1, r2, #5
 8006c52:	69fa      	ldr	r2, [r7, #28]
 8006c54:	440a      	add	r2, r1
 8006c56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c5a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c5e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	015a      	lsls	r2, r3, #5
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	4413      	add	r3, r2
 8006c6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c70:	691a      	ldr	r2, [r3, #16]
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	6959      	ldr	r1, [r3, #20]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	440b      	add	r3, r1
 8006c7c:	1e59      	subs	r1, r3, #1
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006c86:	04d9      	lsls	r1, r3, #19
 8006c88:	4b9d      	ldr	r3, [pc, #628]	; (8006f00 <USB_EPStartXfer+0x370>)
 8006c8a:	400b      	ands	r3, r1
 8006c8c:	69b9      	ldr	r1, [r7, #24]
 8006c8e:	0148      	lsls	r0, r1, #5
 8006c90:	69f9      	ldr	r1, [r7, #28]
 8006c92:	4401      	add	r1, r0
 8006c94:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	015a      	lsls	r2, r3, #5
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ca8:	691a      	ldr	r2, [r3, #16]
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	695b      	ldr	r3, [r3, #20]
 8006cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cb2:	69b9      	ldr	r1, [r7, #24]
 8006cb4:	0148      	lsls	r0, r1, #5
 8006cb6:	69f9      	ldr	r1, [r7, #28]
 8006cb8:	4401      	add	r1, r0
 8006cba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	78db      	ldrb	r3, [r3, #3]
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d11f      	bne.n	8006d0a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	015a      	lsls	r2, r3, #5
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cd6:	691b      	ldr	r3, [r3, #16]
 8006cd8:	69ba      	ldr	r2, [r7, #24]
 8006cda:	0151      	lsls	r1, r2, #5
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	440a      	add	r2, r1
 8006ce0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ce4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006ce8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	0151      	lsls	r1, r2, #5
 8006cfc:	69fa      	ldr	r2, [r7, #28]
 8006cfe:	440a      	add	r2, r1
 8006d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d04:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d08:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d14b      	bne.n	8006da8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	461a      	mov	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	78db      	ldrb	r3, [r3, #3]
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d128      	bne.n	8006d86 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d110      	bne.n	8006d66 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	015a      	lsls	r2, r3, #5
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	69ba      	ldr	r2, [r7, #24]
 8006d54:	0151      	lsls	r1, r2, #5
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	440a      	add	r2, r1
 8006d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	e00f      	b.n	8006d86 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	0151      	lsls	r1, r2, #5
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	440a      	add	r2, r1
 8006d7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d84:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006da4:	6013      	str	r3, [r2, #0]
 8006da6:	e12f      	b.n	8007008 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006dc2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006dc6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	78db      	ldrb	r3, [r3, #3]
 8006dcc:	2b01      	cmp	r3, #1
 8006dce:	d015      	beq.n	8006dfc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	695b      	ldr	r3, [r3, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f000 8117 	beq.w	8007008 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f003 030f 	and.w	r3, r3, #15
 8006dea:	2101      	movs	r1, #1
 8006dec:	fa01 f303 	lsl.w	r3, r1, r3
 8006df0:	69f9      	ldr	r1, [r7, #28]
 8006df2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df6:	4313      	orrs	r3, r2
 8006df8:	634b      	str	r3, [r1, #52]	; 0x34
 8006dfa:	e105      	b.n	8007008 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d110      	bne.n	8006e2e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	015a      	lsls	r2, r3, #5
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	4413      	add	r3, r2
 8006e14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69ba      	ldr	r2, [r7, #24]
 8006e1c:	0151      	lsls	r1, r2, #5
 8006e1e:	69fa      	ldr	r2, [r7, #28]
 8006e20:	440a      	add	r2, r1
 8006e22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	e00f      	b.n	8006e4e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	0151      	lsls	r1, r2, #5
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	440a      	add	r2, r1
 8006e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e4c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	68d9      	ldr	r1, [r3, #12]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	781a      	ldrb	r2, [r3, #0]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	b298      	uxth	r0, r3
 8006e5c:	79fb      	ldrb	r3, [r7, #7]
 8006e5e:	9300      	str	r3, [sp, #0]
 8006e60:	4603      	mov	r3, r0
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 fa2b 	bl	80072be <USB_WritePacket>
 8006e68:	e0ce      	b.n	8007008 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	015a      	lsls	r2, r3, #5
 8006e6e:	69fb      	ldr	r3, [r7, #28]
 8006e70:	4413      	add	r3, r2
 8006e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	69ba      	ldr	r2, [r7, #24]
 8006e7a:	0151      	lsls	r1, r2, #5
 8006e7c:	69fa      	ldr	r2, [r7, #28]
 8006e7e:	440a      	add	r2, r1
 8006e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e84:	0cdb      	lsrs	r3, r3, #19
 8006e86:	04db      	lsls	r3, r3, #19
 8006e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006e8a:	69bb      	ldr	r3, [r7, #24]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ea4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006ea8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006eac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d126      	bne.n	8006f04 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	015a      	lsls	r2, r3, #5
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec2:	691a      	ldr	r2, [r3, #16]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ecc:	69b9      	ldr	r1, [r7, #24]
 8006ece:	0148      	lsls	r0, r1, #5
 8006ed0:	69f9      	ldr	r1, [r7, #28]
 8006ed2:	4401      	add	r1, r0
 8006ed4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	69ba      	ldr	r2, [r7, #24]
 8006eec:	0151      	lsls	r1, r2, #5
 8006eee:	69fa      	ldr	r2, [r7, #28]
 8006ef0:	440a      	add	r2, r1
 8006ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ef6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006efa:	6113      	str	r3, [r2, #16]
 8006efc:	e036      	b.n	8006f6c <USB_EPStartXfer+0x3dc>
 8006efe:	bf00      	nop
 8006f00:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	695a      	ldr	r2, [r3, #20]
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	1e5a      	subs	r2, r3, #1
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f26:	691a      	ldr	r2, [r3, #16]
 8006f28:	8afb      	ldrh	r3, [r7, #22]
 8006f2a:	04d9      	lsls	r1, r3, #19
 8006f2c:	4b39      	ldr	r3, [pc, #228]	; (8007014 <USB_EPStartXfer+0x484>)
 8006f2e:	400b      	ands	r3, r1
 8006f30:	69b9      	ldr	r1, [r7, #24]
 8006f32:	0148      	lsls	r0, r1, #5
 8006f34:	69f9      	ldr	r1, [r7, #28]
 8006f36:	4401      	add	r1, r0
 8006f38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	691a      	ldr	r2, [r3, #16]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	8af9      	ldrh	r1, [r7, #22]
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5c:	69b9      	ldr	r1, [r7, #24]
 8006f5e:	0148      	lsls	r0, r1, #5
 8006f60:	69f9      	ldr	r1, [r7, #28]
 8006f62:	4401      	add	r1, r0
 8006f64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d10d      	bne.n	8006f8e <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d009      	beq.n	8006f8e <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	68d9      	ldr	r1, [r3, #12]
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	78db      	ldrb	r3, [r3, #3]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d128      	bne.n	8006fe8 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006f96:	69fb      	ldr	r3, [r7, #28]
 8006f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d110      	bne.n	8006fc8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	015a      	lsls	r2, r3, #5
 8006faa:	69fb      	ldr	r3, [r7, #28]
 8006fac:	4413      	add	r3, r2
 8006fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	0151      	lsls	r1, r2, #5
 8006fb8:	69fa      	ldr	r2, [r7, #28]
 8006fba:	440a      	add	r2, r1
 8006fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fc0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	e00f      	b.n	8006fe8 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	015a      	lsls	r2, r3, #5
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	4413      	add	r3, r2
 8006fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69ba      	ldr	r2, [r7, #24]
 8006fd8:	0151      	lsls	r1, r2, #5
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	440a      	add	r2, r1
 8006fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fe6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006fe8:	69bb      	ldr	r3, [r7, #24]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	69fa      	ldr	r2, [r7, #28]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007002:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007006:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3720      	adds	r7, #32
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	1ff80000 	.word	0x1ff80000

08007018 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	4613      	mov	r3, r2
 8007024:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	781b      	ldrb	r3, [r3, #0]
 800702e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007030:	68bb      	ldr	r3, [r7, #8]
 8007032:	785b      	ldrb	r3, [r3, #1]
 8007034:	2b01      	cmp	r3, #1
 8007036:	f040 80cd 	bne.w	80071d4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	695b      	ldr	r3, [r3, #20]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d132      	bne.n	80070a8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	0151      	lsls	r1, r2, #5
 8007054:	697a      	ldr	r2, [r7, #20]
 8007056:	440a      	add	r2, r1
 8007058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800705c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007060:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	015a      	lsls	r2, r3, #5
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	4413      	add	r3, r2
 800706e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	0151      	lsls	r1, r2, #5
 8007078:	697a      	ldr	r2, [r7, #20]
 800707a:	440a      	add	r2, r1
 800707c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007084:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	693a      	ldr	r2, [r7, #16]
 8007096:	0151      	lsls	r1, r2, #5
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	440a      	add	r2, r1
 800709c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070a0:	0cdb      	lsrs	r3, r3, #19
 80070a2:	04db      	lsls	r3, r3, #19
 80070a4:	6113      	str	r3, [r2, #16]
 80070a6:	e04e      	b.n	8007146 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	015a      	lsls	r2, r3, #5
 80070ac:	697b      	ldr	r3, [r7, #20]
 80070ae:	4413      	add	r3, r2
 80070b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	693a      	ldr	r2, [r7, #16]
 80070b8:	0151      	lsls	r1, r2, #5
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	440a      	add	r2, r1
 80070be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070c2:	0cdb      	lsrs	r3, r3, #19
 80070c4:	04db      	lsls	r3, r3, #19
 80070c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	015a      	lsls	r2, r3, #5
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	4413      	add	r3, r2
 80070d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	0151      	lsls	r1, r2, #5
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	440a      	add	r2, r1
 80070de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070ea:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	695a      	ldr	r2, [r3, #20]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d903      	bls.n	8007100 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	689a      	ldr	r2, [r3, #8]
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	691b      	ldr	r3, [r3, #16]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	0151      	lsls	r1, r2, #5
 8007112:	697a      	ldr	r2, [r7, #20]
 8007114:	440a      	add	r2, r1
 8007116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800711a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800711e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	015a      	lsls	r2, r3, #5
 8007124:	697b      	ldr	r3, [r7, #20]
 8007126:	4413      	add	r3, r2
 8007128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007136:	6939      	ldr	r1, [r7, #16]
 8007138:	0148      	lsls	r0, r1, #5
 800713a:	6979      	ldr	r1, [r7, #20]
 800713c:	4401      	add	r1, r0
 800713e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007142:	4313      	orrs	r3, r2
 8007144:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007146:	79fb      	ldrb	r3, [r7, #7]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d11e      	bne.n	800718a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691b      	ldr	r3, [r3, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d009      	beq.n	8007168 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007160:	461a      	mov	r2, r3
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	691b      	ldr	r3, [r3, #16]
 8007166:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	697a      	ldr	r2, [r7, #20]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007182:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007186:	6013      	str	r3, [r2, #0]
 8007188:	e092      	b.n	80072b0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	4413      	add	r3, r2
 8007192:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	0151      	lsls	r1, r2, #5
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	440a      	add	r2, r1
 80071a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071a8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	695b      	ldr	r3, [r3, #20]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d07e      	beq.n	80072b0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	f003 030f 	and.w	r3, r3, #15
 80071c2:	2101      	movs	r1, #1
 80071c4:	fa01 f303 	lsl.w	r3, r1, r3
 80071c8:	6979      	ldr	r1, [r7, #20]
 80071ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071ce:	4313      	orrs	r3, r2
 80071d0:	634b      	str	r3, [r1, #52]	; 0x34
 80071d2:	e06d      	b.n	80072b0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e0:	691b      	ldr	r3, [r3, #16]
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	0151      	lsls	r1, r2, #5
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	440a      	add	r2, r1
 80071ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80071ee:	0cdb      	lsrs	r3, r3, #19
 80071f0:	04db      	lsls	r3, r3, #19
 80071f2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	015a      	lsls	r2, r3, #5
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	4413      	add	r3, r2
 80071fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	693a      	ldr	r2, [r7, #16]
 8007204:	0151      	lsls	r1, r2, #5
 8007206:	697a      	ldr	r2, [r7, #20]
 8007208:	440a      	add	r2, r1
 800720a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800720e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007212:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007216:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d003      	beq.n	8007228 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	015a      	lsls	r2, r3, #5
 800722c:	697b      	ldr	r3, [r7, #20]
 800722e:	4413      	add	r3, r2
 8007230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	0151      	lsls	r1, r2, #5
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	440a      	add	r2, r1
 800723e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007246:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	691a      	ldr	r2, [r3, #16]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800725e:	6939      	ldr	r1, [r7, #16]
 8007260:	0148      	lsls	r0, r1, #5
 8007262:	6979      	ldr	r1, [r7, #20]
 8007264:	4401      	add	r1, r0
 8007266:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800726a:	4313      	orrs	r3, r2
 800726c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800726e:	79fb      	ldrb	r3, [r7, #7]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d10d      	bne.n	8007290 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d009      	beq.n	8007290 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	68d9      	ldr	r1, [r3, #12]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	4413      	add	r3, r2
 8007288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728c:	460a      	mov	r2, r1
 800728e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007290:	693b      	ldr	r3, [r7, #16]
 8007292:	015a      	lsls	r2, r3, #5
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	0151      	lsls	r1, r2, #5
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	440a      	add	r2, r1
 80072a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80072ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80072be:	b480      	push	{r7}
 80072c0:	b089      	sub	sp, #36	; 0x24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	4611      	mov	r1, r2
 80072ca:	461a      	mov	r2, r3
 80072cc:	460b      	mov	r3, r1
 80072ce:	71fb      	strb	r3, [r7, #7]
 80072d0:	4613      	mov	r3, r2
 80072d2:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80072dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d11a      	bne.n	800731a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80072e4:	88bb      	ldrh	r3, [r7, #4]
 80072e6:	3303      	adds	r3, #3
 80072e8:	089b      	lsrs	r3, r3, #2
 80072ea:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80072ec:	2300      	movs	r3, #0
 80072ee:	61bb      	str	r3, [r7, #24]
 80072f0:	e00f      	b.n	8007312 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80072f2:	79fb      	ldrb	r3, [r7, #7]
 80072f4:	031a      	lsls	r2, r3, #12
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	4413      	add	r3, r2
 80072fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80072fe:	461a      	mov	r2, r3
 8007300:	69fb      	ldr	r3, [r7, #28]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	3304      	adds	r3, #4
 800730a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	3301      	adds	r3, #1
 8007310:	61bb      	str	r3, [r7, #24]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	429a      	cmp	r2, r3
 8007318:	d3eb      	bcc.n	80072f2 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3724      	adds	r7, #36	; 0x24
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	; 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	4613      	mov	r3, r2
 8007334:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	3303      	adds	r3, #3
 8007342:	089b      	lsrs	r3, r3, #2
 8007344:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007346:	2300      	movs	r3, #0
 8007348:	61bb      	str	r3, [r7, #24]
 800734a:	e00b      	b.n	8007364 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	601a      	str	r2, [r3, #0]
    pDest++;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	3304      	adds	r3, #4
 800735c:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	3301      	adds	r3, #1
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	429a      	cmp	r2, r3
 800736a:	d3ef      	bcc.n	800734c <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800736c:	69fb      	ldr	r3, [r7, #28]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3724      	adds	r7, #36	; 0x24
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	785b      	ldrb	r3, [r3, #1]
 8007392:	2b01      	cmp	r3, #1
 8007394:	d12c      	bne.n	80073f0 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	db12      	blt.n	80073ce <USB_EPSetStall+0x54>
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00f      	beq.n	80073ce <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	0151      	lsls	r1, r2, #5
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	440a      	add	r2, r1
 80073c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80073cc:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	0151      	lsls	r1, r2, #5
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	440a      	add	r2, r1
 80073e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80073ec:	6013      	str	r3, [r2, #0]
 80073ee:	e02b      	b.n	8007448 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	015a      	lsls	r2, r3, #5
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	db12      	blt.n	8007428 <USB_EPSetStall+0xae>
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d00f      	beq.n	8007428 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	0151      	lsls	r1, r2, #5
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	440a      	add	r2, r1
 800741e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007422:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007426:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	015a      	lsls	r2, r3, #5
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	0151      	lsls	r1, r2, #5
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	440a      	add	r2, r1
 800743e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007442:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007446:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	785b      	ldrb	r3, [r3, #1]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d128      	bne.n	80074c4 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	015a      	lsls	r2, r3, #5
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	4413      	add	r3, r2
 800747a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	0151      	lsls	r1, r2, #5
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	440a      	add	r2, r1
 8007488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800748c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007490:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	78db      	ldrb	r3, [r3, #3]
 8007496:	2b03      	cmp	r3, #3
 8007498:	d003      	beq.n	80074a2 <USB_EPClearStall+0x4c>
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	78db      	ldrb	r3, [r3, #3]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d138      	bne.n	8007514 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	68ba      	ldr	r2, [r7, #8]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6013      	str	r3, [r2, #0]
 80074c2:	e027      	b.n	8007514 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	015a      	lsls	r2, r3, #5
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	4413      	add	r3, r2
 80074cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	0151      	lsls	r1, r2, #5
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	440a      	add	r2, r1
 80074da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	78db      	ldrb	r3, [r3, #3]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d003      	beq.n	80074f4 <USB_EPClearStall+0x9e>
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	78db      	ldrb	r3, [r3, #3]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d10f      	bne.n	8007514 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007512:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3714      	adds	r7, #20
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr

08007522 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007522:	b480      	push	{r7}
 8007524:	b085      	sub	sp, #20
 8007526:	af00      	add	r7, sp, #0
 8007528:	6078      	str	r0, [r7, #4]
 800752a:	460b      	mov	r3, r1
 800752c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007540:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007544:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	78fb      	ldrb	r3, [r7, #3]
 8007550:	011b      	lsls	r3, r3, #4
 8007552:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007556:	68f9      	ldr	r1, [r7, #12]
 8007558:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800755c:	4313      	orrs	r3, r2
 800755e:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3714      	adds	r7, #20
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr

0800756e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800756e:	b480      	push	{r7}
 8007570:	b085      	sub	sp, #20
 8007572:	af00      	add	r7, sp, #0
 8007574:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007588:	f023 0303 	bic.w	r3, r3, #3
 800758c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800759c:	f023 0302 	bic.w	r3, r3, #2
 80075a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b085      	sub	sp, #20
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ca:	f023 0303 	bic.w	r3, r3, #3
 80075ce:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	68fa      	ldr	r2, [r7, #12]
 80075da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80075de:	f043 0302 	orr.w	r3, r3, #2
 80075e2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80075f2:	b480      	push	{r7}
 80075f4:	b085      	sub	sp, #20
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	695b      	ldr	r3, [r3, #20]
 80075fe:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	68fa      	ldr	r2, [r7, #12]
 8007606:	4013      	ands	r3, r2
 8007608:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800760a:	68fb      	ldr	r3, [r7, #12]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800762a:	699b      	ldr	r3, [r3, #24]
 800762c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	4013      	ands	r3, r2
 800763a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	0c1b      	lsrs	r3, r3, #16
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	68ba      	ldr	r2, [r7, #8]
 800766c:	4013      	ands	r3, r2
 800766e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	b29b      	uxth	r3, r3
}
 8007674:	4618      	mov	r0, r3
 8007676:	3714      	adds	r7, #20
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007690:	78fb      	ldrb	r3, [r7, #3]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076a6:	695b      	ldr	r3, [r3, #20]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	4013      	ands	r3, r2
 80076ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80076ae:	68bb      	ldr	r3, [r7, #8]
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
 80076c4:	460b      	mov	r3, r1
 80076c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80076e0:	78fb      	ldrb	r3, [r7, #3]
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	fa22 f303 	lsr.w	r3, r2, r3
 80076ec:	01db      	lsls	r3, r3, #7
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	015a      	lsls	r2, r3, #5
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	4413      	add	r3, r2
 80076fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	4013      	ands	r3, r2
 8007708:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800770a:	68bb      	ldr	r3, [r7, #8]
}
 800770c:	4618      	mov	r0, r3
 800770e:	371c      	adds	r7, #28
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr

08007718 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	695b      	ldr	r3, [r3, #20]
 8007724:	f003 0301 	and.w	r3, r3, #1
}
 8007728:	4618      	mov	r0, r3
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	68fa      	ldr	r2, [r7, #12]
 800774a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007752:	f023 0307 	bic.w	r3, r3, #7
 8007756:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	68fa      	ldr	r2, [r7, #12]
 8007762:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800776a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800776c:	2300      	movs	r3, #0
}
 800776e:	4618      	mov	r0, r3
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800777c:	b480      	push	{r7}
 800777e:	b087      	sub	sp, #28
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	460b      	mov	r3, r1
 8007786:	607a      	str	r2, [r7, #4]
 8007788:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	333c      	adds	r3, #60	; 0x3c
 8007792:	3304      	adds	r3, #4
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	4a26      	ldr	r2, [pc, #152]	; (8007834 <USB_EP0_OutStart+0xb8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d90a      	bls.n	80077b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077b0:	d101      	bne.n	80077b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	e037      	b.n	8007826 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077bc:	461a      	mov	r2, r3
 80077be:	2300      	movs	r3, #0
 80077c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	697a      	ldr	r2, [r7, #20]
 80077e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077e4:	f043 0318 	orr.w	r3, r3, #24
 80077e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	697a      	ldr	r2, [r7, #20]
 80077f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80077fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80077fe:	7afb      	ldrb	r3, [r7, #11]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d10f      	bne.n	8007824 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	697a      	ldr	r2, [r7, #20]
 800781a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800781e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007822:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	371c      	adds	r7, #28
 800782a:	46bd      	mov	sp, r7
 800782c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007830:	4770      	bx	lr
 8007832:	bf00      	nop
 8007834:	4f54300a 	.word	0x4f54300a

08007838 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007838:	b480      	push	{r7}
 800783a:	b085      	sub	sp, #20
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007840:	2300      	movs	r3, #0
 8007842:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3301      	adds	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a13      	ldr	r2, [pc, #76]	; (800789c <USB_CoreReset+0x64>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d901      	bls.n	8007856 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e01b      	b.n	800788e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	2b00      	cmp	r3, #0
 800785c:	daf2      	bge.n	8007844 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f043 0201 	orr.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	3301      	adds	r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4a09      	ldr	r2, [pc, #36]	; (800789c <USB_CoreReset+0x64>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d901      	bls.n	8007880 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800787c:	2303      	movs	r3, #3
 800787e:	e006      	b.n	800788e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	691b      	ldr	r3, [r3, #16]
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	2b01      	cmp	r3, #1
 800788a:	d0f0      	beq.n	800786e <USB_CoreReset+0x36>

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop
 800789c:	00030d40 	.word	0x00030d40

080078a0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80078ac:	2030      	movs	r0, #48	; 0x30
 80078ae:	f001 fffb 	bl	80098a8 <USBD_static_malloc>
 80078b2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d105      	bne.n	80078c6 <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80078c2:	2302      	movs	r3, #2
 80078c4:	e039      	b.n	800793a <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	7c1b      	ldrb	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d107      	bne.n	80078e6 <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2205      	movs	r2, #5
 80078da:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2205      	movs	r2, #5
 80078e0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80078e4:	e006      	b.n	80078f4 <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2205      	movs	r2, #5
 80078ea:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2205      	movs	r2, #5
 80078f0:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80078f4:	2302      	movs	r3, #2
 80078f6:	2203      	movs	r2, #3
 80078f8:	2181      	movs	r1, #129	; 0x81
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f001 fec3 	bl	8009686 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2201      	movs	r2, #1
 8007904:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8007906:	2302      	movs	r3, #2
 8007908:	2203      	movs	r2, #3
 800790a:	2101      	movs	r1, #1
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f001 feba 	bl	8009686 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	231c      	movs	r3, #28
 8007930:	2101      	movs	r1, #1
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f001 ff96 	bl	8009864 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b082      	sub	sp, #8
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
 800794a:	460b      	mov	r3, r1
 800794c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800794e:	2181      	movs	r1, #129	; 0x81
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f001 febe 	bl	80096d2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8007962:	2101      	movs	r1, #1
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f001 feb4 	bl	80096d2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2200      	movs	r2, #0
 800796e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007980:	2b00      	cmp	r3, #0
 8007982:	d00e      	beq.n	80079a2 <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007994:	4618      	mov	r0, r3
 8007996:	f001 ff95 	bl	80098c4 <USBD_static_free>
    pdev->pClassData = NULL;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3708      	adds	r7, #8
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079bc:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80079be:	2300      	movs	r3, #0
 80079c0:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80079ca:	2300      	movs	r3, #0
 80079cc:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d101      	bne.n	80079d8 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80079d4:	2303      	movs	r3, #3
 80079d6:	e0ed      	b.n	8007bb4 <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d052      	beq.n	8007a8a <USBD_CUSTOM_HID_Setup+0xde>
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	f040 80dd 	bne.w	8007ba4 <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	785b      	ldrb	r3, [r3, #1]
 80079ee:	3b02      	subs	r3, #2
 80079f0:	2b09      	cmp	r3, #9
 80079f2:	d842      	bhi.n	8007a7a <USBD_CUSTOM_HID_Setup+0xce>
 80079f4:	a201      	add	r2, pc, #4	; (adr r2, 80079fc <USBD_CUSTOM_HID_Setup+0x50>)
 80079f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fa:	bf00      	nop
 80079fc:	08007a55 	.word	0x08007a55
 8007a00:	08007a33 	.word	0x08007a33
 8007a04:	08007a7b 	.word	0x08007a7b
 8007a08:	08007a7b 	.word	0x08007a7b
 8007a0c:	08007a7b 	.word	0x08007a7b
 8007a10:	08007a7b 	.word	0x08007a7b
 8007a14:	08007a7b 	.word	0x08007a7b
 8007a18:	08007a65 	.word	0x08007a65
 8007a1c:	08007a43 	.word	0x08007a43
 8007a20:	08007a25 	.word	0x08007a25
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	885b      	ldrh	r3, [r3, #2]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	461a      	mov	r2, r3
 8007a2c:	693b      	ldr	r3, [r7, #16]
 8007a2e:	61da      	str	r2, [r3, #28]
          break;
 8007a30:	e02a      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	331c      	adds	r3, #28
 8007a36:	2201      	movs	r2, #1
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f001 fa9d 	bl	8008f7a <USBD_CtlSendData>
          break;
 8007a40:	e022      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	885b      	ldrh	r3, [r3, #2]
 8007a46:	0a1b      	lsrs	r3, r3, #8
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	621a      	str	r2, [r3, #32]
          break;
 8007a52:	e019      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	3320      	adds	r3, #32
 8007a58:	2201      	movs	r2, #1
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f001 fa8c 	bl	8008f7a <USBD_CtlSendData>
          break;
 8007a62:	e011      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	2201      	movs	r2, #1
 8007a68:	629a      	str	r2, [r3, #40]	; 0x28
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8007a6a:	6939      	ldr	r1, [r7, #16]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	88db      	ldrh	r3, [r3, #6]
 8007a70:	461a      	mov	r2, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 faad 	bl	8008fd2 <USBD_CtlPrepareRx>
          break;
 8007a78:	e006      	b.n	8007a88 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f001 fa0b 	bl	8008e98 <USBD_CtlError>
          ret = USBD_FAIL;
 8007a82:	2303      	movs	r3, #3
 8007a84:	75fb      	strb	r3, [r7, #23]
          break;
 8007a86:	bf00      	nop
      }
      break;
 8007a88:	e093      	b.n	8007bb2 <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	2b0b      	cmp	r3, #11
 8007a90:	d87f      	bhi.n	8007b92 <USBD_CUSTOM_HID_Setup+0x1e6>
 8007a92:	a201      	add	r2, pc, #4	; (adr r2, 8007a98 <USBD_CUSTOM_HID_Setup+0xec>)
 8007a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a98:	08007ac9 	.word	0x08007ac9
 8007a9c:	08007ba1 	.word	0x08007ba1
 8007aa0:	08007b93 	.word	0x08007b93
 8007aa4:	08007b93 	.word	0x08007b93
 8007aa8:	08007b93 	.word	0x08007b93
 8007aac:	08007b93 	.word	0x08007b93
 8007ab0:	08007af3 	.word	0x08007af3
 8007ab4:	08007b93 	.word	0x08007b93
 8007ab8:	08007b93 	.word	0x08007b93
 8007abc:	08007b93 	.word	0x08007b93
 8007ac0:	08007b41 	.word	0x08007b41
 8007ac4:	08007b6b 	.word	0x08007b6b
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b03      	cmp	r3, #3
 8007ad2:	d107      	bne.n	8007ae4 <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007ad4:	f107 030e 	add.w	r3, r7, #14
 8007ad8:	2202      	movs	r2, #2
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f001 fa4c 	bl	8008f7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007ae2:	e05e      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8007ae4:	6839      	ldr	r1, [r7, #0]
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f001 f9d6 	bl	8008e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8007aec:	2303      	movs	r3, #3
 8007aee:	75fb      	strb	r3, [r7, #23]
          break;
 8007af0:	e057      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	885b      	ldrh	r3, [r3, #2]
 8007af6:	0a1b      	lsrs	r3, r3, #8
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	2b22      	cmp	r3, #34	; 0x22
 8007afc:	d10b      	bne.n	8007b16 <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	88db      	ldrh	r3, [r3, #6]
 8007b02:	2b22      	cmp	r3, #34	; 0x22
 8007b04:	bf28      	it	cs
 8007b06:	2322      	movcs	r3, #34	; 0x22
 8007b08:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	61bb      	str	r3, [r7, #24]
 8007b14:	e00d      	b.n	8007b32 <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	885b      	ldrh	r3, [r3, #2]
 8007b1a:	0a1b      	lsrs	r3, r3, #8
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b21      	cmp	r3, #33	; 0x21
 8007b20:	d107      	bne.n	8007b32 <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8007b22:	4b26      	ldr	r3, [pc, #152]	; (8007bbc <USBD_CUSTOM_HID_Setup+0x210>)
 8007b24:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	88db      	ldrh	r3, [r3, #6]
 8007b2a:	2b09      	cmp	r3, #9
 8007b2c:	bf28      	it	cs
 8007b2e:	2309      	movcs	r3, #9
 8007b30:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8007b32:	8bfb      	ldrh	r3, [r7, #30]
 8007b34:	461a      	mov	r2, r3
 8007b36:	69b9      	ldr	r1, [r7, #24]
 8007b38:	6878      	ldr	r0, [r7, #4]
 8007b3a:	f001 fa1e 	bl	8008f7a <USBD_CtlSendData>
          break;
 8007b3e:	e030      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b46:	b2db      	uxtb	r3, r3
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d107      	bne.n	8007b5c <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	3324      	adds	r3, #36	; 0x24
 8007b50:	2201      	movs	r2, #1
 8007b52:	4619      	mov	r1, r3
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f001 fa10 	bl	8008f7a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b5a:	e022      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8007b5c:	6839      	ldr	r1, [r7, #0]
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f001 f99a 	bl	8008e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	75fb      	strb	r3, [r7, #23]
          break;
 8007b68:	e01b      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d106      	bne.n	8007b84 <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	885b      	ldrh	r3, [r3, #2]
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	625a      	str	r2, [r3, #36]	; 0x24
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007b82:	e00e      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8007b84:	6839      	ldr	r1, [r7, #0]
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f001 f986 	bl	8008e98 <USBD_CtlError>
            ret = USBD_FAIL;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	75fb      	strb	r3, [r7, #23]
          break;
 8007b90:	e007      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f001 f97f 	bl	8008e98 <USBD_CtlError>
          ret = USBD_FAIL;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8007b9e:	e000      	b.n	8007ba2 <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8007ba0:	bf00      	nop
      }
      break;
 8007ba2:	e006      	b.n	8007bb2 <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8007ba4:	6839      	ldr	r1, [r7, #0]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f001 f976 	bl	8008e98 <USBD_CtlError>
      ret = USBD_FAIL;
 8007bac:	2303      	movs	r3, #3
 8007bae:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb0:	bf00      	nop
  }
  return (uint8_t)ret;
 8007bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3720      	adds	r7, #32
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	200000f0 	.word	0x200000f0

08007bc0 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b086      	sub	sp, #24
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	60f8      	str	r0, [r7, #12]
 8007bc8:	60b9      	str	r1, [r7, #8]
 8007bca:	4613      	mov	r3, r2
 8007bcc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e01c      	b.n	8007c16 <USBD_CUSTOM_HID_SendReport+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007be2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b03      	cmp	r3, #3
 8007bee:	d111      	bne.n	8007c14 <USBD_CUSTOM_HID_SendReport+0x54>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d10a      	bne.n	8007c10 <USBD_CUSTOM_HID_SendReport+0x50>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8007c02:	88fb      	ldrh	r3, [r7, #6]
 8007c04:	68ba      	ldr	r2, [r7, #8]
 8007c06:	2181      	movs	r1, #129	; 0x81
 8007c08:	68f8      	ldr	r0, [r7, #12]
 8007c0a:	f001 fe0a 	bl	8009822 <USBD_LL_Transmit>
 8007c0e:	e001      	b.n	8007c14 <USBD_CUSTOM_HID_SendReport+0x54>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <USBD_CUSTOM_HID_SendReport+0x56>
    }
  }
  return (uint8_t)USBD_OK;
 8007c14:	2300      	movs	r3, #0
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
	...

08007c20 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2229      	movs	r2, #41	; 0x29
 8007c2c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8007c2e:	4b03      	ldr	r3, [pc, #12]	; (8007c3c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	370c      	adds	r7, #12
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	2000006c 	.word	0x2000006c

08007c40 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2229      	movs	r2, #41	; 0x29
 8007c4c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8007c4e:	4b03      	ldr	r3, [pc, #12]	; (8007c5c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	20000098 	.word	0x20000098

08007c60 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2229      	movs	r2, #41	; 0x29
 8007c6c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8007c6e:	4b03      	ldr	r3, [pc, #12]	; (8007c7c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	200000c4 	.word	0x200000c4

08007c80 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return (uint8_t)USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	370c      	adds	r7, #12
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca4:	4770      	bx	lr

08007ca6 <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b084      	sub	sp, #16
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e00e      	b.n	8007cde <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cc6:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	7810      	ldrb	r0, [r2, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	7852      	ldrb	r2, [r2, #1]
 8007cd8:	4611      	mov	r1, r2
 8007cda:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}

08007ce6 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007ce6:	b580      	push	{r7, lr}
 8007ce8:	b084      	sub	sp, #16
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d101      	bne.n	8007cfc <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e00a      	b.n	8007d12 <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	231c      	movs	r3, #28
 8007d08:	2101      	movs	r1, #1
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 fdaa 	bl	8009864 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8007d10:	2300      	movs	r3, #0
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d28:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d101      	bne.n	8007d34 <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e011      	b.n	8007d58 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d10c      	bne.n	8007d56 <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d42:	68db      	ldr	r3, [r3, #12]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	7810      	ldrb	r0, [r2, #0]
 8007d48:	68fa      	ldr	r2, [r7, #12]
 8007d4a:	7852      	ldrb	r2, [r2, #1]
 8007d4c:	4611      	mov	r1, r2
 8007d4e:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  return (uint8_t)USBD_OK;
 8007d56:	2300      	movs	r3, #0
}
 8007d58:	4618      	mov	r0, r3
 8007d5a:	3710      	adds	r7, #16
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b083      	sub	sp, #12
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	220a      	movs	r2, #10
 8007d6c:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8007d6e:	4b03      	ldr	r3, [pc, #12]	; (8007d7c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007d70:	4618      	mov	r0, r3
 8007d72:	370c      	adds	r7, #12
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	200000fc 	.word	0x200000fc

08007d80 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007d90:	2303      	movs	r3, #3
 8007d92:	e004      	b.n	8007d9e <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007d9c:	2300      	movs	r3, #0
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b086      	sub	sp, #24
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	60f8      	str	r0, [r7, #12]
 8007db2:	60b9      	str	r1, [r7, #8]
 8007db4:	4613      	mov	r3, r2
 8007db6:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d101      	bne.n	8007dc2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e01f      	b.n	8007e02 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	2200      	movs	r2, #0
 8007dce:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	79fa      	ldrb	r2, [r7, #7]
 8007df4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f001 fbde 	bl	80095b8 <USBD_LL_Init>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b084      	sub	sp, #16
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007e14:	2300      	movs	r3, #0
 8007e16:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8007e1e:	2303      	movs	r3, #3
 8007e20:	e016      	b.n	8007e50 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00b      	beq.n	8007e4e <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e3e:	f107 020e 	add.w	r2, r7, #14
 8007e42:	4610      	mov	r0, r2
 8007e44:	4798      	blx	r3
 8007e46:	4602      	mov	r2, r0
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3710      	adds	r7, #16
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f001 fbf5 	bl	8009650 <USBD_LL_Start>
 8007e66:	4603      	mov	r3, r0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	370c      	adds	r7, #12
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e84:	4770      	bx	lr

08007e86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b084      	sub	sp, #16
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
 8007e8e:	460b      	mov	r3, r1
 8007e90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007e92:	2303      	movs	r3, #3
 8007e94:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d009      	beq.n	8007eb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	78fa      	ldrb	r2, [r7, #3]
 8007eaa:	4611      	mov	r1, r2
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	4798      	blx	r3
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3710      	adds	r7, #16
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}

08007ebe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ebe:	b580      	push	{r7, lr}
 8007ec0:	b082      	sub	sp, #8
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
 8007ec6:	460b      	mov	r3, r1
 8007ec8:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d007      	beq.n	8007ee4 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	78fa      	ldrb	r2, [r7, #3]
 8007ede:	4611      	mov	r1, r2
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	4798      	blx	r3
  }

  return USBD_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
 8007ef6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007efe:	6839      	ldr	r1, [r7, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f000 ff8f 	bl	8008e24 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2201      	movs	r2, #1
 8007f0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007f14:	461a      	mov	r2, r3
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f22:	f003 031f 	and.w	r3, r3, #31
 8007f26:	2b02      	cmp	r3, #2
 8007f28:	d01a      	beq.n	8007f60 <USBD_LL_SetupStage+0x72>
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d822      	bhi.n	8007f74 <USBD_LL_SetupStage+0x86>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d002      	beq.n	8007f38 <USBD_LL_SetupStage+0x4a>
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d00a      	beq.n	8007f4c <USBD_LL_SetupStage+0x5e>
 8007f36:	e01d      	b.n	8007f74 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fa61 	bl	8008408 <USBD_StdDevReq>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]
      break;
 8007f4a:	e020      	b.n	8007f8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f000 fac5 	bl	80084e4 <USBD_StdItfReq>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8007f5e:	e016      	b.n	8007f8e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fb04 	bl	8008576 <USBD_StdEPReq>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	73fb      	strb	r3, [r7, #15]
      break;
 8007f72:	e00c      	b.n	8007f8e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007f7a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f001 fbc4 	bl	8009710 <USBD_LL_StallEP>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f8c:	bf00      	nop
  }

  return ret;
 8007f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	460b      	mov	r3, r1
 8007fa2:	607a      	str	r2, [r7, #4]
 8007fa4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007fa6:	7afb      	ldrb	r3, [r7, #11]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d138      	bne.n	800801e <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007fb2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d14a      	bne.n	8008054 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	689a      	ldr	r2, [r3, #8]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	429a      	cmp	r2, r3
 8007fc8:	d913      	bls.n	8007ff2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	689a      	ldr	r2, [r3, #8]
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	1ad2      	subs	r2, r2, r3
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	68da      	ldr	r2, [r3, #12]
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	bf28      	it	cs
 8007fe4:	4613      	movcs	r3, r2
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6879      	ldr	r1, [r7, #4]
 8007fea:	68f8      	ldr	r0, [r7, #12]
 8007fec:	f001 f80e 	bl	800900c <USBD_CtlContinueRx>
 8007ff0:	e030      	b.n	8008054 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	2b03      	cmp	r3, #3
 8007ffc:	d10b      	bne.n	8008016 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008004:	691b      	ldr	r3, [r3, #16]
 8008006:	2b00      	cmp	r3, #0
 8008008:	d005      	beq.n	8008016 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	68f8      	ldr	r0, [r7, #12]
 8008014:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f001 f809 	bl	800902e <USBD_CtlSendStatus>
 800801c:	e01a      	b.n	8008054 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008024:	b2db      	uxtb	r3, r3
 8008026:	2b03      	cmp	r3, #3
 8008028:	d114      	bne.n	8008054 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008030:	699b      	ldr	r3, [r3, #24]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00e      	beq.n	8008054 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	7afa      	ldrb	r2, [r7, #11]
 8008040:	4611      	mov	r1, r2
 8008042:	68f8      	ldr	r0, [r7, #12]
 8008044:	4798      	blx	r3
 8008046:	4603      	mov	r3, r0
 8008048:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800804a:	7dfb      	ldrb	r3, [r7, #23]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d001      	beq.n	8008054 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8008050:	7dfb      	ldrb	r3, [r7, #23]
 8008052:	e000      	b.n	8008056 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3718      	adds	r7, #24
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b086      	sub	sp, #24
 8008062:	af00      	add	r7, sp, #0
 8008064:	60f8      	str	r0, [r7, #12]
 8008066:	460b      	mov	r3, r1
 8008068:	607a      	str	r2, [r7, #4]
 800806a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d16b      	bne.n	800814a <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3314      	adds	r3, #20
 8008076:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800807e:	2b02      	cmp	r3, #2
 8008080:	d156      	bne.n	8008130 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	429a      	cmp	r2, r3
 800808c:	d914      	bls.n	80080b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	689a      	ldr	r2, [r3, #8]
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	1ad2      	subs	r2, r2, r3
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	461a      	mov	r2, r3
 80080a2:	6879      	ldr	r1, [r7, #4]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 ff83 	bl	8008fb0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080aa:	2300      	movs	r3, #0
 80080ac:	2200      	movs	r2, #0
 80080ae:	2100      	movs	r1, #0
 80080b0:	68f8      	ldr	r0, [r7, #12]
 80080b2:	f001 fbd7 	bl	8009864 <USBD_LL_PrepareReceive>
 80080b6:	e03b      	b.n	8008130 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80080b8:	693b      	ldr	r3, [r7, #16]
 80080ba:	68da      	ldr	r2, [r3, #12]
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	689b      	ldr	r3, [r3, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d11c      	bne.n	80080fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d316      	bcc.n	80080fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	685a      	ldr	r2, [r3, #4]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80080da:	429a      	cmp	r2, r3
 80080dc:	d20f      	bcs.n	80080fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80080de:	2200      	movs	r2, #0
 80080e0:	2100      	movs	r1, #0
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 ff64 	bl	8008fb0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80080f0:	2300      	movs	r3, #0
 80080f2:	2200      	movs	r2, #0
 80080f4:	2100      	movs	r1, #0
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f001 fbb4 	bl	8009864 <USBD_LL_PrepareReceive>
 80080fc:	e018      	b.n	8008130 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008104:	b2db      	uxtb	r3, r3
 8008106:	2b03      	cmp	r3, #3
 8008108:	d10b      	bne.n	8008122 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d005      	beq.n	8008122 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008122:	2180      	movs	r1, #128	; 0x80
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f001 faf3 	bl	8009710 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 ff92 	bl	8009054 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008136:	2b01      	cmp	r3, #1
 8008138:	d122      	bne.n	8008180 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f7ff fe98 	bl	8007e70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008148:	e01a      	b.n	8008180 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b03      	cmp	r3, #3
 8008154:	d114      	bne.n	8008180 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d00e      	beq.n	8008180 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008168:	695b      	ldr	r3, [r3, #20]
 800816a:	7afa      	ldrb	r2, [r7, #11]
 800816c:	4611      	mov	r1, r2
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	4798      	blx	r3
 8008172:	4603      	mov	r3, r0
 8008174:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d001      	beq.n	8008180 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800817c:	7dfb      	ldrb	r3, [r7, #23]
 800817e:	e000      	b.n	8008182 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3718      	adds	r7, #24
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2201      	movs	r2, #1
 8008196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d101      	bne.n	80081be <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e02f      	b.n	800821e <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00f      	beq.n	80081e8 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d009      	beq.n	80081e8 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	6852      	ldr	r2, [r2, #4]
 80081e0:	b2d2      	uxtb	r2, r2
 80081e2:	4611      	mov	r1, r2
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80081e8:	2340      	movs	r3, #64	; 0x40
 80081ea:	2200      	movs	r2, #0
 80081ec:	2100      	movs	r1, #0
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f001 fa49 	bl	8009686 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2240      	movs	r2, #64	; 0x40
 8008200:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008204:	2340      	movs	r3, #64	; 0x40
 8008206:	2200      	movs	r2, #0
 8008208:	2180      	movs	r1, #128	; 0x80
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fa3b 	bl	8009686 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2240      	movs	r2, #64	; 0x40
 800821a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}

08008226 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	460b      	mov	r3, r1
 8008230:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	78fa      	ldrb	r2, [r7, #3]
 8008236:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	370c      	adds	r7, #12
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008246:	b480      	push	{r7}
 8008248:	b083      	sub	sp, #12
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008254:	b2da      	uxtb	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2204      	movs	r2, #4
 8008260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr

08008272 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008272:	b480      	push	{r7}
 8008274:	b083      	sub	sp, #12
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b04      	cmp	r3, #4
 8008284:	d106      	bne.n	8008294 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800828c:	b2da      	uxtb	r2, r3
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d101      	bne.n	80082b8 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80082b4:	2303      	movs	r3, #3
 80082b6:	e012      	b.n	80082de <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b03      	cmp	r3, #3
 80082c2:	d10b      	bne.n	80082dc <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082ca:	69db      	ldr	r3, [r3, #28]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d005      	beq.n	80082dc <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082d6:	69db      	ldr	r3, [r3, #28]
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3708      	adds	r7, #8
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}

080082e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80082e6:	b580      	push	{r7, lr}
 80082e8:	b082      	sub	sp, #8
 80082ea:	af00      	add	r7, sp, #0
 80082ec:	6078      	str	r0, [r7, #4]
 80082ee:	460b      	mov	r3, r1
 80082f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d101      	bne.n	8008300 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e014      	b.n	800832a <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b03      	cmp	r3, #3
 800830a:	d10d      	bne.n	8008328 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008312:	6a1b      	ldr	r3, [r3, #32]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d007      	beq.n	8008328 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800831e:	6a1b      	ldr	r3, [r3, #32]
 8008320:	78fa      	ldrb	r2, [r7, #3]
 8008322:	4611      	mov	r1, r2
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008328:	2300      	movs	r3, #0
}
 800832a:	4618      	mov	r0, r3
 800832c:	3708      	adds	r7, #8
 800832e:	46bd      	mov	sp, r7
 8008330:	bd80      	pop	{r7, pc}

08008332 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008332:	b580      	push	{r7, lr}
 8008334:	b082      	sub	sp, #8
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
 800833a:	460b      	mov	r3, r1
 800833c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008344:	2b00      	cmp	r3, #0
 8008346:	d101      	bne.n	800834c <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8008348:	2303      	movs	r3, #3
 800834a:	e014      	b.n	8008376 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b03      	cmp	r3, #3
 8008356:	d10d      	bne.n	8008374 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008360:	2b00      	cmp	r3, #0
 8008362:	d007      	beq.n	8008374 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	78fa      	ldrb	r2, [r7, #3]
 800836e:	4611      	mov	r1, r2
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008374:	2300      	movs	r3, #0
}
 8008376:	4618      	mov	r0, r3
 8008378:	3708      	adds	r7, #8
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}

0800837e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800837e:	b480      	push	{r7}
 8008380:	b083      	sub	sp, #12
 8008382:	af00      	add	r7, sp, #0
 8008384:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008386:	2300      	movs	r3, #0
}
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d009      	beq.n	80083c2 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	6852      	ldr	r2, [r2, #4]
 80083ba:	b2d2      	uxtb	r2, r2
 80083bc:	4611      	mov	r1, r2
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	4798      	blx	r3
  }

  return USBD_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b087      	sub	sp, #28
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	3301      	adds	r3, #1
 80083e2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80083ea:	8a3b      	ldrh	r3, [r7, #16]
 80083ec:	021b      	lsls	r3, r3, #8
 80083ee:	b21a      	sxth	r2, r3
 80083f0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	b21b      	sxth	r3, r3
 80083f8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80083fa:	89fb      	ldrh	r3, [r7, #14]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	371c      	adds	r7, #28
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b084      	sub	sp, #16
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008412:	2300      	movs	r3, #0
 8008414:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008416:	683b      	ldr	r3, [r7, #0]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800841e:	2b40      	cmp	r3, #64	; 0x40
 8008420:	d005      	beq.n	800842e <USBD_StdDevReq+0x26>
 8008422:	2b40      	cmp	r3, #64	; 0x40
 8008424:	d853      	bhi.n	80084ce <USBD_StdDevReq+0xc6>
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00b      	beq.n	8008442 <USBD_StdDevReq+0x3a>
 800842a:	2b20      	cmp	r3, #32
 800842c:	d14f      	bne.n	80084ce <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	6839      	ldr	r1, [r7, #0]
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	4798      	blx	r3
 800843c:	4603      	mov	r3, r0
 800843e:	73fb      	strb	r3, [r7, #15]
      break;
 8008440:	e04a      	b.n	80084d8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	785b      	ldrb	r3, [r3, #1]
 8008446:	2b09      	cmp	r3, #9
 8008448:	d83b      	bhi.n	80084c2 <USBD_StdDevReq+0xba>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <USBD_StdDevReq+0x48>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	080084a5 	.word	0x080084a5
 8008454:	080084b9 	.word	0x080084b9
 8008458:	080084c3 	.word	0x080084c3
 800845c:	080084af 	.word	0x080084af
 8008460:	080084c3 	.word	0x080084c3
 8008464:	08008483 	.word	0x08008483
 8008468:	08008479 	.word	0x08008479
 800846c:	080084c3 	.word	0x080084c3
 8008470:	0800849b 	.word	0x0800849b
 8008474:	0800848d 	.word	0x0800848d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f9de 	bl	800883c <USBD_GetDescriptor>
          break;
 8008480:	e024      	b.n	80084cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008482:	6839      	ldr	r1, [r7, #0]
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 fb43 	bl	8008b10 <USBD_SetAddress>
          break;
 800848a:	e01f      	b.n	80084cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f000 fb82 	bl	8008b98 <USBD_SetConfig>
 8008494:	4603      	mov	r3, r0
 8008496:	73fb      	strb	r3, [r7, #15]
          break;
 8008498:	e018      	b.n	80084cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800849a:	6839      	ldr	r1, [r7, #0]
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 fc21 	bl	8008ce4 <USBD_GetConfig>
          break;
 80084a2:	e013      	b.n	80084cc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 fc52 	bl	8008d50 <USBD_GetStatus>
          break;
 80084ac:	e00e      	b.n	80084cc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80084ae:	6839      	ldr	r1, [r7, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f000 fc81 	bl	8008db8 <USBD_SetFeature>
          break;
 80084b6:	e009      	b.n	80084cc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80084b8:	6839      	ldr	r1, [r7, #0]
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fc90 	bl	8008de0 <USBD_ClrFeature>
          break;
 80084c0:	e004      	b.n	80084cc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80084c2:	6839      	ldr	r1, [r7, #0]
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 fce7 	bl	8008e98 <USBD_CtlError>
          break;
 80084ca:	bf00      	nop
      }
      break;
 80084cc:	e004      	b.n	80084d8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80084ce:	6839      	ldr	r1, [r7, #0]
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f000 fce1 	bl	8008e98 <USBD_CtlError>
      break;
 80084d6:	bf00      	nop
  }

  return ret;
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop

080084e4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b084      	sub	sp, #16
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084fa:	2b40      	cmp	r3, #64	; 0x40
 80084fc:	d005      	beq.n	800850a <USBD_StdItfReq+0x26>
 80084fe:	2b40      	cmp	r3, #64	; 0x40
 8008500:	d82f      	bhi.n	8008562 <USBD_StdItfReq+0x7e>
 8008502:	2b00      	cmp	r3, #0
 8008504:	d001      	beq.n	800850a <USBD_StdItfReq+0x26>
 8008506:	2b20      	cmp	r3, #32
 8008508:	d12b      	bne.n	8008562 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008510:	b2db      	uxtb	r3, r3
 8008512:	3b01      	subs	r3, #1
 8008514:	2b02      	cmp	r3, #2
 8008516:	d81d      	bhi.n	8008554 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	889b      	ldrh	r3, [r3, #4]
 800851c:	b2db      	uxtb	r3, r3
 800851e:	2b01      	cmp	r3, #1
 8008520:	d813      	bhi.n	800854a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	6839      	ldr	r1, [r7, #0]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	4798      	blx	r3
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	88db      	ldrh	r3, [r3, #6]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d110      	bne.n	800855e <USBD_StdItfReq+0x7a>
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10d      	bne.n	800855e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f000 fd73 	bl	800902e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008548:	e009      	b.n	800855e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800854a:	6839      	ldr	r1, [r7, #0]
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f000 fca3 	bl	8008e98 <USBD_CtlError>
          break;
 8008552:	e004      	b.n	800855e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fc9e 	bl	8008e98 <USBD_CtlError>
          break;
 800855c:	e000      	b.n	8008560 <USBD_StdItfReq+0x7c>
          break;
 800855e:	bf00      	nop
      }
      break;
 8008560:	e004      	b.n	800856c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008562:	6839      	ldr	r1, [r7, #0]
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 fc97 	bl	8008e98 <USBD_CtlError>
      break;
 800856a:	bf00      	nop
  }

  return ret;
 800856c:	7bfb      	ldrb	r3, [r7, #15]
}
 800856e:	4618      	mov	r0, r3
 8008570:	3710      	adds	r7, #16
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b084      	sub	sp, #16
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008580:	2300      	movs	r3, #0
 8008582:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	889b      	ldrh	r3, [r3, #4]
 8008588:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008592:	2b40      	cmp	r3, #64	; 0x40
 8008594:	d007      	beq.n	80085a6 <USBD_StdEPReq+0x30>
 8008596:	2b40      	cmp	r3, #64	; 0x40
 8008598:	f200 8145 	bhi.w	8008826 <USBD_StdEPReq+0x2b0>
 800859c:	2b00      	cmp	r3, #0
 800859e:	d00c      	beq.n	80085ba <USBD_StdEPReq+0x44>
 80085a0:	2b20      	cmp	r3, #32
 80085a2:	f040 8140 	bne.w	8008826 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	6839      	ldr	r1, [r7, #0]
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	4798      	blx	r3
 80085b4:	4603      	mov	r3, r0
 80085b6:	73fb      	strb	r3, [r7, #15]
      break;
 80085b8:	e13a      	b.n	8008830 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	785b      	ldrb	r3, [r3, #1]
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d007      	beq.n	80085d2 <USBD_StdEPReq+0x5c>
 80085c2:	2b03      	cmp	r3, #3
 80085c4:	f300 8129 	bgt.w	800881a <USBD_StdEPReq+0x2a4>
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d07f      	beq.n	80086cc <USBD_StdEPReq+0x156>
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d03c      	beq.n	800864a <USBD_StdEPReq+0xd4>
 80085d0:	e123      	b.n	800881a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	2b02      	cmp	r3, #2
 80085dc:	d002      	beq.n	80085e4 <USBD_StdEPReq+0x6e>
 80085de:	2b03      	cmp	r3, #3
 80085e0:	d016      	beq.n	8008610 <USBD_StdEPReq+0x9a>
 80085e2:	e02c      	b.n	800863e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80085e4:	7bbb      	ldrb	r3, [r7, #14]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00d      	beq.n	8008606 <USBD_StdEPReq+0x90>
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b80      	cmp	r3, #128	; 0x80
 80085ee:	d00a      	beq.n	8008606 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80085f0:	7bbb      	ldrb	r3, [r7, #14]
 80085f2:	4619      	mov	r1, r3
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f001 f88b 	bl	8009710 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80085fa:	2180      	movs	r1, #128	; 0x80
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 f887 	bl	8009710 <USBD_LL_StallEP>
 8008602:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008604:	e020      	b.n	8008648 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f000 fc45 	bl	8008e98 <USBD_CtlError>
              break;
 800860e:	e01b      	b.n	8008648 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	885b      	ldrh	r3, [r3, #2]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d10e      	bne.n	8008636 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d00b      	beq.n	8008636 <USBD_StdEPReq+0xc0>
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b80      	cmp	r3, #128	; 0x80
 8008622:	d008      	beq.n	8008636 <USBD_StdEPReq+0xc0>
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	88db      	ldrh	r3, [r3, #6]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d104      	bne.n	8008636 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800862c:	7bbb      	ldrb	r3, [r7, #14]
 800862e:	4619      	mov	r1, r3
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f001 f86d 	bl	8009710 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 fcf9 	bl	800902e <USBD_CtlSendStatus>

              break;
 800863c:	e004      	b.n	8008648 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800863e:	6839      	ldr	r1, [r7, #0]
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 fc29 	bl	8008e98 <USBD_CtlError>
              break;
 8008646:	bf00      	nop
          }
          break;
 8008648:	e0ec      	b.n	8008824 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b02      	cmp	r3, #2
 8008654:	d002      	beq.n	800865c <USBD_StdEPReq+0xe6>
 8008656:	2b03      	cmp	r3, #3
 8008658:	d016      	beq.n	8008688 <USBD_StdEPReq+0x112>
 800865a:	e030      	b.n	80086be <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800865c:	7bbb      	ldrb	r3, [r7, #14]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00d      	beq.n	800867e <USBD_StdEPReq+0x108>
 8008662:	7bbb      	ldrb	r3, [r7, #14]
 8008664:	2b80      	cmp	r3, #128	; 0x80
 8008666:	d00a      	beq.n	800867e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008668:	7bbb      	ldrb	r3, [r7, #14]
 800866a:	4619      	mov	r1, r3
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	f001 f84f 	bl	8009710 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008672:	2180      	movs	r1, #128	; 0x80
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f001 f84b 	bl	8009710 <USBD_LL_StallEP>
 800867a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800867c:	e025      	b.n	80086ca <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800867e:	6839      	ldr	r1, [r7, #0]
 8008680:	6878      	ldr	r0, [r7, #4]
 8008682:	f000 fc09 	bl	8008e98 <USBD_CtlError>
              break;
 8008686:	e020      	b.n	80086ca <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	885b      	ldrh	r3, [r3, #2]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d11b      	bne.n	80086c8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008690:	7bbb      	ldrb	r3, [r7, #14]
 8008692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008696:	2b00      	cmp	r3, #0
 8008698:	d004      	beq.n	80086a4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	4619      	mov	r1, r3
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f001 f855 	bl	800974e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fcc2 	bl	800902e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	6839      	ldr	r1, [r7, #0]
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	4798      	blx	r3
 80086b8:	4603      	mov	r3, r0
 80086ba:	73fb      	strb	r3, [r7, #15]
              }
              break;
 80086bc:	e004      	b.n	80086c8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 80086be:	6839      	ldr	r1, [r7, #0]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 fbe9 	bl	8008e98 <USBD_CtlError>
              break;
 80086c6:	e000      	b.n	80086ca <USBD_StdEPReq+0x154>
              break;
 80086c8:	bf00      	nop
          }
          break;
 80086ca:	e0ab      	b.n	8008824 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086d2:	b2db      	uxtb	r3, r3
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	d002      	beq.n	80086de <USBD_StdEPReq+0x168>
 80086d8:	2b03      	cmp	r3, #3
 80086da:	d032      	beq.n	8008742 <USBD_StdEPReq+0x1cc>
 80086dc:	e097      	b.n	800880e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d007      	beq.n	80086f4 <USBD_StdEPReq+0x17e>
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
 80086e6:	2b80      	cmp	r3, #128	; 0x80
 80086e8:	d004      	beq.n	80086f4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 80086ea:	6839      	ldr	r1, [r7, #0]
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fbd3 	bl	8008e98 <USBD_CtlError>
                break;
 80086f2:	e091      	b.n	8008818 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	da0b      	bge.n	8008714 <USBD_StdEPReq+0x19e>
 80086fc:	7bbb      	ldrb	r3, [r7, #14]
 80086fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008702:	4613      	mov	r3, r2
 8008704:	009b      	lsls	r3, r3, #2
 8008706:	4413      	add	r3, r2
 8008708:	009b      	lsls	r3, r3, #2
 800870a:	3310      	adds	r3, #16
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	4413      	add	r3, r2
 8008710:	3304      	adds	r3, #4
 8008712:	e00b      	b.n	800872c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800871a:	4613      	mov	r3, r2
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	4413      	add	r3, r2
 8008720:	009b      	lsls	r3, r3, #2
 8008722:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	4413      	add	r3, r2
 800872a:	3304      	adds	r3, #4
 800872c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	2200      	movs	r2, #0
 8008732:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2202      	movs	r2, #2
 8008738:	4619      	mov	r1, r3
 800873a:	6878      	ldr	r0, [r7, #4]
 800873c:	f000 fc1d 	bl	8008f7a <USBD_CtlSendData>
              break;
 8008740:	e06a      	b.n	8008818 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008742:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008746:	2b00      	cmp	r3, #0
 8008748:	da11      	bge.n	800876e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	f003 020f 	and.w	r2, r3, #15
 8008750:	6879      	ldr	r1, [r7, #4]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	3324      	adds	r3, #36	; 0x24
 800875e:	881b      	ldrh	r3, [r3, #0]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d117      	bne.n	8008794 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fb96 	bl	8008e98 <USBD_CtlError>
                  break;
 800876c:	e054      	b.n	8008818 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800876e:	7bbb      	ldrb	r3, [r7, #14]
 8008770:	f003 020f 	and.w	r2, r3, #15
 8008774:	6879      	ldr	r1, [r7, #4]
 8008776:	4613      	mov	r3, r2
 8008778:	009b      	lsls	r3, r3, #2
 800877a:	4413      	add	r3, r2
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	440b      	add	r3, r1
 8008780:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008784:	881b      	ldrh	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d104      	bne.n	8008794 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800878a:	6839      	ldr	r1, [r7, #0]
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fb83 	bl	8008e98 <USBD_CtlError>
                  break;
 8008792:	e041      	b.n	8008818 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008794:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008798:	2b00      	cmp	r3, #0
 800879a:	da0b      	bge.n	80087b4 <USBD_StdEPReq+0x23e>
 800879c:	7bbb      	ldrb	r3, [r7, #14]
 800879e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80087a2:	4613      	mov	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	4413      	add	r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	3310      	adds	r3, #16
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	3304      	adds	r3, #4
 80087b2:	e00b      	b.n	80087cc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80087b4:	7bbb      	ldrb	r3, [r7, #14]
 80087b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80087ba:	4613      	mov	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	4413      	add	r3, r2
 80087c0:	009b      	lsls	r3, r3, #2
 80087c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	3304      	adds	r3, #4
 80087cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <USBD_StdEPReq+0x264>
 80087d4:	7bbb      	ldrb	r3, [r7, #14]
 80087d6:	2b80      	cmp	r3, #128	; 0x80
 80087d8:	d103      	bne.n	80087e2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2200      	movs	r2, #0
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e00e      	b.n	8008800 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80087e2:	7bbb      	ldrb	r3, [r7, #14]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 ffd0 	bl	800978c <USBD_LL_IsStallEP>
 80087ec:	4603      	mov	r3, r0
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	2201      	movs	r2, #1
 80087f6:	601a      	str	r2, [r3, #0]
 80087f8:	e002      	b.n	8008800 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	2202      	movs	r2, #2
 8008804:	4619      	mov	r1, r3
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fbb7 	bl	8008f7a <USBD_CtlSendData>
              break;
 800880c:	e004      	b.n	8008818 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800880e:	6839      	ldr	r1, [r7, #0]
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 fb41 	bl	8008e98 <USBD_CtlError>
              break;
 8008816:	bf00      	nop
          }
          break;
 8008818:	e004      	b.n	8008824 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800881a:	6839      	ldr	r1, [r7, #0]
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	f000 fb3b 	bl	8008e98 <USBD_CtlError>
          break;
 8008822:	bf00      	nop
      }
      break;
 8008824:	e004      	b.n	8008830 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8008826:	6839      	ldr	r1, [r7, #0]
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 fb35 	bl	8008e98 <USBD_CtlError>
      break;
 800882e:	bf00      	nop
  }

  return ret;
 8008830:	7bfb      	ldrb	r3, [r7, #15]
}
 8008832:	4618      	mov	r0, r3
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b084      	sub	sp, #16
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008846:	2300      	movs	r3, #0
 8008848:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800884e:	2300      	movs	r3, #0
 8008850:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	885b      	ldrh	r3, [r3, #2]
 8008856:	0a1b      	lsrs	r3, r3, #8
 8008858:	b29b      	uxth	r3, r3
 800885a:	3b01      	subs	r3, #1
 800885c:	2b06      	cmp	r3, #6
 800885e:	f200 8128 	bhi.w	8008ab2 <USBD_GetDescriptor+0x276>
 8008862:	a201      	add	r2, pc, #4	; (adr r2, 8008868 <USBD_GetDescriptor+0x2c>)
 8008864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008868:	08008885 	.word	0x08008885
 800886c:	0800889d 	.word	0x0800889d
 8008870:	080088dd 	.word	0x080088dd
 8008874:	08008ab3 	.word	0x08008ab3
 8008878:	08008ab3 	.word	0x08008ab3
 800887c:	08008a53 	.word	0x08008a53
 8008880:	08008a7f 	.word	0x08008a7f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	7c12      	ldrb	r2, [r2, #16]
 8008890:	f107 0108 	add.w	r1, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
      break;
 800889a:	e112      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	7c1b      	ldrb	r3, [r3, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d10d      	bne.n	80088c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	f107 0208 	add.w	r2, r7, #8
 80088b0:	4610      	mov	r0, r2
 80088b2:	4798      	blx	r3
 80088b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	2202      	movs	r2, #2
 80088bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80088be:	e100      	b.n	8008ac2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c8:	f107 0208 	add.w	r2, r7, #8
 80088cc:	4610      	mov	r0, r2
 80088ce:	4798      	blx	r3
 80088d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	3301      	adds	r3, #1
 80088d6:	2202      	movs	r2, #2
 80088d8:	701a      	strb	r2, [r3, #0]
      break;
 80088da:	e0f2      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	885b      	ldrh	r3, [r3, #2]
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b05      	cmp	r3, #5
 80088e4:	f200 80ac 	bhi.w	8008a40 <USBD_GetDescriptor+0x204>
 80088e8:	a201      	add	r2, pc, #4	; (adr r2, 80088f0 <USBD_GetDescriptor+0xb4>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008909 	.word	0x08008909
 80088f4:	0800893d 	.word	0x0800893d
 80088f8:	08008971 	.word	0x08008971
 80088fc:	080089a5 	.word	0x080089a5
 8008900:	080089d9 	.word	0x080089d9
 8008904:	08008a0d 	.word	0x08008a0d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d00b      	beq.n	800892c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891a:	685b      	ldr	r3, [r3, #4]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	7c12      	ldrb	r2, [r2, #16]
 8008920:	f107 0108 	add.w	r1, r7, #8
 8008924:	4610      	mov	r0, r2
 8008926:	4798      	blx	r3
 8008928:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800892a:	e091      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800892c:	6839      	ldr	r1, [r7, #0]
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 fab2 	bl	8008e98 <USBD_CtlError>
            err++;
 8008934:	7afb      	ldrb	r3, [r7, #11]
 8008936:	3301      	adds	r3, #1
 8008938:	72fb      	strb	r3, [r7, #11]
          break;
 800893a:	e089      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008942:	689b      	ldr	r3, [r3, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00b      	beq.n	8008960 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	7c12      	ldrb	r2, [r2, #16]
 8008954:	f107 0108 	add.w	r1, r7, #8
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800895e:	e077      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008960:	6839      	ldr	r1, [r7, #0]
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f000 fa98 	bl	8008e98 <USBD_CtlError>
            err++;
 8008968:	7afb      	ldrb	r3, [r7, #11]
 800896a:	3301      	adds	r3, #1
 800896c:	72fb      	strb	r3, [r7, #11]
          break;
 800896e:	e06f      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008976:	68db      	ldr	r3, [r3, #12]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00b      	beq.n	8008994 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	7c12      	ldrb	r2, [r2, #16]
 8008988:	f107 0108 	add.w	r1, r7, #8
 800898c:	4610      	mov	r0, r2
 800898e:	4798      	blx	r3
 8008990:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008992:	e05d      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 fa7e 	bl	8008e98 <USBD_CtlError>
            err++;
 800899c:	7afb      	ldrb	r3, [r7, #11]
 800899e:	3301      	adds	r3, #1
 80089a0:	72fb      	strb	r3, [r7, #11]
          break;
 80089a2:	e055      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089b6:	691b      	ldr	r3, [r3, #16]
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	7c12      	ldrb	r2, [r2, #16]
 80089bc:	f107 0108 	add.w	r1, r7, #8
 80089c0:	4610      	mov	r0, r2
 80089c2:	4798      	blx	r3
 80089c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089c6:	e043      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089c8:	6839      	ldr	r1, [r7, #0]
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa64 	bl	8008e98 <USBD_CtlError>
            err++;
 80089d0:	7afb      	ldrb	r3, [r7, #11]
 80089d2:	3301      	adds	r3, #1
 80089d4:	72fb      	strb	r3, [r7, #11]
          break;
 80089d6:	e03b      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089de:	695b      	ldr	r3, [r3, #20]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d00b      	beq.n	80089fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80089ea:	695b      	ldr	r3, [r3, #20]
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	7c12      	ldrb	r2, [r2, #16]
 80089f0:	f107 0108 	add.w	r1, r7, #8
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80089fa:	e029      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80089fc:	6839      	ldr	r1, [r7, #0]
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 fa4a 	bl	8008e98 <USBD_CtlError>
            err++;
 8008a04:	7afb      	ldrb	r3, [r7, #11]
 8008a06:	3301      	adds	r3, #1
 8008a08:	72fb      	strb	r3, [r7, #11]
          break;
 8008a0a:	e021      	b.n	8008a50 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00b      	beq.n	8008a30 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a1e:	699b      	ldr	r3, [r3, #24]
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	7c12      	ldrb	r2, [r2, #16]
 8008a24:	f107 0108 	add.w	r1, r7, #8
 8008a28:	4610      	mov	r0, r2
 8008a2a:	4798      	blx	r3
 8008a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008a2e:	e00f      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fa30 	bl	8008e98 <USBD_CtlError>
            err++;
 8008a38:	7afb      	ldrb	r3, [r7, #11]
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8008a3e:	e007      	b.n	8008a50 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fa28 	bl	8008e98 <USBD_CtlError>
          err++;
 8008a48:	7afb      	ldrb	r3, [r7, #11]
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8008a4e:	bf00      	nop
      }
      break;
 8008a50:	e037      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7c1b      	ldrb	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d109      	bne.n	8008a6e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a62:	f107 0208 	add.w	r2, r7, #8
 8008a66:	4610      	mov	r0, r2
 8008a68:	4798      	blx	r3
 8008a6a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008a6c:	e029      	b.n	8008ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 fa11 	bl	8008e98 <USBD_CtlError>
        err++;
 8008a76:	7afb      	ldrb	r3, [r7, #11]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008a7c:	e021      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	7c1b      	ldrb	r3, [r3, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d10d      	bne.n	8008aa2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a8e:	f107 0208 	add.w	r2, r7, #8
 8008a92:	4610      	mov	r0, r2
 8008a94:	4798      	blx	r3
 8008a96:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	2207      	movs	r2, #7
 8008a9e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008aa0:	e00f      	b.n	8008ac2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f000 f9f7 	bl	8008e98 <USBD_CtlError>
        err++;
 8008aaa:	7afb      	ldrb	r3, [r7, #11]
 8008aac:	3301      	adds	r3, #1
 8008aae:	72fb      	strb	r3, [r7, #11]
      break;
 8008ab0:	e007      	b.n	8008ac2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008ab2:	6839      	ldr	r1, [r7, #0]
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 f9ef 	bl	8008e98 <USBD_CtlError>
      err++;
 8008aba:	7afb      	ldrb	r3, [r7, #11]
 8008abc:	3301      	adds	r3, #1
 8008abe:	72fb      	strb	r3, [r7, #11]
      break;
 8008ac0:	bf00      	nop
  }

  if (err != 0U)
 8008ac2:	7afb      	ldrb	r3, [r7, #11]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d11e      	bne.n	8008b06 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	88db      	ldrh	r3, [r3, #6]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d016      	beq.n	8008afe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008ad0:	893b      	ldrh	r3, [r7, #8]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00e      	beq.n	8008af4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	88da      	ldrh	r2, [r3, #6]
 8008ada:	893b      	ldrh	r3, [r7, #8]
 8008adc:	4293      	cmp	r3, r2
 8008ade:	bf28      	it	cs
 8008ae0:	4613      	movcs	r3, r2
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008ae6:	893b      	ldrh	r3, [r7, #8]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	68f9      	ldr	r1, [r7, #12]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fa44 	bl	8008f7a <USBD_CtlSendData>
 8008af2:	e009      	b.n	8008b08 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f9ce 	bl	8008e98 <USBD_CtlError>
 8008afc:	e004      	b.n	8008b08 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f000 fa95 	bl	800902e <USBD_CtlSendStatus>
 8008b04:	e000      	b.n	8008b08 <USBD_GetDescriptor+0x2cc>
    return;
 8008b06:	bf00      	nop
  }
}
 8008b08:	3710      	adds	r7, #16
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}
 8008b0e:	bf00      	nop

08008b10 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	889b      	ldrh	r3, [r3, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d131      	bne.n	8008b86 <USBD_SetAddress+0x76>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d12d      	bne.n	8008b86 <USBD_SetAddress+0x76>
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	885b      	ldrh	r3, [r3, #2]
 8008b2e:	2b7f      	cmp	r3, #127	; 0x7f
 8008b30:	d829      	bhi.n	8008b86 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	885b      	ldrh	r3, [r3, #2]
 8008b36:	b2db      	uxtb	r3, r3
 8008b38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b3c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	2b03      	cmp	r3, #3
 8008b48:	d104      	bne.n	8008b54 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 f9a3 	bl	8008e98 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b52:	e01d      	b.n	8008b90 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	7bfa      	ldrb	r2, [r7, #15]
 8008b58:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fe3f 	bl	80097e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fa61 	bl	800902e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b6c:	7bfb      	ldrb	r3, [r7, #15]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d004      	beq.n	8008b7c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2202      	movs	r2, #2
 8008b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b7a:	e009      	b.n	8008b90 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	2201      	movs	r2, #1
 8008b80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b84:	e004      	b.n	8008b90 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b86:	6839      	ldr	r1, [r7, #0]
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f000 f985 	bl	8008e98 <USBD_CtlError>
  }
}
 8008b8e:	bf00      	nop
 8008b90:	bf00      	nop
 8008b92:	3710      	adds	r7, #16
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}

08008b98 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b98:	b580      	push	{r7, lr}
 8008b9a:	b084      	sub	sp, #16
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	4b4c      	ldr	r3, [pc, #304]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008bae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008bb0:	4b4b      	ldr	r3, [pc, #300]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d905      	bls.n	8008bc4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008bb8:	6839      	ldr	r1, [r7, #0]
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f000 f96c 	bl	8008e98 <USBD_CtlError>
    return USBD_FAIL;
 8008bc0:	2303      	movs	r3, #3
 8008bc2:	e088      	b.n	8008cd6 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	d002      	beq.n	8008bd6 <USBD_SetConfig+0x3e>
 8008bd0:	2b03      	cmp	r3, #3
 8008bd2:	d025      	beq.n	8008c20 <USBD_SetConfig+0x88>
 8008bd4:	e071      	b.n	8008cba <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008bd6:	4b42      	ldr	r3, [pc, #264]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d01c      	beq.n	8008c18 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8008bde:	4b40      	ldr	r3, [pc, #256]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	461a      	mov	r2, r3
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008be8:	4b3d      	ldr	r3, [pc, #244]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	4619      	mov	r1, r3
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f7ff f949 	bl	8007e86 <USBD_SetClassConfig>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008bf8:	7bfb      	ldrb	r3, [r7, #15]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d004      	beq.n	8008c08 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f949 	bl	8008e98 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c06:	e065      	b.n	8008cd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008c08:	6878      	ldr	r0, [r7, #4]
 8008c0a:	f000 fa10 	bl	800902e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2203      	movs	r2, #3
 8008c12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008c16:	e05d      	b.n	8008cd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa08 	bl	800902e <USBD_CtlSendStatus>
      break;
 8008c1e:	e059      	b.n	8008cd4 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008c20:	4b2f      	ldr	r3, [pc, #188]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008c22:	781b      	ldrb	r3, [r3, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d112      	bne.n	8008c4e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2202      	movs	r2, #2
 8008c2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008c30:	4b2b      	ldr	r3, [pc, #172]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	461a      	mov	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c3a:	4b29      	ldr	r3, [pc, #164]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008c3c:	781b      	ldrb	r3, [r3, #0]
 8008c3e:	4619      	mov	r1, r3
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff f93c 	bl	8007ebe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 f9f1 	bl	800902e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008c4c:	e042      	b.n	8008cd4 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8008c4e:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008c50:	781b      	ldrb	r3, [r3, #0]
 8008c52:	461a      	mov	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	685b      	ldr	r3, [r3, #4]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d02a      	beq.n	8008cb2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7ff f92a 	bl	8007ebe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008c74:	4b1a      	ldr	r3, [pc, #104]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f7ff f903 	bl	8007e86 <USBD_SetClassConfig>
 8008c80:	4603      	mov	r3, r0
 8008c82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008c84:	7bfb      	ldrb	r3, [r7, #15]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00f      	beq.n	8008caa <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8008c8a:	6839      	ldr	r1, [r7, #0]
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 f903 	bl	8008e98 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	685b      	ldr	r3, [r3, #4]
 8008c96:	b2db      	uxtb	r3, r3
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f7ff f90f 	bl	8007ebe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008ca8:	e014      	b.n	8008cd4 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 f9bf 	bl	800902e <USBD_CtlSendStatus>
      break;
 8008cb0:	e010      	b.n	8008cd4 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 f9bb 	bl	800902e <USBD_CtlSendStatus>
      break;
 8008cb8:	e00c      	b.n	8008cd4 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 f8eb 	bl	8008e98 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008cc2:	4b07      	ldr	r3, [pc, #28]	; (8008ce0 <USBD_SetConfig+0x148>)
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f7ff f8f8 	bl	8007ebe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008cd2:	bf00      	nop
  }

  return ret;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	2000021f 	.word	0x2000021f

08008ce4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b082      	sub	sp, #8
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	88db      	ldrh	r3, [r3, #6]
 8008cf2:	2b01      	cmp	r3, #1
 8008cf4:	d004      	beq.n	8008d00 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f8cd 	bl	8008e98 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008cfe:	e023      	b.n	8008d48 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d06:	b2db      	uxtb	r3, r3
 8008d08:	2b02      	cmp	r3, #2
 8008d0a:	dc02      	bgt.n	8008d12 <USBD_GetConfig+0x2e>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	dc03      	bgt.n	8008d18 <USBD_GetConfig+0x34>
 8008d10:	e015      	b.n	8008d3e <USBD_GetConfig+0x5a>
 8008d12:	2b03      	cmp	r3, #3
 8008d14:	d00b      	beq.n	8008d2e <USBD_GetConfig+0x4a>
 8008d16:	e012      	b.n	8008d3e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	3308      	adds	r3, #8
 8008d22:	2201      	movs	r2, #1
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f927 	bl	8008f7a <USBD_CtlSendData>
        break;
 8008d2c:	e00c      	b.n	8008d48 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3304      	adds	r3, #4
 8008d32:	2201      	movs	r2, #1
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f91f 	bl	8008f7a <USBD_CtlSendData>
        break;
 8008d3c:	e004      	b.n	8008d48 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f8a9 	bl	8008e98 <USBD_CtlError>
        break;
 8008d46:	bf00      	nop
}
 8008d48:	bf00      	nop
 8008d4a:	3708      	adds	r7, #8
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}

08008d50 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	3b01      	subs	r3, #1
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d81e      	bhi.n	8008da6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	88db      	ldrh	r3, [r3, #6]
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	d004      	beq.n	8008d7a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008d70:	6839      	ldr	r1, [r7, #0]
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 f890 	bl	8008e98 <USBD_CtlError>
        break;
 8008d78:	e01a      	b.n	8008db0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	330c      	adds	r3, #12
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 f8eb 	bl	8008f7a <USBD_CtlSendData>
      break;
 8008da4:	e004      	b.n	8008db0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008da6:	6839      	ldr	r1, [r7, #0]
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f875 	bl	8008e98 <USBD_CtlError>
      break;
 8008dae:	bf00      	nop
  }
}
 8008db0:	bf00      	nop
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	885b      	ldrh	r3, [r3, #2]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	d106      	bne.n	8008dd8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f92b 	bl	800902e <USBD_CtlSendStatus>
  }
}
 8008dd8:	bf00      	nop
 8008dda:	3708      	adds	r7, #8
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
 8008de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	3b01      	subs	r3, #1
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d80b      	bhi.n	8008e10 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	885b      	ldrh	r3, [r3, #2]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d10c      	bne.n	8008e1a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f000 f910 	bl	800902e <USBD_CtlSendStatus>
      }
      break;
 8008e0e:	e004      	b.n	8008e1a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f840 	bl	8008e98 <USBD_CtlError>
      break;
 8008e18:	e000      	b.n	8008e1c <USBD_ClrFeature+0x3c>
      break;
 8008e1a:	bf00      	nop
  }
}
 8008e1c:	bf00      	nop
 8008e1e:	3708      	adds	r7, #8
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	781a      	ldrb	r2, [r3, #0]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	781a      	ldrb	r2, [r3, #0]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008e4e:	68f8      	ldr	r0, [r7, #12]
 8008e50:	f7ff fabc 	bl	80083cc <SWAPBYTE>
 8008e54:	4603      	mov	r3, r0
 8008e56:	461a      	mov	r2, r3
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	3301      	adds	r3, #1
 8008e66:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	f7ff faaf 	bl	80083cc <SWAPBYTE>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	461a      	mov	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008e82:	68f8      	ldr	r0, [r7, #12]
 8008e84:	f7ff faa2 	bl	80083cc <SWAPBYTE>
 8008e88:	4603      	mov	r3, r0
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	80da      	strh	r2, [r3, #6]
}
 8008e90:	bf00      	nop
 8008e92:	3710      	adds	r7, #16
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}

08008e98 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
 8008ea0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ea2:	2180      	movs	r1, #128	; 0x80
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fc33 	bl	8009710 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008eaa:	2100      	movs	r1, #0
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 fc2f 	bl	8009710 <USBD_LL_StallEP>
}
 8008eb2:	bf00      	nop
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b086      	sub	sp, #24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d036      	beq.n	8008f3e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ed4:	6938      	ldr	r0, [r7, #16]
 8008ed6:	f000 f836 	bl	8008f46 <USBD_GetLen>
 8008eda:	4603      	mov	r3, r0
 8008edc:	3301      	adds	r3, #1
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	005b      	lsls	r3, r3, #1
 8008ee2:	b29a      	uxth	r2, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008ee8:	7dfb      	ldrb	r3, [r7, #23]
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	4413      	add	r3, r2
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	7812      	ldrb	r2, [r2, #0]
 8008ef2:	701a      	strb	r2, [r3, #0]
  idx++;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
 8008ef6:	3301      	adds	r3, #1
 8008ef8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008efa:	7dfb      	ldrb	r3, [r7, #23]
 8008efc:	68ba      	ldr	r2, [r7, #8]
 8008efe:	4413      	add	r3, r2
 8008f00:	2203      	movs	r2, #3
 8008f02:	701a      	strb	r2, [r3, #0]
  idx++;
 8008f04:	7dfb      	ldrb	r3, [r7, #23]
 8008f06:	3301      	adds	r3, #1
 8008f08:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008f0a:	e013      	b.n	8008f34 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008f0c:	7dfb      	ldrb	r3, [r7, #23]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	4413      	add	r3, r2
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	7812      	ldrb	r2, [r2, #0]
 8008f16:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	613b      	str	r3, [r7, #16]
    idx++;
 8008f1e:	7dfb      	ldrb	r3, [r7, #23]
 8008f20:	3301      	adds	r3, #1
 8008f22:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008f24:	7dfb      	ldrb	r3, [r7, #23]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	4413      	add	r3, r2
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	701a      	strb	r2, [r3, #0]
    idx++;
 8008f2e:	7dfb      	ldrb	r3, [r7, #23]
 8008f30:	3301      	adds	r3, #1
 8008f32:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d1e7      	bne.n	8008f0c <USBD_GetString+0x52>
 8008f3c:	e000      	b.n	8008f40 <USBD_GetString+0x86>
    return;
 8008f3e:	bf00      	nop
  }
}
 8008f40:	3718      	adds	r7, #24
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b085      	sub	sp, #20
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008f56:	e005      	b.n	8008f64 <USBD_GetLen+0x1e>
  {
    len++;
 8008f58:	7bfb      	ldrb	r3, [r7, #15]
 8008f5a:	3301      	adds	r3, #1
 8008f5c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	3301      	adds	r3, #1
 8008f62:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	781b      	ldrb	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1f5      	bne.n	8008f58 <USBD_GetLen+0x12>
  }

  return len;
 8008f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f6e:	4618      	mov	r0, r3
 8008f70:	3714      	adds	r7, #20
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2202      	movs	r2, #2
 8008f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	687a      	ldr	r2, [r7, #4]
 8008f92:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	687a      	ldr	r2, [r7, #4]
 8008f98:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	68ba      	ldr	r2, [r7, #8]
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	68f8      	ldr	r0, [r7, #12]
 8008fa2:	f000 fc3e 	bl	8009822 <USBD_LL_Transmit>

  return USBD_OK;
 8008fa6:	2300      	movs	r3, #0
}
 8008fa8:	4618      	mov	r0, r3
 8008faa:	3710      	adds	r7, #16
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}

08008fb0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	60f8      	str	r0, [r7, #12]
 8008fb8:	60b9      	str	r1, [r7, #8]
 8008fba:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f000 fc2d 	bl	8009822 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b084      	sub	sp, #16
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	60f8      	str	r0, [r7, #12]
 8008fda:	60b9      	str	r1, [r7, #8]
 8008fdc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2203      	movs	r2, #3
 8008fe2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68ba      	ldr	r2, [r7, #8]
 8008ffa:	2100      	movs	r1, #0
 8008ffc:	68f8      	ldr	r0, [r7, #12]
 8008ffe:	f000 fc31 	bl	8009864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	60f8      	str	r0, [r7, #12]
 8009014:	60b9      	str	r1, [r7, #8]
 8009016:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	2100      	movs	r1, #0
 800901e:	68f8      	ldr	r0, [r7, #12]
 8009020:	f000 fc20 	bl	8009864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2204      	movs	r2, #4
 800903a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800903e:	2300      	movs	r3, #0
 8009040:	2200      	movs	r2, #0
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fbec 	bl	8009822 <USBD_LL_Transmit>

  return USBD_OK;
 800904a:	2300      	movs	r3, #0
}
 800904c:	4618      	mov	r0, r3
 800904e:	3708      	adds	r7, #8
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2205      	movs	r2, #5
 8009060:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009064:	2300      	movs	r3, #0
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fbfa 	bl	8009864 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009070:	2300      	movs	r3, #0
}
 8009072:	4618      	mov	r0, r3
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
	...

0800907c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009080:	2200      	movs	r2, #0
 8009082:	4912      	ldr	r1, [pc, #72]	; (80090cc <MX_USB_DEVICE_Init+0x50>)
 8009084:	4812      	ldr	r0, [pc, #72]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 8009086:	f7fe fe90 	bl	8007daa <USBD_Init>
 800908a:	4603      	mov	r3, r0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d001      	beq.n	8009094 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009090:	f7f9 f9b8 	bl	8002404 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009094:	490f      	ldr	r1, [pc, #60]	; (80090d4 <MX_USB_DEVICE_Init+0x58>)
 8009096:	480e      	ldr	r0, [pc, #56]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 8009098:	f7fe feb7 	bl	8007e0a <USBD_RegisterClass>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80090a2:	f7f9 f9af 	bl	8002404 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80090a6:	490c      	ldr	r1, [pc, #48]	; (80090d8 <MX_USB_DEVICE_Init+0x5c>)
 80090a8:	4809      	ldr	r0, [pc, #36]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 80090aa:	f7fe fe69 	bl	8007d80 <USBD_CUSTOM_HID_RegisterInterface>
 80090ae:	4603      	mov	r3, r0
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80090b4:	f7f9 f9a6 	bl	8002404 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80090b8:	4805      	ldr	r0, [pc, #20]	; (80090d0 <MX_USB_DEVICE_Init+0x54>)
 80090ba:	f7fe fecd 	bl	8007e58 <USBD_Start>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d001      	beq.n	80090c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80090c4:	f7f9 f99e 	bl	8002404 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80090c8:	bf00      	nop
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	2000013c 	.word	0x2000013c
 80090d0:	2000039c 	.word	0x2000039c
 80090d4:	20000034 	.word	0x20000034
 80090d8:	2000012c 	.word	0x2000012c

080090dc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80090dc:	b480      	push	{r7}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80090e0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80090f0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b082      	sub	sp, #8
 8009100:	af00      	add	r7, sp, #0
 8009102:	4603      	mov	r3, r0
 8009104:	460a      	mov	r2, r1
 8009106:	71fb      	strb	r3, [r7, #7]
 8009108:	4613      	mov	r3, r2
 800910a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 800910c:	4803      	ldr	r0, [pc, #12]	; (800911c <CUSTOM_HID_OutEvent_FS+0x20>)
 800910e:	f7fe fdea 	bl	8007ce6 <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 8009112:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009114:	4618      	mov	r0, r3
 8009116:	3708      	adds	r7, #8
 8009118:	46bd      	mov	sp, r7
 800911a:	bd80      	pop	{r7, pc}
 800911c:	2000039c 	.word	0x2000039c

08009120 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	2212      	movs	r2, #18
 8009130:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009132:	4b03      	ldr	r3, [pc, #12]	; (8009140 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	20000158 	.word	0x20000158

08009144 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	2204      	movs	r2, #4
 8009154:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009156:	4b03      	ldr	r3, [pc, #12]	; (8009164 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009158:	4618      	mov	r0, r3
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	2000016c 	.word	0x2000016c

08009168 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
 800916e:	4603      	mov	r3, r0
 8009170:	6039      	str	r1, [r7, #0]
 8009172:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	4907      	ldr	r1, [pc, #28]	; (800919c <USBD_FS_ProductStrDescriptor+0x34>)
 800917e:	4808      	ldr	r0, [pc, #32]	; (80091a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009180:	f7ff fe9b 	bl	8008eba <USBD_GetString>
 8009184:	e004      	b.n	8009190 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	4904      	ldr	r1, [pc, #16]	; (800919c <USBD_FS_ProductStrDescriptor+0x34>)
 800918a:	4805      	ldr	r0, [pc, #20]	; (80091a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800918c:	f7ff fe95 	bl	8008eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009190:	4b02      	ldr	r3, [pc, #8]	; (800919c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	2000066c 	.word	0x2000066c
 80091a0:	0800bb58 	.word	0x0800bb58

080091a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	6039      	str	r1, [r7, #0]
 80091ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80091b0:	683a      	ldr	r2, [r7, #0]
 80091b2:	4904      	ldr	r1, [pc, #16]	; (80091c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80091b4:	4804      	ldr	r0, [pc, #16]	; (80091c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80091b6:	f7ff fe80 	bl	8008eba <USBD_GetString>
  return USBD_StrDesc;
 80091ba:	4b02      	ldr	r3, [pc, #8]	; (80091c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80091bc:	4618      	mov	r0, r3
 80091be:	3708      	adds	r7, #8
 80091c0:	46bd      	mov	sp, r7
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	2000066c 	.word	0x2000066c
 80091c8:	0800bb78 	.word	0x0800bb78

080091cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	4603      	mov	r3, r0
 80091d4:	6039      	str	r1, [r7, #0]
 80091d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	221a      	movs	r2, #26
 80091dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80091de:	f000 f843 	bl	8009268 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80091e2:	4b02      	ldr	r3, [pc, #8]	; (80091ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000170 	.word	0x20000170

080091f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b082      	sub	sp, #8
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	4603      	mov	r3, r0
 80091f8:	6039      	str	r1, [r7, #0]
 80091fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d105      	bne.n	800920e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	4907      	ldr	r1, [pc, #28]	; (8009224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009206:	4808      	ldr	r0, [pc, #32]	; (8009228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009208:	f7ff fe57 	bl	8008eba <USBD_GetString>
 800920c:	e004      	b.n	8009218 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800920e:	683a      	ldr	r2, [r7, #0]
 8009210:	4904      	ldr	r1, [pc, #16]	; (8009224 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009212:	4805      	ldr	r0, [pc, #20]	; (8009228 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009214:	f7ff fe51 	bl	8008eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009218:	4b02      	ldr	r3, [pc, #8]	; (8009224 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800921a:	4618      	mov	r0, r3
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	2000066c 	.word	0x2000066c
 8009228:	0800bb8c 	.word	0x0800bb8c

0800922c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	6039      	str	r1, [r7, #0]
 8009236:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009238:	79fb      	ldrb	r3, [r7, #7]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d105      	bne.n	800924a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800923e:	683a      	ldr	r2, [r7, #0]
 8009240:	4907      	ldr	r1, [pc, #28]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009242:	4808      	ldr	r0, [pc, #32]	; (8009264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009244:	f7ff fe39 	bl	8008eba <USBD_GetString>
 8009248:	e004      	b.n	8009254 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	4904      	ldr	r1, [pc, #16]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800924e:	4805      	ldr	r0, [pc, #20]	; (8009264 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009250:	f7ff fe33 	bl	8008eba <USBD_GetString>
  }
  return USBD_StrDesc;
 8009254:	4b02      	ldr	r3, [pc, #8]	; (8009260 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009256:	4618      	mov	r0, r3
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	2000066c 	.word	0x2000066c
 8009264:	0800bba0 	.word	0x0800bba0

08009268 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800926e:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <Get_SerialNum+0x44>)
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009274:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <Get_SerialNum+0x48>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800927a:	4b0e      	ldr	r3, [pc, #56]	; (80092b4 <Get_SerialNum+0x4c>)
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009280:	68fa      	ldr	r2, [r7, #12]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4413      	add	r3, r2
 8009286:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d009      	beq.n	80092a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800928e:	2208      	movs	r2, #8
 8009290:	4909      	ldr	r1, [pc, #36]	; (80092b8 <Get_SerialNum+0x50>)
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	f000 f814 	bl	80092c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009298:	2204      	movs	r2, #4
 800929a:	4908      	ldr	r1, [pc, #32]	; (80092bc <Get_SerialNum+0x54>)
 800929c:	68b8      	ldr	r0, [r7, #8]
 800929e:	f000 f80f 	bl	80092c0 <IntToUnicode>
  }
}
 80092a2:	bf00      	nop
 80092a4:	3710      	adds	r7, #16
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	1fff7a10 	.word	0x1fff7a10
 80092b0:	1fff7a14 	.word	0x1fff7a14
 80092b4:	1fff7a18 	.word	0x1fff7a18
 80092b8:	20000172 	.word	0x20000172
 80092bc:	20000182 	.word	0x20000182

080092c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80092c0:	b480      	push	{r7}
 80092c2:	b087      	sub	sp, #28
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	60b9      	str	r1, [r7, #8]
 80092ca:	4613      	mov	r3, r2
 80092cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80092ce:	2300      	movs	r3, #0
 80092d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80092d2:	2300      	movs	r3, #0
 80092d4:	75fb      	strb	r3, [r7, #23]
 80092d6:	e027      	b.n	8009328 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	0f1b      	lsrs	r3, r3, #28
 80092dc:	2b09      	cmp	r3, #9
 80092de:	d80b      	bhi.n	80092f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	0f1b      	lsrs	r3, r3, #28
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	7dfb      	ldrb	r3, [r7, #23]
 80092e8:	005b      	lsls	r3, r3, #1
 80092ea:	4619      	mov	r1, r3
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	440b      	add	r3, r1
 80092f0:	3230      	adds	r2, #48	; 0x30
 80092f2:	b2d2      	uxtb	r2, r2
 80092f4:	701a      	strb	r2, [r3, #0]
 80092f6:	e00a      	b.n	800930e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	0f1b      	lsrs	r3, r3, #28
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	7dfb      	ldrb	r3, [r7, #23]
 8009300:	005b      	lsls	r3, r3, #1
 8009302:	4619      	mov	r1, r3
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	440b      	add	r3, r1
 8009308:	3237      	adds	r2, #55	; 0x37
 800930a:	b2d2      	uxtb	r2, r2
 800930c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	011b      	lsls	r3, r3, #4
 8009312:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009314:	7dfb      	ldrb	r3, [r7, #23]
 8009316:	005b      	lsls	r3, r3, #1
 8009318:	3301      	adds	r3, #1
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	4413      	add	r3, r2
 800931e:	2200      	movs	r2, #0
 8009320:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009322:	7dfb      	ldrb	r3, [r7, #23]
 8009324:	3301      	adds	r3, #1
 8009326:	75fb      	strb	r3, [r7, #23]
 8009328:	7dfa      	ldrb	r2, [r7, #23]
 800932a:	79fb      	ldrb	r3, [r7, #7]
 800932c:	429a      	cmp	r2, r3
 800932e:	d3d3      	bcc.n	80092d8 <IntToUnicode+0x18>
  }
}
 8009330:	bf00      	nop
 8009332:	bf00      	nop
 8009334:	371c      	adds	r7, #28
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
	...

08009340 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b08a      	sub	sp, #40	; 0x28
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009348:	f107 0314 	add.w	r3, r7, #20
 800934c:	2200      	movs	r2, #0
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	605a      	str	r2, [r3, #4]
 8009352:	609a      	str	r2, [r3, #8]
 8009354:	60da      	str	r2, [r3, #12]
 8009356:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009360:	d13a      	bne.n	80093d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009362:	2300      	movs	r3, #0
 8009364:	613b      	str	r3, [r7, #16]
 8009366:	4b1e      	ldr	r3, [pc, #120]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 8009368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800936a:	4a1d      	ldr	r2, [pc, #116]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 800936c:	f043 0301 	orr.w	r3, r3, #1
 8009370:	6313      	str	r3, [r2, #48]	; 0x30
 8009372:	4b1b      	ldr	r3, [pc, #108]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 8009374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	613b      	str	r3, [r7, #16]
 800937c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800937e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009384:	2302      	movs	r3, #2
 8009386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009388:	2300      	movs	r3, #0
 800938a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800938c:	2303      	movs	r3, #3
 800938e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009390:	230a      	movs	r3, #10
 8009392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009394:	f107 0314 	add.w	r3, r7, #20
 8009398:	4619      	mov	r1, r3
 800939a:	4812      	ldr	r0, [pc, #72]	; (80093e4 <HAL_PCD_MspInit+0xa4>)
 800939c:	f7f9 fb68 	bl	8002a70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80093a0:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 80093a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093a4:	4a0e      	ldr	r2, [pc, #56]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 80093a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093aa:	6353      	str	r3, [r2, #52]	; 0x34
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]
 80093b0:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 80093b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093b4:	4a0a      	ldr	r2, [pc, #40]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 80093b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093ba:	6453      	str	r3, [r2, #68]	; 0x44
 80093bc:	4b08      	ldr	r3, [pc, #32]	; (80093e0 <HAL_PCD_MspInit+0xa0>)
 80093be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093c4:	60fb      	str	r3, [r7, #12]
 80093c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093c8:	2200      	movs	r2, #0
 80093ca:	2100      	movs	r1, #0
 80093cc:	2043      	movs	r0, #67	; 0x43
 80093ce:	f7f9 fb18 	bl	8002a02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093d2:	2043      	movs	r0, #67	; 0x43
 80093d4:	f7f9 fb31 	bl	8002a3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093d8:	bf00      	nop
 80093da:	3728      	adds	r7, #40	; 0x28
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	40023800 	.word	0x40023800
 80093e4:	40020000 	.word	0x40020000

080093e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80093fc:	4619      	mov	r1, r3
 80093fe:	4610      	mov	r0, r2
 8009400:	f7fe fd75 	bl	8007eee <USBD_LL_SetupStage>
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	460b      	mov	r3, r1
 8009416:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800941e:	78fa      	ldrb	r2, [r7, #3]
 8009420:	6879      	ldr	r1, [r7, #4]
 8009422:	4613      	mov	r3, r2
 8009424:	00db      	lsls	r3, r3, #3
 8009426:	1a9b      	subs	r3, r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	440b      	add	r3, r1
 800942c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009430:	681a      	ldr	r2, [r3, #0]
 8009432:	78fb      	ldrb	r3, [r7, #3]
 8009434:	4619      	mov	r1, r3
 8009436:	f7fe fdaf 	bl	8007f98 <USBD_LL_DataOutStage>
}
 800943a:	bf00      	nop
 800943c:	3708      	adds	r7, #8
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009442:	b580      	push	{r7, lr}
 8009444:	b082      	sub	sp, #8
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
 800944a:	460b      	mov	r3, r1
 800944c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009454:	78fa      	ldrb	r2, [r7, #3]
 8009456:	6879      	ldr	r1, [r7, #4]
 8009458:	4613      	mov	r3, r2
 800945a:	00db      	lsls	r3, r3, #3
 800945c:	1a9b      	subs	r3, r3, r2
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	440b      	add	r3, r1
 8009462:	3348      	adds	r3, #72	; 0x48
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	78fb      	ldrb	r3, [r7, #3]
 8009468:	4619      	mov	r1, r3
 800946a:	f7fe fdf8 	bl	800805e <USBD_LL_DataInStage>
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b082      	sub	sp, #8
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009484:	4618      	mov	r0, r3
 8009486:	f7fe ff0c 	bl	80082a2 <USBD_LL_SOF>
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}

08009492 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009492:	b580      	push	{r7, lr}
 8009494:	b084      	sub	sp, #16
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800949a:	2301      	movs	r3, #1
 800949c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	2b02      	cmp	r3, #2
 80094a4:	d001      	beq.n	80094aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80094a6:	f7f8 ffad 	bl	8002404 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094b0:	7bfa      	ldrb	r2, [r7, #15]
 80094b2:	4611      	mov	r1, r2
 80094b4:	4618      	mov	r0, r3
 80094b6:	f7fe feb6 	bl	8008226 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7fe fe62 	bl	800818a <USBD_LL_Reset>
}
 80094c6:	bf00      	nop
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
	...

080094d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b082      	sub	sp, #8
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe feb1 	bl	8008246 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	6812      	ldr	r2, [r2, #0]
 80094f2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094f6:	f043 0301 	orr.w	r3, r3, #1
 80094fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a1b      	ldr	r3, [r3, #32]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009504:	4b04      	ldr	r3, [pc, #16]	; (8009518 <HAL_PCD_SuspendCallback+0x48>)
 8009506:	691b      	ldr	r3, [r3, #16]
 8009508:	4a03      	ldr	r2, [pc, #12]	; (8009518 <HAL_PCD_SuspendCallback+0x48>)
 800950a:	f043 0306 	orr.w	r3, r3, #6
 800950e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}
 8009518:	e000ed00 	.word	0xe000ed00

0800951c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b082      	sub	sp, #8
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800952a:	4618      	mov	r0, r3
 800952c:	f7fe fea1 	bl	8008272 <USBD_LL_Resume>
}
 8009530:	bf00      	nop
 8009532:	3708      	adds	r7, #8
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	460b      	mov	r3, r1
 8009542:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800954a:	78fa      	ldrb	r2, [r7, #3]
 800954c:	4611      	mov	r1, r2
 800954e:	4618      	mov	r0, r3
 8009550:	f7fe feef 	bl	8008332 <USBD_LL_IsoOUTIncomplete>
}
 8009554:	bf00      	nop
 8009556:	3708      	adds	r7, #8
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}

0800955c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b082      	sub	sp, #8
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800956e:	78fa      	ldrb	r2, [r7, #3]
 8009570:	4611      	mov	r1, r2
 8009572:	4618      	mov	r0, r3
 8009574:	f7fe feb7 	bl	80082e6 <USBD_LL_IsoINIncomplete>
}
 8009578:	bf00      	nop
 800957a:	3708      	adds	r7, #8
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b082      	sub	sp, #8
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800958e:	4618      	mov	r0, r3
 8009590:	f7fe fef5 	bl	800837e <USBD_LL_DevConnected>
}
 8009594:	bf00      	nop
 8009596:	3708      	adds	r7, #8
 8009598:	46bd      	mov	sp, r7
 800959a:	bd80      	pop	{r7, pc}

0800959c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b082      	sub	sp, #8
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fe fef2 	bl	8008394 <USBD_LL_DevDisconnected>
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	781b      	ldrb	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d13c      	bne.n	8009642 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095c8:	4a20      	ldr	r2, [pc, #128]	; (800964c <USBD_LL_Init+0x94>)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a1e      	ldr	r2, [pc, #120]	; (800964c <USBD_LL_Init+0x94>)
 80095d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095d8:	4b1c      	ldr	r3, [pc, #112]	; (800964c <USBD_LL_Init+0x94>)
 80095da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80095de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80095e0:	4b1a      	ldr	r3, [pc, #104]	; (800964c <USBD_LL_Init+0x94>)
 80095e2:	2204      	movs	r2, #4
 80095e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095e6:	4b19      	ldr	r3, [pc, #100]	; (800964c <USBD_LL_Init+0x94>)
 80095e8:	2202      	movs	r2, #2
 80095ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095ec:	4b17      	ldr	r3, [pc, #92]	; (800964c <USBD_LL_Init+0x94>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095f2:	4b16      	ldr	r3, [pc, #88]	; (800964c <USBD_LL_Init+0x94>)
 80095f4:	2202      	movs	r2, #2
 80095f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095f8:	4b14      	ldr	r3, [pc, #80]	; (800964c <USBD_LL_Init+0x94>)
 80095fa:	2200      	movs	r2, #0
 80095fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095fe:	4b13      	ldr	r3, [pc, #76]	; (800964c <USBD_LL_Init+0x94>)
 8009600:	2200      	movs	r2, #0
 8009602:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009604:	4b11      	ldr	r3, [pc, #68]	; (800964c <USBD_LL_Init+0x94>)
 8009606:	2200      	movs	r2, #0
 8009608:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800960a:	4b10      	ldr	r3, [pc, #64]	; (800964c <USBD_LL_Init+0x94>)
 800960c:	2200      	movs	r2, #0
 800960e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009610:	4b0e      	ldr	r3, [pc, #56]	; (800964c <USBD_LL_Init+0x94>)
 8009612:	2200      	movs	r2, #0
 8009614:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009616:	480d      	ldr	r0, [pc, #52]	; (800964c <USBD_LL_Init+0x94>)
 8009618:	f7fa fb5d 	bl	8003cd6 <HAL_PCD_Init>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009622:	f7f8 feef 	bl	8002404 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009626:	2180      	movs	r1, #128	; 0x80
 8009628:	4808      	ldr	r0, [pc, #32]	; (800964c <USBD_LL_Init+0x94>)
 800962a:	f7fb fca2 	bl	8004f72 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800962e:	2240      	movs	r2, #64	; 0x40
 8009630:	2100      	movs	r1, #0
 8009632:	4806      	ldr	r0, [pc, #24]	; (800964c <USBD_LL_Init+0x94>)
 8009634:	f7fb fc56 	bl	8004ee4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009638:	2280      	movs	r2, #128	; 0x80
 800963a:	2101      	movs	r1, #1
 800963c:	4803      	ldr	r0, [pc, #12]	; (800964c <USBD_LL_Init+0x94>)
 800963e:	f7fb fc51 	bl	8004ee4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3708      	adds	r7, #8
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	2000086c 	.word	0x2000086c

08009650 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009658:	2300      	movs	r3, #0
 800965a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800965c:	2300      	movs	r3, #0
 800965e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009666:	4618      	mov	r0, r3
 8009668:	f7fa fc52 	bl	8003f10 <HAL_PCD_Start>
 800966c:	4603      	mov	r3, r0
 800966e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009670:	7bfb      	ldrb	r3, [r7, #15]
 8009672:	4618      	mov	r0, r3
 8009674:	f000 f930 	bl	80098d8 <USBD_Get_USB_Status>
 8009678:	4603      	mov	r3, r0
 800967a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800967c:	7bbb      	ldrb	r3, [r7, #14]
}
 800967e:	4618      	mov	r0, r3
 8009680:	3710      	adds	r7, #16
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}

08009686 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009686:	b580      	push	{r7, lr}
 8009688:	b084      	sub	sp, #16
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
 800968e:	4608      	mov	r0, r1
 8009690:	4611      	mov	r1, r2
 8009692:	461a      	mov	r2, r3
 8009694:	4603      	mov	r3, r0
 8009696:	70fb      	strb	r3, [r7, #3]
 8009698:	460b      	mov	r3, r1
 800969a:	70bb      	strb	r3, [r7, #2]
 800969c:	4613      	mov	r3, r2
 800969e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096a4:	2300      	movs	r3, #0
 80096a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80096ae:	78bb      	ldrb	r3, [r7, #2]
 80096b0:	883a      	ldrh	r2, [r7, #0]
 80096b2:	78f9      	ldrb	r1, [r7, #3]
 80096b4:	f7fb f836 	bl	8004724 <HAL_PCD_EP_Open>
 80096b8:	4603      	mov	r3, r0
 80096ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
 80096be:	4618      	mov	r0, r3
 80096c0:	f000 f90a 	bl	80098d8 <USBD_Get_USB_Status>
 80096c4:	4603      	mov	r3, r0
 80096c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3710      	adds	r7, #16
 80096ce:	46bd      	mov	sp, r7
 80096d0:	bd80      	pop	{r7, pc}

080096d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b084      	sub	sp, #16
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
 80096da:	460b      	mov	r3, r1
 80096dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096de:	2300      	movs	r3, #0
 80096e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80096ec:	78fa      	ldrb	r2, [r7, #3]
 80096ee:	4611      	mov	r1, r2
 80096f0:	4618      	mov	r0, r3
 80096f2:	f7fb f87f 	bl	80047f4 <HAL_PCD_EP_Close>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096fa:	7bfb      	ldrb	r3, [r7, #15]
 80096fc:	4618      	mov	r0, r3
 80096fe:	f000 f8eb 	bl	80098d8 <USBD_Get_USB_Status>
 8009702:	4603      	mov	r3, r0
 8009704:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009706:	7bbb      	ldrb	r3, [r7, #14]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3710      	adds	r7, #16
 800970c:	46bd      	mov	sp, r7
 800970e:	bd80      	pop	{r7, pc}

08009710 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b084      	sub	sp, #16
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
 8009718:	460b      	mov	r3, r1
 800971a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800971c:	2300      	movs	r3, #0
 800971e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009720:	2300      	movs	r3, #0
 8009722:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800972a:	78fa      	ldrb	r2, [r7, #3]
 800972c:	4611      	mov	r1, r2
 800972e:	4618      	mov	r0, r3
 8009730:	f7fb f93f 	bl	80049b2 <HAL_PCD_EP_SetStall>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	4618      	mov	r0, r3
 800973c:	f000 f8cc 	bl	80098d8 <USBD_Get_USB_Status>
 8009740:	4603      	mov	r3, r0
 8009742:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009744:	7bbb      	ldrb	r3, [r7, #14]
}
 8009746:	4618      	mov	r0, r3
 8009748:	3710      	adds	r7, #16
 800974a:	46bd      	mov	sp, r7
 800974c:	bd80      	pop	{r7, pc}

0800974e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800974e:	b580      	push	{r7, lr}
 8009750:	b084      	sub	sp, #16
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
 8009756:	460b      	mov	r3, r1
 8009758:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800975a:	2300      	movs	r3, #0
 800975c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975e:	2300      	movs	r3, #0
 8009760:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009768:	78fa      	ldrb	r2, [r7, #3]
 800976a:	4611      	mov	r1, r2
 800976c:	4618      	mov	r0, r3
 800976e:	f7fb f984 	bl	8004a7a <HAL_PCD_EP_ClrStall>
 8009772:	4603      	mov	r3, r0
 8009774:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	4618      	mov	r0, r3
 800977a:	f000 f8ad 	bl	80098d8 <USBD_Get_USB_Status>
 800977e:	4603      	mov	r3, r0
 8009780:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009782:	7bbb      	ldrb	r3, [r7, #14]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3710      	adds	r7, #16
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}

0800978c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800978c:	b480      	push	{r7}
 800978e:	b085      	sub	sp, #20
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	460b      	mov	r3, r1
 8009796:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800979e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80097a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	da0b      	bge.n	80097c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097a8:	78fb      	ldrb	r3, [r7, #3]
 80097aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097ae:	68f9      	ldr	r1, [r7, #12]
 80097b0:	4613      	mov	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	333e      	adds	r3, #62	; 0x3e
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	e00b      	b.n	80097d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097c0:	78fb      	ldrb	r3, [r7, #3]
 80097c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097c6:	68f9      	ldr	r1, [r7, #12]
 80097c8:	4613      	mov	r3, r2
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	1a9b      	subs	r3, r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80097d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	460b      	mov	r3, r1
 80097ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097fe:	78fa      	ldrb	r2, [r7, #3]
 8009800:	4611      	mov	r1, r2
 8009802:	4618      	mov	r0, r3
 8009804:	f7fa ff69 	bl	80046da <HAL_PCD_SetAddress>
 8009808:	4603      	mov	r3, r0
 800980a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800980c:	7bfb      	ldrb	r3, [r7, #15]
 800980e:	4618      	mov	r0, r3
 8009810:	f000 f862 	bl	80098d8 <USBD_Get_USB_Status>
 8009814:	4603      	mov	r3, r0
 8009816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009818:	7bbb      	ldrb	r3, [r7, #14]
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b086      	sub	sp, #24
 8009826:	af00      	add	r7, sp, #0
 8009828:	60f8      	str	r0, [r7, #12]
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	603b      	str	r3, [r7, #0]
 800982e:	460b      	mov	r3, r1
 8009830:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009832:	2300      	movs	r3, #0
 8009834:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009836:	2300      	movs	r3, #0
 8009838:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009840:	7af9      	ldrb	r1, [r7, #11]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	f7fb f86a 	bl	800491e <HAL_PCD_EP_Transmit>
 800984a:	4603      	mov	r3, r0
 800984c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800984e:	7dfb      	ldrb	r3, [r7, #23]
 8009850:	4618      	mov	r0, r3
 8009852:	f000 f841 	bl	80098d8 <USBD_Get_USB_Status>
 8009856:	4603      	mov	r3, r0
 8009858:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800985a:	7dbb      	ldrb	r3, [r7, #22]
}
 800985c:	4618      	mov	r0, r3
 800985e:	3718      	adds	r7, #24
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}

08009864 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	607a      	str	r2, [r7, #4]
 800986e:	603b      	str	r3, [r7, #0]
 8009870:	460b      	mov	r3, r1
 8009872:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009882:	7af9      	ldrb	r1, [r7, #11]
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	f7fa fffe 	bl	8004888 <HAL_PCD_EP_Receive>
 800988c:	4603      	mov	r3, r0
 800988e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009890:	7dfb      	ldrb	r3, [r7, #23]
 8009892:	4618      	mov	r0, r3
 8009894:	f000 f820 	bl	80098d8 <USBD_Get_USB_Status>
 8009898:	4603      	mov	r3, r0
 800989a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800989c:	7dbb      	ldrb	r3, [r7, #22]
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
	...

080098a8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80098b0:	4b03      	ldr	r3, [pc, #12]	; (80098c0 <USBD_static_malloc+0x18>)
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	370c      	adds	r7, #12
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	20000220 	.word	0x20000220

080098c4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]

}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80098d8:	b480      	push	{r7}
 80098da:	b085      	sub	sp, #20
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80098e6:	79fb      	ldrb	r3, [r7, #7]
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d817      	bhi.n	800991c <USBD_Get_USB_Status+0x44>
 80098ec:	a201      	add	r2, pc, #4	; (adr r2, 80098f4 <USBD_Get_USB_Status+0x1c>)
 80098ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098f2:	bf00      	nop
 80098f4:	08009905 	.word	0x08009905
 80098f8:	0800990b 	.word	0x0800990b
 80098fc:	08009911 	.word	0x08009911
 8009900:	08009917 	.word	0x08009917
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009904:	2300      	movs	r3, #0
 8009906:	73fb      	strb	r3, [r7, #15]
    break;
 8009908:	e00b      	b.n	8009922 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800990a:	2303      	movs	r3, #3
 800990c:	73fb      	strb	r3, [r7, #15]
    break;
 800990e:	e008      	b.n	8009922 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009910:	2301      	movs	r3, #1
 8009912:	73fb      	strb	r3, [r7, #15]
    break;
 8009914:	e005      	b.n	8009922 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009916:	2303      	movs	r3, #3
 8009918:	73fb      	strb	r3, [r7, #15]
    break;
 800991a:	e002      	b.n	8009922 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800991c:	2303      	movs	r3, #3
 800991e:	73fb      	strb	r3, [r7, #15]
    break;
 8009920:	bf00      	nop
  }
  return usb_status;
 8009922:	7bfb      	ldrb	r3, [r7, #15]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <__errno>:
 8009930:	4b01      	ldr	r3, [pc, #4]	; (8009938 <__errno+0x8>)
 8009932:	6818      	ldr	r0, [r3, #0]
 8009934:	4770      	bx	lr
 8009936:	bf00      	nop
 8009938:	2000018c 	.word	0x2000018c

0800993c <__libc_init_array>:
 800993c:	b570      	push	{r4, r5, r6, lr}
 800993e:	4d0d      	ldr	r5, [pc, #52]	; (8009974 <__libc_init_array+0x38>)
 8009940:	4c0d      	ldr	r4, [pc, #52]	; (8009978 <__libc_init_array+0x3c>)
 8009942:	1b64      	subs	r4, r4, r5
 8009944:	10a4      	asrs	r4, r4, #2
 8009946:	2600      	movs	r6, #0
 8009948:	42a6      	cmp	r6, r4
 800994a:	d109      	bne.n	8009960 <__libc_init_array+0x24>
 800994c:	4d0b      	ldr	r5, [pc, #44]	; (800997c <__libc_init_array+0x40>)
 800994e:	4c0c      	ldr	r4, [pc, #48]	; (8009980 <__libc_init_array+0x44>)
 8009950:	f002 f8f4 	bl	800bb3c <_init>
 8009954:	1b64      	subs	r4, r4, r5
 8009956:	10a4      	asrs	r4, r4, #2
 8009958:	2600      	movs	r6, #0
 800995a:	42a6      	cmp	r6, r4
 800995c:	d105      	bne.n	800996a <__libc_init_array+0x2e>
 800995e:	bd70      	pop	{r4, r5, r6, pc}
 8009960:	f855 3b04 	ldr.w	r3, [r5], #4
 8009964:	4798      	blx	r3
 8009966:	3601      	adds	r6, #1
 8009968:	e7ee      	b.n	8009948 <__libc_init_array+0xc>
 800996a:	f855 3b04 	ldr.w	r3, [r5], #4
 800996e:	4798      	blx	r3
 8009970:	3601      	adds	r6, #1
 8009972:	e7f2      	b.n	800995a <__libc_init_array+0x1e>
 8009974:	0800be28 	.word	0x0800be28
 8009978:	0800be28 	.word	0x0800be28
 800997c:	0800be28 	.word	0x0800be28
 8009980:	0800be2c 	.word	0x0800be2c

08009984 <memset>:
 8009984:	4402      	add	r2, r0
 8009986:	4603      	mov	r3, r0
 8009988:	4293      	cmp	r3, r2
 800998a:	d100      	bne.n	800998e <memset+0xa>
 800998c:	4770      	bx	lr
 800998e:	f803 1b01 	strb.w	r1, [r3], #1
 8009992:	e7f9      	b.n	8009988 <memset+0x4>
 8009994:	0000      	movs	r0, r0
	...

08009998 <cos>:
 8009998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800999a:	ec53 2b10 	vmov	r2, r3, d0
 800999e:	4824      	ldr	r0, [pc, #144]	; (8009a30 <cos+0x98>)
 80099a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80099a4:	4281      	cmp	r1, r0
 80099a6:	dc06      	bgt.n	80099b6 <cos+0x1e>
 80099a8:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8009a28 <cos+0x90>
 80099ac:	f001 f944 	bl	800ac38 <__kernel_cos>
 80099b0:	ec51 0b10 	vmov	r0, r1, d0
 80099b4:	e007      	b.n	80099c6 <cos+0x2e>
 80099b6:	481f      	ldr	r0, [pc, #124]	; (8009a34 <cos+0x9c>)
 80099b8:	4281      	cmp	r1, r0
 80099ba:	dd09      	ble.n	80099d0 <cos+0x38>
 80099bc:	ee10 0a10 	vmov	r0, s0
 80099c0:	4619      	mov	r1, r3
 80099c2:	f7f6 fc0d 	bl	80001e0 <__aeabi_dsub>
 80099c6:	ec41 0b10 	vmov	d0, r0, r1
 80099ca:	b005      	add	sp, #20
 80099cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80099d0:	4668      	mov	r0, sp
 80099d2:	f000 fe71 	bl	800a6b8 <__ieee754_rem_pio2>
 80099d6:	f000 0003 	and.w	r0, r0, #3
 80099da:	2801      	cmp	r0, #1
 80099dc:	d007      	beq.n	80099ee <cos+0x56>
 80099de:	2802      	cmp	r0, #2
 80099e0:	d012      	beq.n	8009a08 <cos+0x70>
 80099e2:	b9c0      	cbnz	r0, 8009a16 <cos+0x7e>
 80099e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099e8:	ed9d 0b00 	vldr	d0, [sp]
 80099ec:	e7de      	b.n	80099ac <cos+0x14>
 80099ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 80099f2:	ed9d 0b00 	vldr	d0, [sp]
 80099f6:	f001 fd27 	bl	800b448 <__kernel_sin>
 80099fa:	ec53 2b10 	vmov	r2, r3, d0
 80099fe:	ee10 0a10 	vmov	r0, s0
 8009a02:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009a06:	e7de      	b.n	80099c6 <cos+0x2e>
 8009a08:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a0c:	ed9d 0b00 	vldr	d0, [sp]
 8009a10:	f001 f912 	bl	800ac38 <__kernel_cos>
 8009a14:	e7f1      	b.n	80099fa <cos+0x62>
 8009a16:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a1a:	ed9d 0b00 	vldr	d0, [sp]
 8009a1e:	2001      	movs	r0, #1
 8009a20:	f001 fd12 	bl	800b448 <__kernel_sin>
 8009a24:	e7c4      	b.n	80099b0 <cos+0x18>
 8009a26:	bf00      	nop
	...
 8009a30:	3fe921fb 	.word	0x3fe921fb
 8009a34:	7fefffff 	.word	0x7fefffff

08009a38 <sin>:
 8009a38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009a3a:	ec53 2b10 	vmov	r2, r3, d0
 8009a3e:	4826      	ldr	r0, [pc, #152]	; (8009ad8 <sin+0xa0>)
 8009a40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009a44:	4281      	cmp	r1, r0
 8009a46:	dc07      	bgt.n	8009a58 <sin+0x20>
 8009a48:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009ad0 <sin+0x98>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	f001 fcfb 	bl	800b448 <__kernel_sin>
 8009a52:	ec51 0b10 	vmov	r0, r1, d0
 8009a56:	e007      	b.n	8009a68 <sin+0x30>
 8009a58:	4820      	ldr	r0, [pc, #128]	; (8009adc <sin+0xa4>)
 8009a5a:	4281      	cmp	r1, r0
 8009a5c:	dd09      	ble.n	8009a72 <sin+0x3a>
 8009a5e:	ee10 0a10 	vmov	r0, s0
 8009a62:	4619      	mov	r1, r3
 8009a64:	f7f6 fbbc 	bl	80001e0 <__aeabi_dsub>
 8009a68:	ec41 0b10 	vmov	d0, r0, r1
 8009a6c:	b005      	add	sp, #20
 8009a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a72:	4668      	mov	r0, sp
 8009a74:	f000 fe20 	bl	800a6b8 <__ieee754_rem_pio2>
 8009a78:	f000 0003 	and.w	r0, r0, #3
 8009a7c:	2801      	cmp	r0, #1
 8009a7e:	d008      	beq.n	8009a92 <sin+0x5a>
 8009a80:	2802      	cmp	r0, #2
 8009a82:	d00d      	beq.n	8009aa0 <sin+0x68>
 8009a84:	b9d0      	cbnz	r0, 8009abc <sin+0x84>
 8009a86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a8a:	ed9d 0b00 	vldr	d0, [sp]
 8009a8e:	2001      	movs	r0, #1
 8009a90:	e7dd      	b.n	8009a4e <sin+0x16>
 8009a92:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009a96:	ed9d 0b00 	vldr	d0, [sp]
 8009a9a:	f001 f8cd 	bl	800ac38 <__kernel_cos>
 8009a9e:	e7d8      	b.n	8009a52 <sin+0x1a>
 8009aa0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009aa4:	ed9d 0b00 	vldr	d0, [sp]
 8009aa8:	2001      	movs	r0, #1
 8009aaa:	f001 fccd 	bl	800b448 <__kernel_sin>
 8009aae:	ec53 2b10 	vmov	r2, r3, d0
 8009ab2:	ee10 0a10 	vmov	r0, s0
 8009ab6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009aba:	e7d5      	b.n	8009a68 <sin+0x30>
 8009abc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ac0:	ed9d 0b00 	vldr	d0, [sp]
 8009ac4:	f001 f8b8 	bl	800ac38 <__kernel_cos>
 8009ac8:	e7f1      	b.n	8009aae <sin+0x76>
 8009aca:	bf00      	nop
 8009acc:	f3af 8000 	nop.w
	...
 8009ad8:	3fe921fb 	.word	0x3fe921fb
 8009adc:	7fefffff 	.word	0x7fefffff

08009ae0 <acos>:
 8009ae0:	b538      	push	{r3, r4, r5, lr}
 8009ae2:	ed2d 8b02 	vpush	{d8}
 8009ae6:	ec55 4b10 	vmov	r4, r5, d0
 8009aea:	f000 f8a5 	bl	8009c38 <__ieee754_acos>
 8009aee:	4b16      	ldr	r3, [pc, #88]	; (8009b48 <acos+0x68>)
 8009af0:	eeb0 8a40 	vmov.f32	s16, s0
 8009af4:	eef0 8a60 	vmov.f32	s17, s1
 8009af8:	f993 3000 	ldrsb.w	r3, [r3]
 8009afc:	3301      	adds	r3, #1
 8009afe:	d01c      	beq.n	8009b3a <acos+0x5a>
 8009b00:	4622      	mov	r2, r4
 8009b02:	462b      	mov	r3, r5
 8009b04:	4620      	mov	r0, r4
 8009b06:	4629      	mov	r1, r5
 8009b08:	f7f6 ffbc 	bl	8000a84 <__aeabi_dcmpun>
 8009b0c:	b9a8      	cbnz	r0, 8009b3a <acos+0x5a>
 8009b0e:	ec45 4b10 	vmov	d0, r4, r5
 8009b12:	f001 fef9 	bl	800b908 <fabs>
 8009b16:	4b0d      	ldr	r3, [pc, #52]	; (8009b4c <acos+0x6c>)
 8009b18:	ec51 0b10 	vmov	r0, r1, d0
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	f7f6 ffa7 	bl	8000a70 <__aeabi_dcmpgt>
 8009b22:	b150      	cbz	r0, 8009b3a <acos+0x5a>
 8009b24:	f7ff ff04 	bl	8009930 <__errno>
 8009b28:	ecbd 8b02 	vpop	{d8}
 8009b2c:	2321      	movs	r3, #33	; 0x21
 8009b2e:	6003      	str	r3, [r0, #0]
 8009b30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b34:	4806      	ldr	r0, [pc, #24]	; (8009b50 <acos+0x70>)
 8009b36:	f001 bf73 	b.w	800ba20 <nan>
 8009b3a:	eeb0 0a48 	vmov.f32	s0, s16
 8009b3e:	eef0 0a68 	vmov.f32	s1, s17
 8009b42:	ecbd 8b02 	vpop	{d8}
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	200001f0 	.word	0x200001f0
 8009b4c:	3ff00000 	.word	0x3ff00000
 8009b50:	0800bbd0 	.word	0x0800bbd0

08009b54 <asin>:
 8009b54:	b538      	push	{r3, r4, r5, lr}
 8009b56:	ed2d 8b02 	vpush	{d8}
 8009b5a:	ec55 4b10 	vmov	r4, r5, d0
 8009b5e:	f000 facb 	bl	800a0f8 <__ieee754_asin>
 8009b62:	4b16      	ldr	r3, [pc, #88]	; (8009bbc <asin+0x68>)
 8009b64:	eeb0 8a40 	vmov.f32	s16, s0
 8009b68:	eef0 8a60 	vmov.f32	s17, s1
 8009b6c:	f993 3000 	ldrsb.w	r3, [r3]
 8009b70:	3301      	adds	r3, #1
 8009b72:	d01c      	beq.n	8009bae <asin+0x5a>
 8009b74:	4622      	mov	r2, r4
 8009b76:	462b      	mov	r3, r5
 8009b78:	4620      	mov	r0, r4
 8009b7a:	4629      	mov	r1, r5
 8009b7c:	f7f6 ff82 	bl	8000a84 <__aeabi_dcmpun>
 8009b80:	b9a8      	cbnz	r0, 8009bae <asin+0x5a>
 8009b82:	ec45 4b10 	vmov	d0, r4, r5
 8009b86:	f001 febf 	bl	800b908 <fabs>
 8009b8a:	4b0d      	ldr	r3, [pc, #52]	; (8009bc0 <asin+0x6c>)
 8009b8c:	ec51 0b10 	vmov	r0, r1, d0
 8009b90:	2200      	movs	r2, #0
 8009b92:	f7f6 ff6d 	bl	8000a70 <__aeabi_dcmpgt>
 8009b96:	b150      	cbz	r0, 8009bae <asin+0x5a>
 8009b98:	f7ff feca 	bl	8009930 <__errno>
 8009b9c:	ecbd 8b02 	vpop	{d8}
 8009ba0:	2321      	movs	r3, #33	; 0x21
 8009ba2:	6003      	str	r3, [r0, #0]
 8009ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ba8:	4806      	ldr	r0, [pc, #24]	; (8009bc4 <asin+0x70>)
 8009baa:	f001 bf39 	b.w	800ba20 <nan>
 8009bae:	eeb0 0a48 	vmov.f32	s0, s16
 8009bb2:	eef0 0a68 	vmov.f32	s1, s17
 8009bb6:	ecbd 8b02 	vpop	{d8}
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	200001f0 	.word	0x200001f0
 8009bc0:	3ff00000 	.word	0x3ff00000
 8009bc4:	0800bbd0 	.word	0x0800bbd0

08009bc8 <atan2>:
 8009bc8:	f000 bcaa 	b.w	800a520 <__ieee754_atan2>

08009bcc <sqrt>:
 8009bcc:	b538      	push	{r3, r4, r5, lr}
 8009bce:	ed2d 8b02 	vpush	{d8}
 8009bd2:	ec55 4b10 	vmov	r4, r5, d0
 8009bd6:	f000 ff79 	bl	800aacc <__ieee754_sqrt>
 8009bda:	4b15      	ldr	r3, [pc, #84]	; (8009c30 <sqrt+0x64>)
 8009bdc:	eeb0 8a40 	vmov.f32	s16, s0
 8009be0:	eef0 8a60 	vmov.f32	s17, s1
 8009be4:	f993 3000 	ldrsb.w	r3, [r3]
 8009be8:	3301      	adds	r3, #1
 8009bea:	d019      	beq.n	8009c20 <sqrt+0x54>
 8009bec:	4622      	mov	r2, r4
 8009bee:	462b      	mov	r3, r5
 8009bf0:	4620      	mov	r0, r4
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	f7f6 ff46 	bl	8000a84 <__aeabi_dcmpun>
 8009bf8:	b990      	cbnz	r0, 8009c20 <sqrt+0x54>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	4620      	mov	r0, r4
 8009c00:	4629      	mov	r1, r5
 8009c02:	f7f6 ff17 	bl	8000a34 <__aeabi_dcmplt>
 8009c06:	b158      	cbz	r0, 8009c20 <sqrt+0x54>
 8009c08:	f7ff fe92 	bl	8009930 <__errno>
 8009c0c:	2321      	movs	r3, #33	; 0x21
 8009c0e:	6003      	str	r3, [r0, #0]
 8009c10:	2200      	movs	r2, #0
 8009c12:	2300      	movs	r3, #0
 8009c14:	4610      	mov	r0, r2
 8009c16:	4619      	mov	r1, r3
 8009c18:	f7f6 fdc4 	bl	80007a4 <__aeabi_ddiv>
 8009c1c:	ec41 0b18 	vmov	d8, r0, r1
 8009c20:	eeb0 0a48 	vmov.f32	s0, s16
 8009c24:	eef0 0a68 	vmov.f32	s1, s17
 8009c28:	ecbd 8b02 	vpop	{d8}
 8009c2c:	bd38      	pop	{r3, r4, r5, pc}
 8009c2e:	bf00      	nop
 8009c30:	200001f0 	.word	0x200001f0
 8009c34:	00000000 	.word	0x00000000

08009c38 <__ieee754_acos>:
 8009c38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	ec55 4b10 	vmov	r4, r5, d0
 8009c40:	49b7      	ldr	r1, [pc, #732]	; (8009f20 <__ieee754_acos+0x2e8>)
 8009c42:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009c46:	428b      	cmp	r3, r1
 8009c48:	dd1b      	ble.n	8009c82 <__ieee754_acos+0x4a>
 8009c4a:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8009c4e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009c52:	4323      	orrs	r3, r4
 8009c54:	d106      	bne.n	8009c64 <__ieee754_acos+0x2c>
 8009c56:	2d00      	cmp	r5, #0
 8009c58:	f300 8211 	bgt.w	800a07e <__ieee754_acos+0x446>
 8009c5c:	ed9f 0b96 	vldr	d0, [pc, #600]	; 8009eb8 <__ieee754_acos+0x280>
 8009c60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c64:	ee10 2a10 	vmov	r2, s0
 8009c68:	462b      	mov	r3, r5
 8009c6a:	ee10 0a10 	vmov	r0, s0
 8009c6e:	4629      	mov	r1, r5
 8009c70:	f7f6 fab6 	bl	80001e0 <__aeabi_dsub>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	f7f6 fd94 	bl	80007a4 <__aeabi_ddiv>
 8009c7c:	ec41 0b10 	vmov	d0, r0, r1
 8009c80:	e7ee      	b.n	8009c60 <__ieee754_acos+0x28>
 8009c82:	49a8      	ldr	r1, [pc, #672]	; (8009f24 <__ieee754_acos+0x2ec>)
 8009c84:	428b      	cmp	r3, r1
 8009c86:	f300 8087 	bgt.w	8009d98 <__ieee754_acos+0x160>
 8009c8a:	4aa7      	ldr	r2, [pc, #668]	; (8009f28 <__ieee754_acos+0x2f0>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	f340 81f9 	ble.w	800a084 <__ieee754_acos+0x44c>
 8009c92:	ee10 2a10 	vmov	r2, s0
 8009c96:	ee10 0a10 	vmov	r0, s0
 8009c9a:	462b      	mov	r3, r5
 8009c9c:	4629      	mov	r1, r5
 8009c9e:	f7f6 fc57 	bl	8000550 <__aeabi_dmul>
 8009ca2:	a387      	add	r3, pc, #540	; (adr r3, 8009ec0 <__ieee754_acos+0x288>)
 8009ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca8:	4606      	mov	r6, r0
 8009caa:	460f      	mov	r7, r1
 8009cac:	f7f6 fc50 	bl	8000550 <__aeabi_dmul>
 8009cb0:	a385      	add	r3, pc, #532	; (adr r3, 8009ec8 <__ieee754_acos+0x290>)
 8009cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb6:	f7f6 fa95 	bl	80001e4 <__adddf3>
 8009cba:	4632      	mov	r2, r6
 8009cbc:	463b      	mov	r3, r7
 8009cbe:	f7f6 fc47 	bl	8000550 <__aeabi_dmul>
 8009cc2:	a383      	add	r3, pc, #524	; (adr r3, 8009ed0 <__ieee754_acos+0x298>)
 8009cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc8:	f7f6 fa8a 	bl	80001e0 <__aeabi_dsub>
 8009ccc:	4632      	mov	r2, r6
 8009cce:	463b      	mov	r3, r7
 8009cd0:	f7f6 fc3e 	bl	8000550 <__aeabi_dmul>
 8009cd4:	a380      	add	r3, pc, #512	; (adr r3, 8009ed8 <__ieee754_acos+0x2a0>)
 8009cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cda:	f7f6 fa83 	bl	80001e4 <__adddf3>
 8009cde:	4632      	mov	r2, r6
 8009ce0:	463b      	mov	r3, r7
 8009ce2:	f7f6 fc35 	bl	8000550 <__aeabi_dmul>
 8009ce6:	a37e      	add	r3, pc, #504	; (adr r3, 8009ee0 <__ieee754_acos+0x2a8>)
 8009ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cec:	f7f6 fa78 	bl	80001e0 <__aeabi_dsub>
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	463b      	mov	r3, r7
 8009cf4:	f7f6 fc2c 	bl	8000550 <__aeabi_dmul>
 8009cf8:	a37b      	add	r3, pc, #492	; (adr r3, 8009ee8 <__ieee754_acos+0x2b0>)
 8009cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cfe:	f7f6 fa71 	bl	80001e4 <__adddf3>
 8009d02:	4632      	mov	r2, r6
 8009d04:	463b      	mov	r3, r7
 8009d06:	f7f6 fc23 	bl	8000550 <__aeabi_dmul>
 8009d0a:	a379      	add	r3, pc, #484	; (adr r3, 8009ef0 <__ieee754_acos+0x2b8>)
 8009d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d10:	4680      	mov	r8, r0
 8009d12:	4689      	mov	r9, r1
 8009d14:	4630      	mov	r0, r6
 8009d16:	4639      	mov	r1, r7
 8009d18:	f7f6 fc1a 	bl	8000550 <__aeabi_dmul>
 8009d1c:	a376      	add	r3, pc, #472	; (adr r3, 8009ef8 <__ieee754_acos+0x2c0>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	f7f6 fa5d 	bl	80001e0 <__aeabi_dsub>
 8009d26:	4632      	mov	r2, r6
 8009d28:	463b      	mov	r3, r7
 8009d2a:	f7f6 fc11 	bl	8000550 <__aeabi_dmul>
 8009d2e:	a374      	add	r3, pc, #464	; (adr r3, 8009f00 <__ieee754_acos+0x2c8>)
 8009d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d34:	f7f6 fa56 	bl	80001e4 <__adddf3>
 8009d38:	4632      	mov	r2, r6
 8009d3a:	463b      	mov	r3, r7
 8009d3c:	f7f6 fc08 	bl	8000550 <__aeabi_dmul>
 8009d40:	a371      	add	r3, pc, #452	; (adr r3, 8009f08 <__ieee754_acos+0x2d0>)
 8009d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d46:	f7f6 fa4b 	bl	80001e0 <__aeabi_dsub>
 8009d4a:	4632      	mov	r2, r6
 8009d4c:	463b      	mov	r3, r7
 8009d4e:	f7f6 fbff 	bl	8000550 <__aeabi_dmul>
 8009d52:	4b76      	ldr	r3, [pc, #472]	; (8009f2c <__ieee754_acos+0x2f4>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	f7f6 fa45 	bl	80001e4 <__adddf3>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4640      	mov	r0, r8
 8009d60:	4649      	mov	r1, r9
 8009d62:	f7f6 fd1f 	bl	80007a4 <__aeabi_ddiv>
 8009d66:	4622      	mov	r2, r4
 8009d68:	462b      	mov	r3, r5
 8009d6a:	f7f6 fbf1 	bl	8000550 <__aeabi_dmul>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	460b      	mov	r3, r1
 8009d72:	a167      	add	r1, pc, #412	; (adr r1, 8009f10 <__ieee754_acos+0x2d8>)
 8009d74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d78:	f7f6 fa32 	bl	80001e0 <__aeabi_dsub>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7f6 fa2c 	bl	80001e0 <__aeabi_dsub>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	a162      	add	r1, pc, #392	; (adr r1, 8009f18 <__ieee754_acos+0x2e0>)
 8009d8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d92:	f7f6 fa25 	bl	80001e0 <__aeabi_dsub>
 8009d96:	e771      	b.n	8009c7c <__ieee754_acos+0x44>
 8009d98:	2d00      	cmp	r5, #0
 8009d9a:	f280 80cb 	bge.w	8009f34 <__ieee754_acos+0x2fc>
 8009d9e:	ee10 0a10 	vmov	r0, s0
 8009da2:	4b62      	ldr	r3, [pc, #392]	; (8009f2c <__ieee754_acos+0x2f4>)
 8009da4:	2200      	movs	r2, #0
 8009da6:	4629      	mov	r1, r5
 8009da8:	f7f6 fa1c 	bl	80001e4 <__adddf3>
 8009dac:	4b60      	ldr	r3, [pc, #384]	; (8009f30 <__ieee754_acos+0x2f8>)
 8009dae:	2200      	movs	r2, #0
 8009db0:	f7f6 fbce 	bl	8000550 <__aeabi_dmul>
 8009db4:	a342      	add	r3, pc, #264	; (adr r3, 8009ec0 <__ieee754_acos+0x288>)
 8009db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dba:	4604      	mov	r4, r0
 8009dbc:	460d      	mov	r5, r1
 8009dbe:	f7f6 fbc7 	bl	8000550 <__aeabi_dmul>
 8009dc2:	a341      	add	r3, pc, #260	; (adr r3, 8009ec8 <__ieee754_acos+0x290>)
 8009dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc8:	f7f6 fa0c 	bl	80001e4 <__adddf3>
 8009dcc:	4622      	mov	r2, r4
 8009dce:	462b      	mov	r3, r5
 8009dd0:	f7f6 fbbe 	bl	8000550 <__aeabi_dmul>
 8009dd4:	a33e      	add	r3, pc, #248	; (adr r3, 8009ed0 <__ieee754_acos+0x298>)
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f7f6 fa01 	bl	80001e0 <__aeabi_dsub>
 8009dde:	4622      	mov	r2, r4
 8009de0:	462b      	mov	r3, r5
 8009de2:	f7f6 fbb5 	bl	8000550 <__aeabi_dmul>
 8009de6:	a33c      	add	r3, pc, #240	; (adr r3, 8009ed8 <__ieee754_acos+0x2a0>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	f7f6 f9fa 	bl	80001e4 <__adddf3>
 8009df0:	4622      	mov	r2, r4
 8009df2:	462b      	mov	r3, r5
 8009df4:	f7f6 fbac 	bl	8000550 <__aeabi_dmul>
 8009df8:	a339      	add	r3, pc, #228	; (adr r3, 8009ee0 <__ieee754_acos+0x2a8>)
 8009dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfe:	f7f6 f9ef 	bl	80001e0 <__aeabi_dsub>
 8009e02:	4622      	mov	r2, r4
 8009e04:	462b      	mov	r3, r5
 8009e06:	f7f6 fba3 	bl	8000550 <__aeabi_dmul>
 8009e0a:	a337      	add	r3, pc, #220	; (adr r3, 8009ee8 <__ieee754_acos+0x2b0>)
 8009e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e10:	f7f6 f9e8 	bl	80001e4 <__adddf3>
 8009e14:	4622      	mov	r2, r4
 8009e16:	462b      	mov	r3, r5
 8009e18:	f7f6 fb9a 	bl	8000550 <__aeabi_dmul>
 8009e1c:	ec45 4b10 	vmov	d0, r4, r5
 8009e20:	4680      	mov	r8, r0
 8009e22:	4689      	mov	r9, r1
 8009e24:	f000 fe52 	bl	800aacc <__ieee754_sqrt>
 8009e28:	a331      	add	r3, pc, #196	; (adr r3, 8009ef0 <__ieee754_acos+0x2b8>)
 8009e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e2e:	4620      	mov	r0, r4
 8009e30:	4629      	mov	r1, r5
 8009e32:	ec57 6b10 	vmov	r6, r7, d0
 8009e36:	f7f6 fb8b 	bl	8000550 <__aeabi_dmul>
 8009e3a:	a32f      	add	r3, pc, #188	; (adr r3, 8009ef8 <__ieee754_acos+0x2c0>)
 8009e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e40:	f7f6 f9ce 	bl	80001e0 <__aeabi_dsub>
 8009e44:	4622      	mov	r2, r4
 8009e46:	462b      	mov	r3, r5
 8009e48:	f7f6 fb82 	bl	8000550 <__aeabi_dmul>
 8009e4c:	a32c      	add	r3, pc, #176	; (adr r3, 8009f00 <__ieee754_acos+0x2c8>)
 8009e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e52:	f7f6 f9c7 	bl	80001e4 <__adddf3>
 8009e56:	4622      	mov	r2, r4
 8009e58:	462b      	mov	r3, r5
 8009e5a:	f7f6 fb79 	bl	8000550 <__aeabi_dmul>
 8009e5e:	a32a      	add	r3, pc, #168	; (adr r3, 8009f08 <__ieee754_acos+0x2d0>)
 8009e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e64:	f7f6 f9bc 	bl	80001e0 <__aeabi_dsub>
 8009e68:	4622      	mov	r2, r4
 8009e6a:	462b      	mov	r3, r5
 8009e6c:	f7f6 fb70 	bl	8000550 <__aeabi_dmul>
 8009e70:	4b2e      	ldr	r3, [pc, #184]	; (8009f2c <__ieee754_acos+0x2f4>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	f7f6 f9b6 	bl	80001e4 <__adddf3>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4640      	mov	r0, r8
 8009e7e:	4649      	mov	r1, r9
 8009e80:	f7f6 fc90 	bl	80007a4 <__aeabi_ddiv>
 8009e84:	4632      	mov	r2, r6
 8009e86:	463b      	mov	r3, r7
 8009e88:	f7f6 fb62 	bl	8000550 <__aeabi_dmul>
 8009e8c:	a320      	add	r3, pc, #128	; (adr r3, 8009f10 <__ieee754_acos+0x2d8>)
 8009e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e92:	f7f6 f9a5 	bl	80001e0 <__aeabi_dsub>
 8009e96:	4632      	mov	r2, r6
 8009e98:	463b      	mov	r3, r7
 8009e9a:	f7f6 f9a3 	bl	80001e4 <__adddf3>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	f7f6 f99f 	bl	80001e4 <__adddf3>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	a103      	add	r1, pc, #12	; (adr r1, 8009eb8 <__ieee754_acos+0x280>)
 8009eac:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009eb0:	e76f      	b.n	8009d92 <__ieee754_acos+0x15a>
 8009eb2:	bf00      	nop
 8009eb4:	f3af 8000 	nop.w
 8009eb8:	54442d18 	.word	0x54442d18
 8009ebc:	400921fb 	.word	0x400921fb
 8009ec0:	0dfdf709 	.word	0x0dfdf709
 8009ec4:	3f023de1 	.word	0x3f023de1
 8009ec8:	7501b288 	.word	0x7501b288
 8009ecc:	3f49efe0 	.word	0x3f49efe0
 8009ed0:	b5688f3b 	.word	0xb5688f3b
 8009ed4:	3fa48228 	.word	0x3fa48228
 8009ed8:	0e884455 	.word	0x0e884455
 8009edc:	3fc9c155 	.word	0x3fc9c155
 8009ee0:	03eb6f7d 	.word	0x03eb6f7d
 8009ee4:	3fd4d612 	.word	0x3fd4d612
 8009ee8:	55555555 	.word	0x55555555
 8009eec:	3fc55555 	.word	0x3fc55555
 8009ef0:	b12e9282 	.word	0xb12e9282
 8009ef4:	3fb3b8c5 	.word	0x3fb3b8c5
 8009ef8:	1b8d0159 	.word	0x1b8d0159
 8009efc:	3fe6066c 	.word	0x3fe6066c
 8009f00:	9c598ac8 	.word	0x9c598ac8
 8009f04:	40002ae5 	.word	0x40002ae5
 8009f08:	1c8a2d4b 	.word	0x1c8a2d4b
 8009f0c:	40033a27 	.word	0x40033a27
 8009f10:	33145c07 	.word	0x33145c07
 8009f14:	3c91a626 	.word	0x3c91a626
 8009f18:	54442d18 	.word	0x54442d18
 8009f1c:	3ff921fb 	.word	0x3ff921fb
 8009f20:	3fefffff 	.word	0x3fefffff
 8009f24:	3fdfffff 	.word	0x3fdfffff
 8009f28:	3c600000 	.word	0x3c600000
 8009f2c:	3ff00000 	.word	0x3ff00000
 8009f30:	3fe00000 	.word	0x3fe00000
 8009f34:	ee10 2a10 	vmov	r2, s0
 8009f38:	462b      	mov	r3, r5
 8009f3a:	496d      	ldr	r1, [pc, #436]	; (800a0f0 <__ieee754_acos+0x4b8>)
 8009f3c:	2000      	movs	r0, #0
 8009f3e:	f7f6 f94f 	bl	80001e0 <__aeabi_dsub>
 8009f42:	4b6c      	ldr	r3, [pc, #432]	; (800a0f4 <__ieee754_acos+0x4bc>)
 8009f44:	2200      	movs	r2, #0
 8009f46:	f7f6 fb03 	bl	8000550 <__aeabi_dmul>
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	460d      	mov	r5, r1
 8009f4e:	ec45 4b10 	vmov	d0, r4, r5
 8009f52:	f000 fdbb 	bl	800aacc <__ieee754_sqrt>
 8009f56:	a34e      	add	r3, pc, #312	; (adr r3, 800a090 <__ieee754_acos+0x458>)
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	4629      	mov	r1, r5
 8009f60:	ec59 8b10 	vmov	r8, r9, d0
 8009f64:	f7f6 faf4 	bl	8000550 <__aeabi_dmul>
 8009f68:	a34b      	add	r3, pc, #300	; (adr r3, 800a098 <__ieee754_acos+0x460>)
 8009f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f6e:	f7f6 f939 	bl	80001e4 <__adddf3>
 8009f72:	4622      	mov	r2, r4
 8009f74:	462b      	mov	r3, r5
 8009f76:	f7f6 faeb 	bl	8000550 <__aeabi_dmul>
 8009f7a:	a349      	add	r3, pc, #292	; (adr r3, 800a0a0 <__ieee754_acos+0x468>)
 8009f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f80:	f7f6 f92e 	bl	80001e0 <__aeabi_dsub>
 8009f84:	4622      	mov	r2, r4
 8009f86:	462b      	mov	r3, r5
 8009f88:	f7f6 fae2 	bl	8000550 <__aeabi_dmul>
 8009f8c:	a346      	add	r3, pc, #280	; (adr r3, 800a0a8 <__ieee754_acos+0x470>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 f927 	bl	80001e4 <__adddf3>
 8009f96:	4622      	mov	r2, r4
 8009f98:	462b      	mov	r3, r5
 8009f9a:	f7f6 fad9 	bl	8000550 <__aeabi_dmul>
 8009f9e:	a344      	add	r3, pc, #272	; (adr r3, 800a0b0 <__ieee754_acos+0x478>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 f91c 	bl	80001e0 <__aeabi_dsub>
 8009fa8:	4622      	mov	r2, r4
 8009faa:	462b      	mov	r3, r5
 8009fac:	f7f6 fad0 	bl	8000550 <__aeabi_dmul>
 8009fb0:	a341      	add	r3, pc, #260	; (adr r3, 800a0b8 <__ieee754_acos+0x480>)
 8009fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fb6:	f7f6 f915 	bl	80001e4 <__adddf3>
 8009fba:	4622      	mov	r2, r4
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	f7f6 fac7 	bl	8000550 <__aeabi_dmul>
 8009fc2:	a33f      	add	r3, pc, #252	; (adr r3, 800a0c0 <__ieee754_acos+0x488>)
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	4682      	mov	sl, r0
 8009fca:	468b      	mov	fp, r1
 8009fcc:	4620      	mov	r0, r4
 8009fce:	4629      	mov	r1, r5
 8009fd0:	f7f6 fabe 	bl	8000550 <__aeabi_dmul>
 8009fd4:	a33c      	add	r3, pc, #240	; (adr r3, 800a0c8 <__ieee754_acos+0x490>)
 8009fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fda:	f7f6 f901 	bl	80001e0 <__aeabi_dsub>
 8009fde:	4622      	mov	r2, r4
 8009fe0:	462b      	mov	r3, r5
 8009fe2:	f7f6 fab5 	bl	8000550 <__aeabi_dmul>
 8009fe6:	a33a      	add	r3, pc, #232	; (adr r3, 800a0d0 <__ieee754_acos+0x498>)
 8009fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fec:	f7f6 f8fa 	bl	80001e4 <__adddf3>
 8009ff0:	4622      	mov	r2, r4
 8009ff2:	462b      	mov	r3, r5
 8009ff4:	f7f6 faac 	bl	8000550 <__aeabi_dmul>
 8009ff8:	a337      	add	r3, pc, #220	; (adr r3, 800a0d8 <__ieee754_acos+0x4a0>)
 8009ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffe:	f7f6 f8ef 	bl	80001e0 <__aeabi_dsub>
 800a002:	4622      	mov	r2, r4
 800a004:	462b      	mov	r3, r5
 800a006:	f7f6 faa3 	bl	8000550 <__aeabi_dmul>
 800a00a:	4b39      	ldr	r3, [pc, #228]	; (800a0f0 <__ieee754_acos+0x4b8>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	f7f6 f8e9 	bl	80001e4 <__adddf3>
 800a012:	4602      	mov	r2, r0
 800a014:	460b      	mov	r3, r1
 800a016:	4650      	mov	r0, sl
 800a018:	4659      	mov	r1, fp
 800a01a:	f7f6 fbc3 	bl	80007a4 <__aeabi_ddiv>
 800a01e:	4642      	mov	r2, r8
 800a020:	464b      	mov	r3, r9
 800a022:	f7f6 fa95 	bl	8000550 <__aeabi_dmul>
 800a026:	2600      	movs	r6, #0
 800a028:	4682      	mov	sl, r0
 800a02a:	468b      	mov	fp, r1
 800a02c:	4632      	mov	r2, r6
 800a02e:	464b      	mov	r3, r9
 800a030:	4630      	mov	r0, r6
 800a032:	4649      	mov	r1, r9
 800a034:	f7f6 fa8c 	bl	8000550 <__aeabi_dmul>
 800a038:	4602      	mov	r2, r0
 800a03a:	460b      	mov	r3, r1
 800a03c:	4620      	mov	r0, r4
 800a03e:	4629      	mov	r1, r5
 800a040:	f7f6 f8ce 	bl	80001e0 <__aeabi_dsub>
 800a044:	4632      	mov	r2, r6
 800a046:	4604      	mov	r4, r0
 800a048:	460d      	mov	r5, r1
 800a04a:	464b      	mov	r3, r9
 800a04c:	4640      	mov	r0, r8
 800a04e:	4649      	mov	r1, r9
 800a050:	f7f6 f8c8 	bl	80001e4 <__adddf3>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4620      	mov	r0, r4
 800a05a:	4629      	mov	r1, r5
 800a05c:	f7f6 fba2 	bl	80007a4 <__aeabi_ddiv>
 800a060:	4602      	mov	r2, r0
 800a062:	460b      	mov	r3, r1
 800a064:	4650      	mov	r0, sl
 800a066:	4659      	mov	r1, fp
 800a068:	f7f6 f8bc 	bl	80001e4 <__adddf3>
 800a06c:	4632      	mov	r2, r6
 800a06e:	464b      	mov	r3, r9
 800a070:	f7f6 f8b8 	bl	80001e4 <__adddf3>
 800a074:	4602      	mov	r2, r0
 800a076:	460b      	mov	r3, r1
 800a078:	f7f6 f8b4 	bl	80001e4 <__adddf3>
 800a07c:	e5fe      	b.n	8009c7c <__ieee754_acos+0x44>
 800a07e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a0e0 <__ieee754_acos+0x4a8>
 800a082:	e5ed      	b.n	8009c60 <__ieee754_acos+0x28>
 800a084:	ed9f 0b18 	vldr	d0, [pc, #96]	; 800a0e8 <__ieee754_acos+0x4b0>
 800a088:	e5ea      	b.n	8009c60 <__ieee754_acos+0x28>
 800a08a:	bf00      	nop
 800a08c:	f3af 8000 	nop.w
 800a090:	0dfdf709 	.word	0x0dfdf709
 800a094:	3f023de1 	.word	0x3f023de1
 800a098:	7501b288 	.word	0x7501b288
 800a09c:	3f49efe0 	.word	0x3f49efe0
 800a0a0:	b5688f3b 	.word	0xb5688f3b
 800a0a4:	3fa48228 	.word	0x3fa48228
 800a0a8:	0e884455 	.word	0x0e884455
 800a0ac:	3fc9c155 	.word	0x3fc9c155
 800a0b0:	03eb6f7d 	.word	0x03eb6f7d
 800a0b4:	3fd4d612 	.word	0x3fd4d612
 800a0b8:	55555555 	.word	0x55555555
 800a0bc:	3fc55555 	.word	0x3fc55555
 800a0c0:	b12e9282 	.word	0xb12e9282
 800a0c4:	3fb3b8c5 	.word	0x3fb3b8c5
 800a0c8:	1b8d0159 	.word	0x1b8d0159
 800a0cc:	3fe6066c 	.word	0x3fe6066c
 800a0d0:	9c598ac8 	.word	0x9c598ac8
 800a0d4:	40002ae5 	.word	0x40002ae5
 800a0d8:	1c8a2d4b 	.word	0x1c8a2d4b
 800a0dc:	40033a27 	.word	0x40033a27
	...
 800a0e8:	54442d18 	.word	0x54442d18
 800a0ec:	3ff921fb 	.word	0x3ff921fb
 800a0f0:	3ff00000 	.word	0x3ff00000
 800a0f4:	3fe00000 	.word	0x3fe00000

0800a0f8 <__ieee754_asin>:
 800a0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0fc:	ed2d 8b04 	vpush	{d8-d9}
 800a100:	ec55 4b10 	vmov	r4, r5, d0
 800a104:	4bcc      	ldr	r3, [pc, #816]	; (800a438 <__ieee754_asin+0x340>)
 800a106:	b083      	sub	sp, #12
 800a108:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a10c:	4598      	cmp	r8, r3
 800a10e:	9501      	str	r5, [sp, #4]
 800a110:	dd35      	ble.n	800a17e <__ieee754_asin+0x86>
 800a112:	ee10 3a10 	vmov	r3, s0
 800a116:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800a11a:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800a11e:	ea58 0303 	orrs.w	r3, r8, r3
 800a122:	d117      	bne.n	800a154 <__ieee754_asin+0x5c>
 800a124:	a3aa      	add	r3, pc, #680	; (adr r3, 800a3d0 <__ieee754_asin+0x2d8>)
 800a126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a12a:	ee10 0a10 	vmov	r0, s0
 800a12e:	4629      	mov	r1, r5
 800a130:	f7f6 fa0e 	bl	8000550 <__aeabi_dmul>
 800a134:	a3a8      	add	r3, pc, #672	; (adr r3, 800a3d8 <__ieee754_asin+0x2e0>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	4606      	mov	r6, r0
 800a13c:	460f      	mov	r7, r1
 800a13e:	4620      	mov	r0, r4
 800a140:	4629      	mov	r1, r5
 800a142:	f7f6 fa05 	bl	8000550 <__aeabi_dmul>
 800a146:	4602      	mov	r2, r0
 800a148:	460b      	mov	r3, r1
 800a14a:	4630      	mov	r0, r6
 800a14c:	4639      	mov	r1, r7
 800a14e:	f7f6 f849 	bl	80001e4 <__adddf3>
 800a152:	e00b      	b.n	800a16c <__ieee754_asin+0x74>
 800a154:	ee10 2a10 	vmov	r2, s0
 800a158:	462b      	mov	r3, r5
 800a15a:	ee10 0a10 	vmov	r0, s0
 800a15e:	4629      	mov	r1, r5
 800a160:	f7f6 f83e 	bl	80001e0 <__aeabi_dsub>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	f7f6 fb1c 	bl	80007a4 <__aeabi_ddiv>
 800a16c:	4604      	mov	r4, r0
 800a16e:	460d      	mov	r5, r1
 800a170:	ec45 4b10 	vmov	d0, r4, r5
 800a174:	b003      	add	sp, #12
 800a176:	ecbd 8b04 	vpop	{d8-d9}
 800a17a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a17e:	4baf      	ldr	r3, [pc, #700]	; (800a43c <__ieee754_asin+0x344>)
 800a180:	4598      	cmp	r8, r3
 800a182:	dc11      	bgt.n	800a1a8 <__ieee754_asin+0xb0>
 800a184:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a188:	f280 80ae 	bge.w	800a2e8 <__ieee754_asin+0x1f0>
 800a18c:	a394      	add	r3, pc, #592	; (adr r3, 800a3e0 <__ieee754_asin+0x2e8>)
 800a18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a192:	ee10 0a10 	vmov	r0, s0
 800a196:	4629      	mov	r1, r5
 800a198:	f7f6 f824 	bl	80001e4 <__adddf3>
 800a19c:	4ba8      	ldr	r3, [pc, #672]	; (800a440 <__ieee754_asin+0x348>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f7f6 fc66 	bl	8000a70 <__aeabi_dcmpgt>
 800a1a4:	2800      	cmp	r0, #0
 800a1a6:	d1e3      	bne.n	800a170 <__ieee754_asin+0x78>
 800a1a8:	ec45 4b10 	vmov	d0, r4, r5
 800a1ac:	f001 fbac 	bl	800b908 <fabs>
 800a1b0:	49a3      	ldr	r1, [pc, #652]	; (800a440 <__ieee754_asin+0x348>)
 800a1b2:	ec53 2b10 	vmov	r2, r3, d0
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	f7f6 f812 	bl	80001e0 <__aeabi_dsub>
 800a1bc:	4ba1      	ldr	r3, [pc, #644]	; (800a444 <__ieee754_asin+0x34c>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f7f6 f9c6 	bl	8000550 <__aeabi_dmul>
 800a1c4:	a388      	add	r3, pc, #544	; (adr r3, 800a3e8 <__ieee754_asin+0x2f0>)
 800a1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ca:	4604      	mov	r4, r0
 800a1cc:	460d      	mov	r5, r1
 800a1ce:	f7f6 f9bf 	bl	8000550 <__aeabi_dmul>
 800a1d2:	a387      	add	r3, pc, #540	; (adr r3, 800a3f0 <__ieee754_asin+0x2f8>)
 800a1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1d8:	f7f6 f804 	bl	80001e4 <__adddf3>
 800a1dc:	4622      	mov	r2, r4
 800a1de:	462b      	mov	r3, r5
 800a1e0:	f7f6 f9b6 	bl	8000550 <__aeabi_dmul>
 800a1e4:	a384      	add	r3, pc, #528	; (adr r3, 800a3f8 <__ieee754_asin+0x300>)
 800a1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ea:	f7f5 fff9 	bl	80001e0 <__aeabi_dsub>
 800a1ee:	4622      	mov	r2, r4
 800a1f0:	462b      	mov	r3, r5
 800a1f2:	f7f6 f9ad 	bl	8000550 <__aeabi_dmul>
 800a1f6:	a382      	add	r3, pc, #520	; (adr r3, 800a400 <__ieee754_asin+0x308>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f5 fff2 	bl	80001e4 <__adddf3>
 800a200:	4622      	mov	r2, r4
 800a202:	462b      	mov	r3, r5
 800a204:	f7f6 f9a4 	bl	8000550 <__aeabi_dmul>
 800a208:	a37f      	add	r3, pc, #508	; (adr r3, 800a408 <__ieee754_asin+0x310>)
 800a20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a20e:	f7f5 ffe7 	bl	80001e0 <__aeabi_dsub>
 800a212:	4622      	mov	r2, r4
 800a214:	462b      	mov	r3, r5
 800a216:	f7f6 f99b 	bl	8000550 <__aeabi_dmul>
 800a21a:	a37d      	add	r3, pc, #500	; (adr r3, 800a410 <__ieee754_asin+0x318>)
 800a21c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a220:	f7f5 ffe0 	bl	80001e4 <__adddf3>
 800a224:	4622      	mov	r2, r4
 800a226:	462b      	mov	r3, r5
 800a228:	f7f6 f992 	bl	8000550 <__aeabi_dmul>
 800a22c:	a37a      	add	r3, pc, #488	; (adr r3, 800a418 <__ieee754_asin+0x320>)
 800a22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a232:	ec41 0b18 	vmov	d8, r0, r1
 800a236:	4620      	mov	r0, r4
 800a238:	4629      	mov	r1, r5
 800a23a:	f7f6 f989 	bl	8000550 <__aeabi_dmul>
 800a23e:	a378      	add	r3, pc, #480	; (adr r3, 800a420 <__ieee754_asin+0x328>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f5 ffcc 	bl	80001e0 <__aeabi_dsub>
 800a248:	4622      	mov	r2, r4
 800a24a:	462b      	mov	r3, r5
 800a24c:	f7f6 f980 	bl	8000550 <__aeabi_dmul>
 800a250:	a375      	add	r3, pc, #468	; (adr r3, 800a428 <__ieee754_asin+0x330>)
 800a252:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a256:	f7f5 ffc5 	bl	80001e4 <__adddf3>
 800a25a:	4622      	mov	r2, r4
 800a25c:	462b      	mov	r3, r5
 800a25e:	f7f6 f977 	bl	8000550 <__aeabi_dmul>
 800a262:	a373      	add	r3, pc, #460	; (adr r3, 800a430 <__ieee754_asin+0x338>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	f7f5 ffba 	bl	80001e0 <__aeabi_dsub>
 800a26c:	4622      	mov	r2, r4
 800a26e:	462b      	mov	r3, r5
 800a270:	f7f6 f96e 	bl	8000550 <__aeabi_dmul>
 800a274:	4b72      	ldr	r3, [pc, #456]	; (800a440 <__ieee754_asin+0x348>)
 800a276:	2200      	movs	r2, #0
 800a278:	f7f5 ffb4 	bl	80001e4 <__adddf3>
 800a27c:	ec45 4b10 	vmov	d0, r4, r5
 800a280:	4606      	mov	r6, r0
 800a282:	460f      	mov	r7, r1
 800a284:	f000 fc22 	bl	800aacc <__ieee754_sqrt>
 800a288:	4b6f      	ldr	r3, [pc, #444]	; (800a448 <__ieee754_asin+0x350>)
 800a28a:	4598      	cmp	r8, r3
 800a28c:	ec5b ab10 	vmov	sl, fp, d0
 800a290:	f340 80dc 	ble.w	800a44c <__ieee754_asin+0x354>
 800a294:	4632      	mov	r2, r6
 800a296:	463b      	mov	r3, r7
 800a298:	ec51 0b18 	vmov	r0, r1, d8
 800a29c:	f7f6 fa82 	bl	80007a4 <__aeabi_ddiv>
 800a2a0:	4652      	mov	r2, sl
 800a2a2:	465b      	mov	r3, fp
 800a2a4:	f7f6 f954 	bl	8000550 <__aeabi_dmul>
 800a2a8:	4652      	mov	r2, sl
 800a2aa:	465b      	mov	r3, fp
 800a2ac:	f7f5 ff9a 	bl	80001e4 <__adddf3>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	460b      	mov	r3, r1
 800a2b4:	f7f5 ff96 	bl	80001e4 <__adddf3>
 800a2b8:	a347      	add	r3, pc, #284	; (adr r3, 800a3d8 <__ieee754_asin+0x2e0>)
 800a2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2be:	f7f5 ff8f 	bl	80001e0 <__aeabi_dsub>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	460b      	mov	r3, r1
 800a2c6:	a142      	add	r1, pc, #264	; (adr r1, 800a3d0 <__ieee754_asin+0x2d8>)
 800a2c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a2cc:	f7f5 ff88 	bl	80001e0 <__aeabi_dsub>
 800a2d0:	9b01      	ldr	r3, [sp, #4]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	bfdc      	itt	le
 800a2d6:	4602      	movle	r2, r0
 800a2d8:	f101 4300 	addle.w	r3, r1, #2147483648	; 0x80000000
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	bfdc      	itt	le
 800a2e2:	4614      	movle	r4, r2
 800a2e4:	461d      	movle	r5, r3
 800a2e6:	e743      	b.n	800a170 <__ieee754_asin+0x78>
 800a2e8:	ee10 2a10 	vmov	r2, s0
 800a2ec:	ee10 0a10 	vmov	r0, s0
 800a2f0:	462b      	mov	r3, r5
 800a2f2:	4629      	mov	r1, r5
 800a2f4:	f7f6 f92c 	bl	8000550 <__aeabi_dmul>
 800a2f8:	a33b      	add	r3, pc, #236	; (adr r3, 800a3e8 <__ieee754_asin+0x2f0>)
 800a2fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2fe:	4606      	mov	r6, r0
 800a300:	460f      	mov	r7, r1
 800a302:	f7f6 f925 	bl	8000550 <__aeabi_dmul>
 800a306:	a33a      	add	r3, pc, #232	; (adr r3, 800a3f0 <__ieee754_asin+0x2f8>)
 800a308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a30c:	f7f5 ff6a 	bl	80001e4 <__adddf3>
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	f7f6 f91c 	bl	8000550 <__aeabi_dmul>
 800a318:	a337      	add	r3, pc, #220	; (adr r3, 800a3f8 <__ieee754_asin+0x300>)
 800a31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a31e:	f7f5 ff5f 	bl	80001e0 <__aeabi_dsub>
 800a322:	4632      	mov	r2, r6
 800a324:	463b      	mov	r3, r7
 800a326:	f7f6 f913 	bl	8000550 <__aeabi_dmul>
 800a32a:	a335      	add	r3, pc, #212	; (adr r3, 800a400 <__ieee754_asin+0x308>)
 800a32c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a330:	f7f5 ff58 	bl	80001e4 <__adddf3>
 800a334:	4632      	mov	r2, r6
 800a336:	463b      	mov	r3, r7
 800a338:	f7f6 f90a 	bl	8000550 <__aeabi_dmul>
 800a33c:	a332      	add	r3, pc, #200	; (adr r3, 800a408 <__ieee754_asin+0x310>)
 800a33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a342:	f7f5 ff4d 	bl	80001e0 <__aeabi_dsub>
 800a346:	4632      	mov	r2, r6
 800a348:	463b      	mov	r3, r7
 800a34a:	f7f6 f901 	bl	8000550 <__aeabi_dmul>
 800a34e:	a330      	add	r3, pc, #192	; (adr r3, 800a410 <__ieee754_asin+0x318>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f5 ff46 	bl	80001e4 <__adddf3>
 800a358:	4632      	mov	r2, r6
 800a35a:	463b      	mov	r3, r7
 800a35c:	f7f6 f8f8 	bl	8000550 <__aeabi_dmul>
 800a360:	a32d      	add	r3, pc, #180	; (adr r3, 800a418 <__ieee754_asin+0x320>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	4680      	mov	r8, r0
 800a368:	4689      	mov	r9, r1
 800a36a:	4630      	mov	r0, r6
 800a36c:	4639      	mov	r1, r7
 800a36e:	f7f6 f8ef 	bl	8000550 <__aeabi_dmul>
 800a372:	a32b      	add	r3, pc, #172	; (adr r3, 800a420 <__ieee754_asin+0x328>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f5 ff32 	bl	80001e0 <__aeabi_dsub>
 800a37c:	4632      	mov	r2, r6
 800a37e:	463b      	mov	r3, r7
 800a380:	f7f6 f8e6 	bl	8000550 <__aeabi_dmul>
 800a384:	a328      	add	r3, pc, #160	; (adr r3, 800a428 <__ieee754_asin+0x330>)
 800a386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38a:	f7f5 ff2b 	bl	80001e4 <__adddf3>
 800a38e:	4632      	mov	r2, r6
 800a390:	463b      	mov	r3, r7
 800a392:	f7f6 f8dd 	bl	8000550 <__aeabi_dmul>
 800a396:	a326      	add	r3, pc, #152	; (adr r3, 800a430 <__ieee754_asin+0x338>)
 800a398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a39c:	f7f5 ff20 	bl	80001e0 <__aeabi_dsub>
 800a3a0:	4632      	mov	r2, r6
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	f7f6 f8d4 	bl	8000550 <__aeabi_dmul>
 800a3a8:	4b25      	ldr	r3, [pc, #148]	; (800a440 <__ieee754_asin+0x348>)
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f7f5 ff1a 	bl	80001e4 <__adddf3>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4640      	mov	r0, r8
 800a3b6:	4649      	mov	r1, r9
 800a3b8:	f7f6 f9f4 	bl	80007a4 <__aeabi_ddiv>
 800a3bc:	4622      	mov	r2, r4
 800a3be:	462b      	mov	r3, r5
 800a3c0:	f7f6 f8c6 	bl	8000550 <__aeabi_dmul>
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	460b      	mov	r3, r1
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	4629      	mov	r1, r5
 800a3cc:	e6bf      	b.n	800a14e <__ieee754_asin+0x56>
 800a3ce:	bf00      	nop
 800a3d0:	54442d18 	.word	0x54442d18
 800a3d4:	3ff921fb 	.word	0x3ff921fb
 800a3d8:	33145c07 	.word	0x33145c07
 800a3dc:	3c91a626 	.word	0x3c91a626
 800a3e0:	8800759c 	.word	0x8800759c
 800a3e4:	7e37e43c 	.word	0x7e37e43c
 800a3e8:	0dfdf709 	.word	0x0dfdf709
 800a3ec:	3f023de1 	.word	0x3f023de1
 800a3f0:	7501b288 	.word	0x7501b288
 800a3f4:	3f49efe0 	.word	0x3f49efe0
 800a3f8:	b5688f3b 	.word	0xb5688f3b
 800a3fc:	3fa48228 	.word	0x3fa48228
 800a400:	0e884455 	.word	0x0e884455
 800a404:	3fc9c155 	.word	0x3fc9c155
 800a408:	03eb6f7d 	.word	0x03eb6f7d
 800a40c:	3fd4d612 	.word	0x3fd4d612
 800a410:	55555555 	.word	0x55555555
 800a414:	3fc55555 	.word	0x3fc55555
 800a418:	b12e9282 	.word	0xb12e9282
 800a41c:	3fb3b8c5 	.word	0x3fb3b8c5
 800a420:	1b8d0159 	.word	0x1b8d0159
 800a424:	3fe6066c 	.word	0x3fe6066c
 800a428:	9c598ac8 	.word	0x9c598ac8
 800a42c:	40002ae5 	.word	0x40002ae5
 800a430:	1c8a2d4b 	.word	0x1c8a2d4b
 800a434:	40033a27 	.word	0x40033a27
 800a438:	3fefffff 	.word	0x3fefffff
 800a43c:	3fdfffff 	.word	0x3fdfffff
 800a440:	3ff00000 	.word	0x3ff00000
 800a444:	3fe00000 	.word	0x3fe00000
 800a448:	3fef3332 	.word	0x3fef3332
 800a44c:	ee10 2a10 	vmov	r2, s0
 800a450:	ee10 0a10 	vmov	r0, s0
 800a454:	465b      	mov	r3, fp
 800a456:	4659      	mov	r1, fp
 800a458:	f7f5 fec4 	bl	80001e4 <__adddf3>
 800a45c:	4632      	mov	r2, r6
 800a45e:	463b      	mov	r3, r7
 800a460:	ec41 0b19 	vmov	d9, r0, r1
 800a464:	ec51 0b18 	vmov	r0, r1, d8
 800a468:	f7f6 f99c 	bl	80007a4 <__aeabi_ddiv>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	ec51 0b19 	vmov	r0, r1, d9
 800a474:	f7f6 f86c 	bl	8000550 <__aeabi_dmul>
 800a478:	f04f 0800 	mov.w	r8, #0
 800a47c:	4606      	mov	r6, r0
 800a47e:	460f      	mov	r7, r1
 800a480:	4642      	mov	r2, r8
 800a482:	465b      	mov	r3, fp
 800a484:	4640      	mov	r0, r8
 800a486:	4659      	mov	r1, fp
 800a488:	f7f6 f862 	bl	8000550 <__aeabi_dmul>
 800a48c:	4602      	mov	r2, r0
 800a48e:	460b      	mov	r3, r1
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f5 fea4 	bl	80001e0 <__aeabi_dsub>
 800a498:	4642      	mov	r2, r8
 800a49a:	4604      	mov	r4, r0
 800a49c:	460d      	mov	r5, r1
 800a49e:	465b      	mov	r3, fp
 800a4a0:	4650      	mov	r0, sl
 800a4a2:	4659      	mov	r1, fp
 800a4a4:	f7f5 fe9e 	bl	80001e4 <__adddf3>
 800a4a8:	4602      	mov	r2, r0
 800a4aa:	460b      	mov	r3, r1
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	4629      	mov	r1, r5
 800a4b0:	f7f6 f978 	bl	80007a4 <__aeabi_ddiv>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	f7f5 fe94 	bl	80001e4 <__adddf3>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	a113      	add	r1, pc, #76	; (adr r1, 800a510 <__ieee754_asin+0x418>)
 800a4c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4c6:	f7f5 fe8b 	bl	80001e0 <__aeabi_dsub>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	f7f5 fe85 	bl	80001e0 <__aeabi_dsub>
 800a4d6:	4642      	mov	r2, r8
 800a4d8:	4604      	mov	r4, r0
 800a4da:	460d      	mov	r5, r1
 800a4dc:	465b      	mov	r3, fp
 800a4de:	4640      	mov	r0, r8
 800a4e0:	4659      	mov	r1, fp
 800a4e2:	f7f5 fe7f 	bl	80001e4 <__adddf3>
 800a4e6:	4602      	mov	r2, r0
 800a4e8:	460b      	mov	r3, r1
 800a4ea:	a10b      	add	r1, pc, #44	; (adr r1, 800a518 <__ieee754_asin+0x420>)
 800a4ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4f0:	f7f5 fe76 	bl	80001e0 <__aeabi_dsub>
 800a4f4:	4602      	mov	r2, r0
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	4620      	mov	r0, r4
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	f7f5 fe70 	bl	80001e0 <__aeabi_dsub>
 800a500:	4602      	mov	r2, r0
 800a502:	460b      	mov	r3, r1
 800a504:	a104      	add	r1, pc, #16	; (adr r1, 800a518 <__ieee754_asin+0x420>)
 800a506:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a50a:	e6df      	b.n	800a2cc <__ieee754_asin+0x1d4>
 800a50c:	f3af 8000 	nop.w
 800a510:	33145c07 	.word	0x33145c07
 800a514:	3c91a626 	.word	0x3c91a626
 800a518:	54442d18 	.word	0x54442d18
 800a51c:	3fe921fb 	.word	0x3fe921fb

0800a520 <__ieee754_atan2>:
 800a520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a524:	ec57 6b11 	vmov	r6, r7, d1
 800a528:	4273      	negs	r3, r6
 800a52a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800a6b0 <__ieee754_atan2+0x190>
 800a52e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800a532:	4333      	orrs	r3, r6
 800a534:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800a538:	4573      	cmp	r3, lr
 800a53a:	ec51 0b10 	vmov	r0, r1, d0
 800a53e:	ee11 8a10 	vmov	r8, s2
 800a542:	d80a      	bhi.n	800a55a <__ieee754_atan2+0x3a>
 800a544:	4244      	negs	r4, r0
 800a546:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a54a:	4304      	orrs	r4, r0
 800a54c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800a550:	4574      	cmp	r4, lr
 800a552:	ee10 9a10 	vmov	r9, s0
 800a556:	468c      	mov	ip, r1
 800a558:	d907      	bls.n	800a56a <__ieee754_atan2+0x4a>
 800a55a:	4632      	mov	r2, r6
 800a55c:	463b      	mov	r3, r7
 800a55e:	f7f5 fe41 	bl	80001e4 <__adddf3>
 800a562:	ec41 0b10 	vmov	d0, r0, r1
 800a566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a56a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800a56e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800a572:	4334      	orrs	r4, r6
 800a574:	d103      	bne.n	800a57e <__ieee754_atan2+0x5e>
 800a576:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a57a:	f001 b825 	b.w	800b5c8 <atan>
 800a57e:	17bc      	asrs	r4, r7, #30
 800a580:	f004 0402 	and.w	r4, r4, #2
 800a584:	ea53 0909 	orrs.w	r9, r3, r9
 800a588:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800a58c:	d107      	bne.n	800a59e <__ieee754_atan2+0x7e>
 800a58e:	2c02      	cmp	r4, #2
 800a590:	d060      	beq.n	800a654 <__ieee754_atan2+0x134>
 800a592:	2c03      	cmp	r4, #3
 800a594:	d1e5      	bne.n	800a562 <__ieee754_atan2+0x42>
 800a596:	a142      	add	r1, pc, #264	; (adr r1, 800a6a0 <__ieee754_atan2+0x180>)
 800a598:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a59c:	e7e1      	b.n	800a562 <__ieee754_atan2+0x42>
 800a59e:	ea52 0808 	orrs.w	r8, r2, r8
 800a5a2:	d106      	bne.n	800a5b2 <__ieee754_atan2+0x92>
 800a5a4:	f1bc 0f00 	cmp.w	ip, #0
 800a5a8:	da5f      	bge.n	800a66a <__ieee754_atan2+0x14a>
 800a5aa:	a13f      	add	r1, pc, #252	; (adr r1, 800a6a8 <__ieee754_atan2+0x188>)
 800a5ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5b0:	e7d7      	b.n	800a562 <__ieee754_atan2+0x42>
 800a5b2:	4572      	cmp	r2, lr
 800a5b4:	d10f      	bne.n	800a5d6 <__ieee754_atan2+0xb6>
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5bc:	d107      	bne.n	800a5ce <__ieee754_atan2+0xae>
 800a5be:	2c02      	cmp	r4, #2
 800a5c0:	d84c      	bhi.n	800a65c <__ieee754_atan2+0x13c>
 800a5c2:	4b35      	ldr	r3, [pc, #212]	; (800a698 <__ieee754_atan2+0x178>)
 800a5c4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800a5c8:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a5cc:	e7c9      	b.n	800a562 <__ieee754_atan2+0x42>
 800a5ce:	2c02      	cmp	r4, #2
 800a5d0:	d848      	bhi.n	800a664 <__ieee754_atan2+0x144>
 800a5d2:	4b32      	ldr	r3, [pc, #200]	; (800a69c <__ieee754_atan2+0x17c>)
 800a5d4:	e7f6      	b.n	800a5c4 <__ieee754_atan2+0xa4>
 800a5d6:	4573      	cmp	r3, lr
 800a5d8:	d0e4      	beq.n	800a5a4 <__ieee754_atan2+0x84>
 800a5da:	1a9b      	subs	r3, r3, r2
 800a5dc:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800a5e0:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a5e4:	da1e      	bge.n	800a624 <__ieee754_atan2+0x104>
 800a5e6:	2f00      	cmp	r7, #0
 800a5e8:	da01      	bge.n	800a5ee <__ieee754_atan2+0xce>
 800a5ea:	323c      	adds	r2, #60	; 0x3c
 800a5ec:	db1e      	blt.n	800a62c <__ieee754_atan2+0x10c>
 800a5ee:	4632      	mov	r2, r6
 800a5f0:	463b      	mov	r3, r7
 800a5f2:	f7f6 f8d7 	bl	80007a4 <__aeabi_ddiv>
 800a5f6:	ec41 0b10 	vmov	d0, r0, r1
 800a5fa:	f001 f985 	bl	800b908 <fabs>
 800a5fe:	f000 ffe3 	bl	800b5c8 <atan>
 800a602:	ec51 0b10 	vmov	r0, r1, d0
 800a606:	2c01      	cmp	r4, #1
 800a608:	d013      	beq.n	800a632 <__ieee754_atan2+0x112>
 800a60a:	2c02      	cmp	r4, #2
 800a60c:	d015      	beq.n	800a63a <__ieee754_atan2+0x11a>
 800a60e:	2c00      	cmp	r4, #0
 800a610:	d0a7      	beq.n	800a562 <__ieee754_atan2+0x42>
 800a612:	a319      	add	r3, pc, #100	; (adr r3, 800a678 <__ieee754_atan2+0x158>)
 800a614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a618:	f7f5 fde2 	bl	80001e0 <__aeabi_dsub>
 800a61c:	a318      	add	r3, pc, #96	; (adr r3, 800a680 <__ieee754_atan2+0x160>)
 800a61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a622:	e014      	b.n	800a64e <__ieee754_atan2+0x12e>
 800a624:	a118      	add	r1, pc, #96	; (adr r1, 800a688 <__ieee754_atan2+0x168>)
 800a626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a62a:	e7ec      	b.n	800a606 <__ieee754_atan2+0xe6>
 800a62c:	2000      	movs	r0, #0
 800a62e:	2100      	movs	r1, #0
 800a630:	e7e9      	b.n	800a606 <__ieee754_atan2+0xe6>
 800a632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a636:	4619      	mov	r1, r3
 800a638:	e793      	b.n	800a562 <__ieee754_atan2+0x42>
 800a63a:	a30f      	add	r3, pc, #60	; (adr r3, 800a678 <__ieee754_atan2+0x158>)
 800a63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a640:	f7f5 fdce 	bl	80001e0 <__aeabi_dsub>
 800a644:	4602      	mov	r2, r0
 800a646:	460b      	mov	r3, r1
 800a648:	a10d      	add	r1, pc, #52	; (adr r1, 800a680 <__ieee754_atan2+0x160>)
 800a64a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a64e:	f7f5 fdc7 	bl	80001e0 <__aeabi_dsub>
 800a652:	e786      	b.n	800a562 <__ieee754_atan2+0x42>
 800a654:	a10a      	add	r1, pc, #40	; (adr r1, 800a680 <__ieee754_atan2+0x160>)
 800a656:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a65a:	e782      	b.n	800a562 <__ieee754_atan2+0x42>
 800a65c:	a10c      	add	r1, pc, #48	; (adr r1, 800a690 <__ieee754_atan2+0x170>)
 800a65e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a662:	e77e      	b.n	800a562 <__ieee754_atan2+0x42>
 800a664:	2000      	movs	r0, #0
 800a666:	2100      	movs	r1, #0
 800a668:	e77b      	b.n	800a562 <__ieee754_atan2+0x42>
 800a66a:	a107      	add	r1, pc, #28	; (adr r1, 800a688 <__ieee754_atan2+0x168>)
 800a66c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a670:	e777      	b.n	800a562 <__ieee754_atan2+0x42>
 800a672:	bf00      	nop
 800a674:	f3af 8000 	nop.w
 800a678:	33145c07 	.word	0x33145c07
 800a67c:	3ca1a626 	.word	0x3ca1a626
 800a680:	54442d18 	.word	0x54442d18
 800a684:	400921fb 	.word	0x400921fb
 800a688:	54442d18 	.word	0x54442d18
 800a68c:	3ff921fb 	.word	0x3ff921fb
 800a690:	54442d18 	.word	0x54442d18
 800a694:	3fe921fb 	.word	0x3fe921fb
 800a698:	0800bbd8 	.word	0x0800bbd8
 800a69c:	0800bbf0 	.word	0x0800bbf0
 800a6a0:	54442d18 	.word	0x54442d18
 800a6a4:	c00921fb 	.word	0xc00921fb
 800a6a8:	54442d18 	.word	0x54442d18
 800a6ac:	bff921fb 	.word	0xbff921fb
 800a6b0:	7ff00000 	.word	0x7ff00000
 800a6b4:	00000000 	.word	0x00000000

0800a6b8 <__ieee754_rem_pio2>:
 800a6b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6bc:	ed2d 8b02 	vpush	{d8}
 800a6c0:	ec55 4b10 	vmov	r4, r5, d0
 800a6c4:	4bca      	ldr	r3, [pc, #808]	; (800a9f0 <__ieee754_rem_pio2+0x338>)
 800a6c6:	b08b      	sub	sp, #44	; 0x2c
 800a6c8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a6cc:	4598      	cmp	r8, r3
 800a6ce:	4682      	mov	sl, r0
 800a6d0:	9502      	str	r5, [sp, #8]
 800a6d2:	dc08      	bgt.n	800a6e6 <__ieee754_rem_pio2+0x2e>
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	ed80 0b00 	vstr	d0, [r0]
 800a6dc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a6e0:	f04f 0b00 	mov.w	fp, #0
 800a6e4:	e028      	b.n	800a738 <__ieee754_rem_pio2+0x80>
 800a6e6:	4bc3      	ldr	r3, [pc, #780]	; (800a9f4 <__ieee754_rem_pio2+0x33c>)
 800a6e8:	4598      	cmp	r8, r3
 800a6ea:	dc78      	bgt.n	800a7de <__ieee754_rem_pio2+0x126>
 800a6ec:	9b02      	ldr	r3, [sp, #8]
 800a6ee:	4ec2      	ldr	r6, [pc, #776]	; (800a9f8 <__ieee754_rem_pio2+0x340>)
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	ee10 0a10 	vmov	r0, s0
 800a6f6:	a3b0      	add	r3, pc, #704	; (adr r3, 800a9b8 <__ieee754_rem_pio2+0x300>)
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	4629      	mov	r1, r5
 800a6fe:	dd39      	ble.n	800a774 <__ieee754_rem_pio2+0xbc>
 800a700:	f7f5 fd6e 	bl	80001e0 <__aeabi_dsub>
 800a704:	45b0      	cmp	r8, r6
 800a706:	4604      	mov	r4, r0
 800a708:	460d      	mov	r5, r1
 800a70a:	d01b      	beq.n	800a744 <__ieee754_rem_pio2+0x8c>
 800a70c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a9c0 <__ieee754_rem_pio2+0x308>)
 800a70e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a712:	f7f5 fd65 	bl	80001e0 <__aeabi_dsub>
 800a716:	4602      	mov	r2, r0
 800a718:	460b      	mov	r3, r1
 800a71a:	e9ca 2300 	strd	r2, r3, [sl]
 800a71e:	4620      	mov	r0, r4
 800a720:	4629      	mov	r1, r5
 800a722:	f7f5 fd5d 	bl	80001e0 <__aeabi_dsub>
 800a726:	a3a6      	add	r3, pc, #664	; (adr r3, 800a9c0 <__ieee754_rem_pio2+0x308>)
 800a728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a72c:	f7f5 fd58 	bl	80001e0 <__aeabi_dsub>
 800a730:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a734:	f04f 0b01 	mov.w	fp, #1
 800a738:	4658      	mov	r0, fp
 800a73a:	b00b      	add	sp, #44	; 0x2c
 800a73c:	ecbd 8b02 	vpop	{d8}
 800a740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a744:	a3a0      	add	r3, pc, #640	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x310>)
 800a746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74a:	f7f5 fd49 	bl	80001e0 <__aeabi_dsub>
 800a74e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x318>)
 800a750:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a754:	4604      	mov	r4, r0
 800a756:	460d      	mov	r5, r1
 800a758:	f7f5 fd42 	bl	80001e0 <__aeabi_dsub>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	e9ca 2300 	strd	r2, r3, [sl]
 800a764:	4620      	mov	r0, r4
 800a766:	4629      	mov	r1, r5
 800a768:	f7f5 fd3a 	bl	80001e0 <__aeabi_dsub>
 800a76c:	a398      	add	r3, pc, #608	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x318>)
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	e7db      	b.n	800a72c <__ieee754_rem_pio2+0x74>
 800a774:	f7f5 fd36 	bl	80001e4 <__adddf3>
 800a778:	45b0      	cmp	r8, r6
 800a77a:	4604      	mov	r4, r0
 800a77c:	460d      	mov	r5, r1
 800a77e:	d016      	beq.n	800a7ae <__ieee754_rem_pio2+0xf6>
 800a780:	a38f      	add	r3, pc, #572	; (adr r3, 800a9c0 <__ieee754_rem_pio2+0x308>)
 800a782:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a786:	f7f5 fd2d 	bl	80001e4 <__adddf3>
 800a78a:	4602      	mov	r2, r0
 800a78c:	460b      	mov	r3, r1
 800a78e:	e9ca 2300 	strd	r2, r3, [sl]
 800a792:	4620      	mov	r0, r4
 800a794:	4629      	mov	r1, r5
 800a796:	f7f5 fd23 	bl	80001e0 <__aeabi_dsub>
 800a79a:	a389      	add	r3, pc, #548	; (adr r3, 800a9c0 <__ieee754_rem_pio2+0x308>)
 800a79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7a0:	f7f5 fd20 	bl	80001e4 <__adddf3>
 800a7a4:	f04f 3bff 	mov.w	fp, #4294967295
 800a7a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a7ac:	e7c4      	b.n	800a738 <__ieee754_rem_pio2+0x80>
 800a7ae:	a386      	add	r3, pc, #536	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x310>)
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	f7f5 fd16 	bl	80001e4 <__adddf3>
 800a7b8:	a385      	add	r3, pc, #532	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x318>)
 800a7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	f7f5 fd0f 	bl	80001e4 <__adddf3>
 800a7c6:	4602      	mov	r2, r0
 800a7c8:	460b      	mov	r3, r1
 800a7ca:	e9ca 2300 	strd	r2, r3, [sl]
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	4629      	mov	r1, r5
 800a7d2:	f7f5 fd05 	bl	80001e0 <__aeabi_dsub>
 800a7d6:	a37e      	add	r3, pc, #504	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x318>)
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	e7e0      	b.n	800a7a0 <__ieee754_rem_pio2+0xe8>
 800a7de:	4b87      	ldr	r3, [pc, #540]	; (800a9fc <__ieee754_rem_pio2+0x344>)
 800a7e0:	4598      	cmp	r8, r3
 800a7e2:	f300 80d9 	bgt.w	800a998 <__ieee754_rem_pio2+0x2e0>
 800a7e6:	f001 f88f 	bl	800b908 <fabs>
 800a7ea:	ec55 4b10 	vmov	r4, r5, d0
 800a7ee:	ee10 0a10 	vmov	r0, s0
 800a7f2:	a379      	add	r3, pc, #484	; (adr r3, 800a9d8 <__ieee754_rem_pio2+0x320>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	4629      	mov	r1, r5
 800a7fa:	f7f5 fea9 	bl	8000550 <__aeabi_dmul>
 800a7fe:	4b80      	ldr	r3, [pc, #512]	; (800aa00 <__ieee754_rem_pio2+0x348>)
 800a800:	2200      	movs	r2, #0
 800a802:	f7f5 fcef 	bl	80001e4 <__adddf3>
 800a806:	f7f6 f953 	bl	8000ab0 <__aeabi_d2iz>
 800a80a:	4683      	mov	fp, r0
 800a80c:	f7f5 fe36 	bl	800047c <__aeabi_i2d>
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	ec43 2b18 	vmov	d8, r2, r3
 800a818:	a367      	add	r3, pc, #412	; (adr r3, 800a9b8 <__ieee754_rem_pio2+0x300>)
 800a81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a81e:	f7f5 fe97 	bl	8000550 <__aeabi_dmul>
 800a822:	4602      	mov	r2, r0
 800a824:	460b      	mov	r3, r1
 800a826:	4620      	mov	r0, r4
 800a828:	4629      	mov	r1, r5
 800a82a:	f7f5 fcd9 	bl	80001e0 <__aeabi_dsub>
 800a82e:	a364      	add	r3, pc, #400	; (adr r3, 800a9c0 <__ieee754_rem_pio2+0x308>)
 800a830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a834:	4606      	mov	r6, r0
 800a836:	460f      	mov	r7, r1
 800a838:	ec51 0b18 	vmov	r0, r1, d8
 800a83c:	f7f5 fe88 	bl	8000550 <__aeabi_dmul>
 800a840:	f1bb 0f1f 	cmp.w	fp, #31
 800a844:	4604      	mov	r4, r0
 800a846:	460d      	mov	r5, r1
 800a848:	dc0d      	bgt.n	800a866 <__ieee754_rem_pio2+0x1ae>
 800a84a:	4b6e      	ldr	r3, [pc, #440]	; (800aa04 <__ieee754_rem_pio2+0x34c>)
 800a84c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a854:	4543      	cmp	r3, r8
 800a856:	d006      	beq.n	800a866 <__ieee754_rem_pio2+0x1ae>
 800a858:	4622      	mov	r2, r4
 800a85a:	462b      	mov	r3, r5
 800a85c:	4630      	mov	r0, r6
 800a85e:	4639      	mov	r1, r7
 800a860:	f7f5 fcbe 	bl	80001e0 <__aeabi_dsub>
 800a864:	e00f      	b.n	800a886 <__ieee754_rem_pio2+0x1ce>
 800a866:	462b      	mov	r3, r5
 800a868:	4622      	mov	r2, r4
 800a86a:	4630      	mov	r0, r6
 800a86c:	4639      	mov	r1, r7
 800a86e:	f7f5 fcb7 	bl	80001e0 <__aeabi_dsub>
 800a872:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a876:	9303      	str	r3, [sp, #12]
 800a878:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a87c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a880:	f1b8 0f10 	cmp.w	r8, #16
 800a884:	dc02      	bgt.n	800a88c <__ieee754_rem_pio2+0x1d4>
 800a886:	e9ca 0100 	strd	r0, r1, [sl]
 800a88a:	e039      	b.n	800a900 <__ieee754_rem_pio2+0x248>
 800a88c:	a34e      	add	r3, pc, #312	; (adr r3, 800a9c8 <__ieee754_rem_pio2+0x310>)
 800a88e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a892:	ec51 0b18 	vmov	r0, r1, d8
 800a896:	f7f5 fe5b 	bl	8000550 <__aeabi_dmul>
 800a89a:	4604      	mov	r4, r0
 800a89c:	460d      	mov	r5, r1
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4630      	mov	r0, r6
 800a8a4:	4639      	mov	r1, r7
 800a8a6:	f7f5 fc9b 	bl	80001e0 <__aeabi_dsub>
 800a8aa:	4602      	mov	r2, r0
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	4689      	mov	r9, r1
 800a8b2:	4630      	mov	r0, r6
 800a8b4:	4639      	mov	r1, r7
 800a8b6:	f7f5 fc93 	bl	80001e0 <__aeabi_dsub>
 800a8ba:	4622      	mov	r2, r4
 800a8bc:	462b      	mov	r3, r5
 800a8be:	f7f5 fc8f 	bl	80001e0 <__aeabi_dsub>
 800a8c2:	a343      	add	r3, pc, #268	; (adr r3, 800a9d0 <__ieee754_rem_pio2+0x318>)
 800a8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	460d      	mov	r5, r1
 800a8cc:	ec51 0b18 	vmov	r0, r1, d8
 800a8d0:	f7f5 fe3e 	bl	8000550 <__aeabi_dmul>
 800a8d4:	4622      	mov	r2, r4
 800a8d6:	462b      	mov	r3, r5
 800a8d8:	f7f5 fc82 	bl	80001e0 <__aeabi_dsub>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4604      	mov	r4, r0
 800a8e2:	460d      	mov	r5, r1
 800a8e4:	4640      	mov	r0, r8
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	f7f5 fc7a 	bl	80001e0 <__aeabi_dsub>
 800a8ec:	9a03      	ldr	r2, [sp, #12]
 800a8ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a8f2:	1ad3      	subs	r3, r2, r3
 800a8f4:	2b31      	cmp	r3, #49	; 0x31
 800a8f6:	dc24      	bgt.n	800a942 <__ieee754_rem_pio2+0x28a>
 800a8f8:	e9ca 0100 	strd	r0, r1, [sl]
 800a8fc:	4646      	mov	r6, r8
 800a8fe:	464f      	mov	r7, r9
 800a900:	e9da 8900 	ldrd	r8, r9, [sl]
 800a904:	4630      	mov	r0, r6
 800a906:	4642      	mov	r2, r8
 800a908:	464b      	mov	r3, r9
 800a90a:	4639      	mov	r1, r7
 800a90c:	f7f5 fc68 	bl	80001e0 <__aeabi_dsub>
 800a910:	462b      	mov	r3, r5
 800a912:	4622      	mov	r2, r4
 800a914:	f7f5 fc64 	bl	80001e0 <__aeabi_dsub>
 800a918:	9b02      	ldr	r3, [sp, #8]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a920:	f6bf af0a 	bge.w	800a738 <__ieee754_rem_pio2+0x80>
 800a924:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a928:	f8ca 3004 	str.w	r3, [sl, #4]
 800a92c:	f8ca 8000 	str.w	r8, [sl]
 800a930:	f8ca 0008 	str.w	r0, [sl, #8]
 800a934:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a938:	f8ca 300c 	str.w	r3, [sl, #12]
 800a93c:	f1cb 0b00 	rsb	fp, fp, #0
 800a940:	e6fa      	b.n	800a738 <__ieee754_rem_pio2+0x80>
 800a942:	a327      	add	r3, pc, #156	; (adr r3, 800a9e0 <__ieee754_rem_pio2+0x328>)
 800a944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a948:	ec51 0b18 	vmov	r0, r1, d8
 800a94c:	f7f5 fe00 	bl	8000550 <__aeabi_dmul>
 800a950:	4604      	mov	r4, r0
 800a952:	460d      	mov	r5, r1
 800a954:	4602      	mov	r2, r0
 800a956:	460b      	mov	r3, r1
 800a958:	4640      	mov	r0, r8
 800a95a:	4649      	mov	r1, r9
 800a95c:	f7f5 fc40 	bl	80001e0 <__aeabi_dsub>
 800a960:	4602      	mov	r2, r0
 800a962:	460b      	mov	r3, r1
 800a964:	4606      	mov	r6, r0
 800a966:	460f      	mov	r7, r1
 800a968:	4640      	mov	r0, r8
 800a96a:	4649      	mov	r1, r9
 800a96c:	f7f5 fc38 	bl	80001e0 <__aeabi_dsub>
 800a970:	4622      	mov	r2, r4
 800a972:	462b      	mov	r3, r5
 800a974:	f7f5 fc34 	bl	80001e0 <__aeabi_dsub>
 800a978:	a31b      	add	r3, pc, #108	; (adr r3, 800a9e8 <__ieee754_rem_pio2+0x330>)
 800a97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a97e:	4604      	mov	r4, r0
 800a980:	460d      	mov	r5, r1
 800a982:	ec51 0b18 	vmov	r0, r1, d8
 800a986:	f7f5 fde3 	bl	8000550 <__aeabi_dmul>
 800a98a:	4622      	mov	r2, r4
 800a98c:	462b      	mov	r3, r5
 800a98e:	f7f5 fc27 	bl	80001e0 <__aeabi_dsub>
 800a992:	4604      	mov	r4, r0
 800a994:	460d      	mov	r5, r1
 800a996:	e75f      	b.n	800a858 <__ieee754_rem_pio2+0x1a0>
 800a998:	4b1b      	ldr	r3, [pc, #108]	; (800aa08 <__ieee754_rem_pio2+0x350>)
 800a99a:	4598      	cmp	r8, r3
 800a99c:	dd36      	ble.n	800aa0c <__ieee754_rem_pio2+0x354>
 800a99e:	ee10 2a10 	vmov	r2, s0
 800a9a2:	462b      	mov	r3, r5
 800a9a4:	4620      	mov	r0, r4
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	f7f5 fc1a 	bl	80001e0 <__aeabi_dsub>
 800a9ac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a9b0:	e9ca 0100 	strd	r0, r1, [sl]
 800a9b4:	e694      	b.n	800a6e0 <__ieee754_rem_pio2+0x28>
 800a9b6:	bf00      	nop
 800a9b8:	54400000 	.word	0x54400000
 800a9bc:	3ff921fb 	.word	0x3ff921fb
 800a9c0:	1a626331 	.word	0x1a626331
 800a9c4:	3dd0b461 	.word	0x3dd0b461
 800a9c8:	1a600000 	.word	0x1a600000
 800a9cc:	3dd0b461 	.word	0x3dd0b461
 800a9d0:	2e037073 	.word	0x2e037073
 800a9d4:	3ba3198a 	.word	0x3ba3198a
 800a9d8:	6dc9c883 	.word	0x6dc9c883
 800a9dc:	3fe45f30 	.word	0x3fe45f30
 800a9e0:	2e000000 	.word	0x2e000000
 800a9e4:	3ba3198a 	.word	0x3ba3198a
 800a9e8:	252049c1 	.word	0x252049c1
 800a9ec:	397b839a 	.word	0x397b839a
 800a9f0:	3fe921fb 	.word	0x3fe921fb
 800a9f4:	4002d97b 	.word	0x4002d97b
 800a9f8:	3ff921fb 	.word	0x3ff921fb
 800a9fc:	413921fb 	.word	0x413921fb
 800aa00:	3fe00000 	.word	0x3fe00000
 800aa04:	0800bc08 	.word	0x0800bc08
 800aa08:	7fefffff 	.word	0x7fefffff
 800aa0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800aa10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800aa14:	ee10 0a10 	vmov	r0, s0
 800aa18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800aa1c:	ee10 6a10 	vmov	r6, s0
 800aa20:	460f      	mov	r7, r1
 800aa22:	f7f6 f845 	bl	8000ab0 <__aeabi_d2iz>
 800aa26:	f7f5 fd29 	bl	800047c <__aeabi_i2d>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	460b      	mov	r3, r1
 800aa2e:	4630      	mov	r0, r6
 800aa30:	4639      	mov	r1, r7
 800aa32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa36:	f7f5 fbd3 	bl	80001e0 <__aeabi_dsub>
 800aa3a:	4b22      	ldr	r3, [pc, #136]	; (800aac4 <__ieee754_rem_pio2+0x40c>)
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f7f5 fd87 	bl	8000550 <__aeabi_dmul>
 800aa42:	460f      	mov	r7, r1
 800aa44:	4606      	mov	r6, r0
 800aa46:	f7f6 f833 	bl	8000ab0 <__aeabi_d2iz>
 800aa4a:	f7f5 fd17 	bl	800047c <__aeabi_i2d>
 800aa4e:	4602      	mov	r2, r0
 800aa50:	460b      	mov	r3, r1
 800aa52:	4630      	mov	r0, r6
 800aa54:	4639      	mov	r1, r7
 800aa56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aa5a:	f7f5 fbc1 	bl	80001e0 <__aeabi_dsub>
 800aa5e:	4b19      	ldr	r3, [pc, #100]	; (800aac4 <__ieee754_rem_pio2+0x40c>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	f7f5 fd75 	bl	8000550 <__aeabi_dmul>
 800aa66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aa6a:	ad04      	add	r5, sp, #16
 800aa6c:	f04f 0803 	mov.w	r8, #3
 800aa70:	46a9      	mov	r9, r5
 800aa72:	2600      	movs	r6, #0
 800aa74:	2700      	movs	r7, #0
 800aa76:	4632      	mov	r2, r6
 800aa78:	463b      	mov	r3, r7
 800aa7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800aa7e:	46c3      	mov	fp, r8
 800aa80:	3d08      	subs	r5, #8
 800aa82:	f108 38ff 	add.w	r8, r8, #4294967295
 800aa86:	f7f5 ffcb 	bl	8000a20 <__aeabi_dcmpeq>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d1f3      	bne.n	800aa76 <__ieee754_rem_pio2+0x3be>
 800aa8e:	4b0e      	ldr	r3, [pc, #56]	; (800aac8 <__ieee754_rem_pio2+0x410>)
 800aa90:	9301      	str	r3, [sp, #4]
 800aa92:	2302      	movs	r3, #2
 800aa94:	9300      	str	r3, [sp, #0]
 800aa96:	4622      	mov	r2, r4
 800aa98:	465b      	mov	r3, fp
 800aa9a:	4651      	mov	r1, sl
 800aa9c:	4648      	mov	r0, r9
 800aa9e:	f000 f993 	bl	800adc8 <__kernel_rem_pio2>
 800aaa2:	9b02      	ldr	r3, [sp, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	4683      	mov	fp, r0
 800aaa8:	f6bf ae46 	bge.w	800a738 <__ieee754_rem_pio2+0x80>
 800aaac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800aab0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aab4:	f8ca 3004 	str.w	r3, [sl, #4]
 800aab8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800aabc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aac0:	e73a      	b.n	800a938 <__ieee754_rem_pio2+0x280>
 800aac2:	bf00      	nop
 800aac4:	41700000 	.word	0x41700000
 800aac8:	0800bc88 	.word	0x0800bc88

0800aacc <__ieee754_sqrt>:
 800aacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	ec55 4b10 	vmov	r4, r5, d0
 800aad4:	4e56      	ldr	r6, [pc, #344]	; (800ac30 <__ieee754_sqrt+0x164>)
 800aad6:	43ae      	bics	r6, r5
 800aad8:	ee10 0a10 	vmov	r0, s0
 800aadc:	ee10 3a10 	vmov	r3, s0
 800aae0:	4629      	mov	r1, r5
 800aae2:	462a      	mov	r2, r5
 800aae4:	d110      	bne.n	800ab08 <__ieee754_sqrt+0x3c>
 800aae6:	ee10 2a10 	vmov	r2, s0
 800aaea:	462b      	mov	r3, r5
 800aaec:	f7f5 fd30 	bl	8000550 <__aeabi_dmul>
 800aaf0:	4602      	mov	r2, r0
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f7f5 fb74 	bl	80001e4 <__adddf3>
 800aafc:	4604      	mov	r4, r0
 800aafe:	460d      	mov	r5, r1
 800ab00:	ec45 4b10 	vmov	d0, r4, r5
 800ab04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab08:	2d00      	cmp	r5, #0
 800ab0a:	dc10      	bgt.n	800ab2e <__ieee754_sqrt+0x62>
 800ab0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ab10:	4330      	orrs	r0, r6
 800ab12:	d0f5      	beq.n	800ab00 <__ieee754_sqrt+0x34>
 800ab14:	b15d      	cbz	r5, 800ab2e <__ieee754_sqrt+0x62>
 800ab16:	ee10 2a10 	vmov	r2, s0
 800ab1a:	462b      	mov	r3, r5
 800ab1c:	ee10 0a10 	vmov	r0, s0
 800ab20:	f7f5 fb5e 	bl	80001e0 <__aeabi_dsub>
 800ab24:	4602      	mov	r2, r0
 800ab26:	460b      	mov	r3, r1
 800ab28:	f7f5 fe3c 	bl	80007a4 <__aeabi_ddiv>
 800ab2c:	e7e6      	b.n	800aafc <__ieee754_sqrt+0x30>
 800ab2e:	1509      	asrs	r1, r1, #20
 800ab30:	d076      	beq.n	800ac20 <__ieee754_sqrt+0x154>
 800ab32:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ab36:	07ce      	lsls	r6, r1, #31
 800ab38:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800ab3c:	bf5e      	ittt	pl
 800ab3e:	0fda      	lsrpl	r2, r3, #31
 800ab40:	005b      	lslpl	r3, r3, #1
 800ab42:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800ab46:	0fda      	lsrs	r2, r3, #31
 800ab48:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800ab4c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800ab50:	2000      	movs	r0, #0
 800ab52:	106d      	asrs	r5, r5, #1
 800ab54:	005b      	lsls	r3, r3, #1
 800ab56:	f04f 0e16 	mov.w	lr, #22
 800ab5a:	4684      	mov	ip, r0
 800ab5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab60:	eb0c 0401 	add.w	r4, ip, r1
 800ab64:	4294      	cmp	r4, r2
 800ab66:	bfde      	ittt	le
 800ab68:	1b12      	suble	r2, r2, r4
 800ab6a:	eb04 0c01 	addle.w	ip, r4, r1
 800ab6e:	1840      	addle	r0, r0, r1
 800ab70:	0052      	lsls	r2, r2, #1
 800ab72:	f1be 0e01 	subs.w	lr, lr, #1
 800ab76:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800ab7a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800ab7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ab82:	d1ed      	bne.n	800ab60 <__ieee754_sqrt+0x94>
 800ab84:	4671      	mov	r1, lr
 800ab86:	2720      	movs	r7, #32
 800ab88:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ab8c:	4562      	cmp	r2, ip
 800ab8e:	eb04 060e 	add.w	r6, r4, lr
 800ab92:	dc02      	bgt.n	800ab9a <__ieee754_sqrt+0xce>
 800ab94:	d113      	bne.n	800abbe <__ieee754_sqrt+0xf2>
 800ab96:	429e      	cmp	r6, r3
 800ab98:	d811      	bhi.n	800abbe <__ieee754_sqrt+0xf2>
 800ab9a:	2e00      	cmp	r6, #0
 800ab9c:	eb06 0e04 	add.w	lr, r6, r4
 800aba0:	da43      	bge.n	800ac2a <__ieee754_sqrt+0x15e>
 800aba2:	f1be 0f00 	cmp.w	lr, #0
 800aba6:	db40      	blt.n	800ac2a <__ieee754_sqrt+0x15e>
 800aba8:	f10c 0801 	add.w	r8, ip, #1
 800abac:	eba2 020c 	sub.w	r2, r2, ip
 800abb0:	429e      	cmp	r6, r3
 800abb2:	bf88      	it	hi
 800abb4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800abb8:	1b9b      	subs	r3, r3, r6
 800abba:	4421      	add	r1, r4
 800abbc:	46c4      	mov	ip, r8
 800abbe:	0052      	lsls	r2, r2, #1
 800abc0:	3f01      	subs	r7, #1
 800abc2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800abc6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800abca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abce:	d1dd      	bne.n	800ab8c <__ieee754_sqrt+0xc0>
 800abd0:	4313      	orrs	r3, r2
 800abd2:	d006      	beq.n	800abe2 <__ieee754_sqrt+0x116>
 800abd4:	1c4c      	adds	r4, r1, #1
 800abd6:	bf13      	iteet	ne
 800abd8:	3101      	addne	r1, #1
 800abda:	3001      	addeq	r0, #1
 800abdc:	4639      	moveq	r1, r7
 800abde:	f021 0101 	bicne.w	r1, r1, #1
 800abe2:	1043      	asrs	r3, r0, #1
 800abe4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800abe8:	0849      	lsrs	r1, r1, #1
 800abea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800abee:	07c2      	lsls	r2, r0, #31
 800abf0:	bf48      	it	mi
 800abf2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800abf6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800abfa:	460c      	mov	r4, r1
 800abfc:	463d      	mov	r5, r7
 800abfe:	e77f      	b.n	800ab00 <__ieee754_sqrt+0x34>
 800ac00:	0ada      	lsrs	r2, r3, #11
 800ac02:	3815      	subs	r0, #21
 800ac04:	055b      	lsls	r3, r3, #21
 800ac06:	2a00      	cmp	r2, #0
 800ac08:	d0fa      	beq.n	800ac00 <__ieee754_sqrt+0x134>
 800ac0a:	02d7      	lsls	r7, r2, #11
 800ac0c:	d50a      	bpl.n	800ac24 <__ieee754_sqrt+0x158>
 800ac0e:	f1c1 0420 	rsb	r4, r1, #32
 800ac12:	fa23 f404 	lsr.w	r4, r3, r4
 800ac16:	1e4d      	subs	r5, r1, #1
 800ac18:	408b      	lsls	r3, r1
 800ac1a:	4322      	orrs	r2, r4
 800ac1c:	1b41      	subs	r1, r0, r5
 800ac1e:	e788      	b.n	800ab32 <__ieee754_sqrt+0x66>
 800ac20:	4608      	mov	r0, r1
 800ac22:	e7f0      	b.n	800ac06 <__ieee754_sqrt+0x13a>
 800ac24:	0052      	lsls	r2, r2, #1
 800ac26:	3101      	adds	r1, #1
 800ac28:	e7ef      	b.n	800ac0a <__ieee754_sqrt+0x13e>
 800ac2a:	46e0      	mov	r8, ip
 800ac2c:	e7be      	b.n	800abac <__ieee754_sqrt+0xe0>
 800ac2e:	bf00      	nop
 800ac30:	7ff00000 	.word	0x7ff00000
 800ac34:	00000000 	.word	0x00000000

0800ac38 <__kernel_cos>:
 800ac38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac3c:	ec57 6b10 	vmov	r6, r7, d0
 800ac40:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ac44:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ac48:	ed8d 1b00 	vstr	d1, [sp]
 800ac4c:	da07      	bge.n	800ac5e <__kernel_cos+0x26>
 800ac4e:	ee10 0a10 	vmov	r0, s0
 800ac52:	4639      	mov	r1, r7
 800ac54:	f7f5 ff2c 	bl	8000ab0 <__aeabi_d2iz>
 800ac58:	2800      	cmp	r0, #0
 800ac5a:	f000 8088 	beq.w	800ad6e <__kernel_cos+0x136>
 800ac5e:	4632      	mov	r2, r6
 800ac60:	463b      	mov	r3, r7
 800ac62:	4630      	mov	r0, r6
 800ac64:	4639      	mov	r1, r7
 800ac66:	f7f5 fc73 	bl	8000550 <__aeabi_dmul>
 800ac6a:	4b51      	ldr	r3, [pc, #324]	; (800adb0 <__kernel_cos+0x178>)
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	460d      	mov	r5, r1
 800ac72:	f7f5 fc6d 	bl	8000550 <__aeabi_dmul>
 800ac76:	a340      	add	r3, pc, #256	; (adr r3, 800ad78 <__kernel_cos+0x140>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	4682      	mov	sl, r0
 800ac7e:	468b      	mov	fp, r1
 800ac80:	4620      	mov	r0, r4
 800ac82:	4629      	mov	r1, r5
 800ac84:	f7f5 fc64 	bl	8000550 <__aeabi_dmul>
 800ac88:	a33d      	add	r3, pc, #244	; (adr r3, 800ad80 <__kernel_cos+0x148>)
 800ac8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac8e:	f7f5 faa9 	bl	80001e4 <__adddf3>
 800ac92:	4622      	mov	r2, r4
 800ac94:	462b      	mov	r3, r5
 800ac96:	f7f5 fc5b 	bl	8000550 <__aeabi_dmul>
 800ac9a:	a33b      	add	r3, pc, #236	; (adr r3, 800ad88 <__kernel_cos+0x150>)
 800ac9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca0:	f7f5 fa9e 	bl	80001e0 <__aeabi_dsub>
 800aca4:	4622      	mov	r2, r4
 800aca6:	462b      	mov	r3, r5
 800aca8:	f7f5 fc52 	bl	8000550 <__aeabi_dmul>
 800acac:	a338      	add	r3, pc, #224	; (adr r3, 800ad90 <__kernel_cos+0x158>)
 800acae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb2:	f7f5 fa97 	bl	80001e4 <__adddf3>
 800acb6:	4622      	mov	r2, r4
 800acb8:	462b      	mov	r3, r5
 800acba:	f7f5 fc49 	bl	8000550 <__aeabi_dmul>
 800acbe:	a336      	add	r3, pc, #216	; (adr r3, 800ad98 <__kernel_cos+0x160>)
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	f7f5 fa8c 	bl	80001e0 <__aeabi_dsub>
 800acc8:	4622      	mov	r2, r4
 800acca:	462b      	mov	r3, r5
 800accc:	f7f5 fc40 	bl	8000550 <__aeabi_dmul>
 800acd0:	a333      	add	r3, pc, #204	; (adr r3, 800ada0 <__kernel_cos+0x168>)
 800acd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd6:	f7f5 fa85 	bl	80001e4 <__adddf3>
 800acda:	4622      	mov	r2, r4
 800acdc:	462b      	mov	r3, r5
 800acde:	f7f5 fc37 	bl	8000550 <__aeabi_dmul>
 800ace2:	4622      	mov	r2, r4
 800ace4:	462b      	mov	r3, r5
 800ace6:	f7f5 fc33 	bl	8000550 <__aeabi_dmul>
 800acea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800acee:	4604      	mov	r4, r0
 800acf0:	460d      	mov	r5, r1
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fc2b 	bl	8000550 <__aeabi_dmul>
 800acfa:	460b      	mov	r3, r1
 800acfc:	4602      	mov	r2, r0
 800acfe:	4629      	mov	r1, r5
 800ad00:	4620      	mov	r0, r4
 800ad02:	f7f5 fa6d 	bl	80001e0 <__aeabi_dsub>
 800ad06:	4b2b      	ldr	r3, [pc, #172]	; (800adb4 <__kernel_cos+0x17c>)
 800ad08:	4598      	cmp	r8, r3
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	460f      	mov	r7, r1
 800ad0e:	dc10      	bgt.n	800ad32 <__kernel_cos+0xfa>
 800ad10:	4602      	mov	r2, r0
 800ad12:	460b      	mov	r3, r1
 800ad14:	4650      	mov	r0, sl
 800ad16:	4659      	mov	r1, fp
 800ad18:	f7f5 fa62 	bl	80001e0 <__aeabi_dsub>
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4926      	ldr	r1, [pc, #152]	; (800adb8 <__kernel_cos+0x180>)
 800ad20:	4602      	mov	r2, r0
 800ad22:	2000      	movs	r0, #0
 800ad24:	f7f5 fa5c 	bl	80001e0 <__aeabi_dsub>
 800ad28:	ec41 0b10 	vmov	d0, r0, r1
 800ad2c:	b003      	add	sp, #12
 800ad2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad32:	4b22      	ldr	r3, [pc, #136]	; (800adbc <__kernel_cos+0x184>)
 800ad34:	4920      	ldr	r1, [pc, #128]	; (800adb8 <__kernel_cos+0x180>)
 800ad36:	4598      	cmp	r8, r3
 800ad38:	bfcc      	ite	gt
 800ad3a:	4d21      	ldrgt	r5, [pc, #132]	; (800adc0 <__kernel_cos+0x188>)
 800ad3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ad40:	2400      	movs	r4, #0
 800ad42:	4622      	mov	r2, r4
 800ad44:	462b      	mov	r3, r5
 800ad46:	2000      	movs	r0, #0
 800ad48:	f7f5 fa4a 	bl	80001e0 <__aeabi_dsub>
 800ad4c:	4622      	mov	r2, r4
 800ad4e:	4680      	mov	r8, r0
 800ad50:	4689      	mov	r9, r1
 800ad52:	462b      	mov	r3, r5
 800ad54:	4650      	mov	r0, sl
 800ad56:	4659      	mov	r1, fp
 800ad58:	f7f5 fa42 	bl	80001e0 <__aeabi_dsub>
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	f7f5 fa3e 	bl	80001e0 <__aeabi_dsub>
 800ad64:	4602      	mov	r2, r0
 800ad66:	460b      	mov	r3, r1
 800ad68:	4640      	mov	r0, r8
 800ad6a:	4649      	mov	r1, r9
 800ad6c:	e7da      	b.n	800ad24 <__kernel_cos+0xec>
 800ad6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ada8 <__kernel_cos+0x170>
 800ad72:	e7db      	b.n	800ad2c <__kernel_cos+0xf4>
 800ad74:	f3af 8000 	nop.w
 800ad78:	be8838d4 	.word	0xbe8838d4
 800ad7c:	bda8fae9 	.word	0xbda8fae9
 800ad80:	bdb4b1c4 	.word	0xbdb4b1c4
 800ad84:	3e21ee9e 	.word	0x3e21ee9e
 800ad88:	809c52ad 	.word	0x809c52ad
 800ad8c:	3e927e4f 	.word	0x3e927e4f
 800ad90:	19cb1590 	.word	0x19cb1590
 800ad94:	3efa01a0 	.word	0x3efa01a0
 800ad98:	16c15177 	.word	0x16c15177
 800ad9c:	3f56c16c 	.word	0x3f56c16c
 800ada0:	5555554c 	.word	0x5555554c
 800ada4:	3fa55555 	.word	0x3fa55555
 800ada8:	00000000 	.word	0x00000000
 800adac:	3ff00000 	.word	0x3ff00000
 800adb0:	3fe00000 	.word	0x3fe00000
 800adb4:	3fd33332 	.word	0x3fd33332
 800adb8:	3ff00000 	.word	0x3ff00000
 800adbc:	3fe90000 	.word	0x3fe90000
 800adc0:	3fd20000 	.word	0x3fd20000
 800adc4:	00000000 	.word	0x00000000

0800adc8 <__kernel_rem_pio2>:
 800adc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adcc:	ed2d 8b02 	vpush	{d8}
 800add0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800add4:	f112 0f14 	cmn.w	r2, #20
 800add8:	9308      	str	r3, [sp, #32]
 800adda:	9101      	str	r1, [sp, #4]
 800addc:	4bc6      	ldr	r3, [pc, #792]	; (800b0f8 <__kernel_rem_pio2+0x330>)
 800adde:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ade0:	9009      	str	r0, [sp, #36]	; 0x24
 800ade2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ade6:	9304      	str	r3, [sp, #16]
 800ade8:	9b08      	ldr	r3, [sp, #32]
 800adea:	f103 33ff 	add.w	r3, r3, #4294967295
 800adee:	bfa8      	it	ge
 800adf0:	1ed4      	subge	r4, r2, #3
 800adf2:	9306      	str	r3, [sp, #24]
 800adf4:	bfb2      	itee	lt
 800adf6:	2400      	movlt	r4, #0
 800adf8:	2318      	movge	r3, #24
 800adfa:	fb94 f4f3 	sdivge	r4, r4, r3
 800adfe:	f06f 0317 	mvn.w	r3, #23
 800ae02:	fb04 3303 	mla	r3, r4, r3, r3
 800ae06:	eb03 0a02 	add.w	sl, r3, r2
 800ae0a:	9b04      	ldr	r3, [sp, #16]
 800ae0c:	9a06      	ldr	r2, [sp, #24]
 800ae0e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b0e8 <__kernel_rem_pio2+0x320>
 800ae12:	eb03 0802 	add.w	r8, r3, r2
 800ae16:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ae18:	1aa7      	subs	r7, r4, r2
 800ae1a:	ae20      	add	r6, sp, #128	; 0x80
 800ae1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae20:	2500      	movs	r5, #0
 800ae22:	4545      	cmp	r5, r8
 800ae24:	dd18      	ble.n	800ae58 <__kernel_rem_pio2+0x90>
 800ae26:	9b08      	ldr	r3, [sp, #32]
 800ae28:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ae2c:	aa20      	add	r2, sp, #128	; 0x80
 800ae2e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800b0e8 <__kernel_rem_pio2+0x320>
 800ae32:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ae36:	f1c3 0301 	rsb	r3, r3, #1
 800ae3a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ae3e:	9307      	str	r3, [sp, #28]
 800ae40:	9b07      	ldr	r3, [sp, #28]
 800ae42:	9a04      	ldr	r2, [sp, #16]
 800ae44:	4443      	add	r3, r8
 800ae46:	429a      	cmp	r2, r3
 800ae48:	db2f      	blt.n	800aeaa <__kernel_rem_pio2+0xe2>
 800ae4a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ae4e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ae52:	462f      	mov	r7, r5
 800ae54:	2600      	movs	r6, #0
 800ae56:	e01b      	b.n	800ae90 <__kernel_rem_pio2+0xc8>
 800ae58:	42ef      	cmn	r7, r5
 800ae5a:	d407      	bmi.n	800ae6c <__kernel_rem_pio2+0xa4>
 800ae5c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae60:	f7f5 fb0c 	bl	800047c <__aeabi_i2d>
 800ae64:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae68:	3501      	adds	r5, #1
 800ae6a:	e7da      	b.n	800ae22 <__kernel_rem_pio2+0x5a>
 800ae6c:	ec51 0b18 	vmov	r0, r1, d8
 800ae70:	e7f8      	b.n	800ae64 <__kernel_rem_pio2+0x9c>
 800ae72:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae76:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ae7a:	f7f5 fb69 	bl	8000550 <__aeabi_dmul>
 800ae7e:	4602      	mov	r2, r0
 800ae80:	460b      	mov	r3, r1
 800ae82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ae86:	f7f5 f9ad 	bl	80001e4 <__adddf3>
 800ae8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae8e:	3601      	adds	r6, #1
 800ae90:	9b06      	ldr	r3, [sp, #24]
 800ae92:	429e      	cmp	r6, r3
 800ae94:	f1a7 0708 	sub.w	r7, r7, #8
 800ae98:	ddeb      	ble.n	800ae72 <__kernel_rem_pio2+0xaa>
 800ae9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae9e:	3508      	adds	r5, #8
 800aea0:	ecab 7b02 	vstmia	fp!, {d7}
 800aea4:	f108 0801 	add.w	r8, r8, #1
 800aea8:	e7ca      	b.n	800ae40 <__kernel_rem_pio2+0x78>
 800aeaa:	9b04      	ldr	r3, [sp, #16]
 800aeac:	aa0c      	add	r2, sp, #48	; 0x30
 800aeae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aeb2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aeb4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800aeb6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aeba:	9c04      	ldr	r4, [sp, #16]
 800aebc:	930a      	str	r3, [sp, #40]	; 0x28
 800aebe:	ab98      	add	r3, sp, #608	; 0x260
 800aec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aec4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800aec8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800aecc:	f8cd b008 	str.w	fp, [sp, #8]
 800aed0:	4625      	mov	r5, r4
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	dc78      	bgt.n	800afc8 <__kernel_rem_pio2+0x200>
 800aed6:	ec47 6b10 	vmov	d0, r6, r7
 800aeda:	4650      	mov	r0, sl
 800aedc:	f000 fda8 	bl	800ba30 <scalbn>
 800aee0:	ec57 6b10 	vmov	r6, r7, d0
 800aee4:	2200      	movs	r2, #0
 800aee6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800aeea:	ee10 0a10 	vmov	r0, s0
 800aeee:	4639      	mov	r1, r7
 800aef0:	f7f5 fb2e 	bl	8000550 <__aeabi_dmul>
 800aef4:	ec41 0b10 	vmov	d0, r0, r1
 800aef8:	f000 fd12 	bl	800b920 <floor>
 800aefc:	4b7f      	ldr	r3, [pc, #508]	; (800b0fc <__kernel_rem_pio2+0x334>)
 800aefe:	ec51 0b10 	vmov	r0, r1, d0
 800af02:	2200      	movs	r2, #0
 800af04:	f7f5 fb24 	bl	8000550 <__aeabi_dmul>
 800af08:	4602      	mov	r2, r0
 800af0a:	460b      	mov	r3, r1
 800af0c:	4630      	mov	r0, r6
 800af0e:	4639      	mov	r1, r7
 800af10:	f7f5 f966 	bl	80001e0 <__aeabi_dsub>
 800af14:	460f      	mov	r7, r1
 800af16:	4606      	mov	r6, r0
 800af18:	f7f5 fdca 	bl	8000ab0 <__aeabi_d2iz>
 800af1c:	9007      	str	r0, [sp, #28]
 800af1e:	f7f5 faad 	bl	800047c <__aeabi_i2d>
 800af22:	4602      	mov	r2, r0
 800af24:	460b      	mov	r3, r1
 800af26:	4630      	mov	r0, r6
 800af28:	4639      	mov	r1, r7
 800af2a:	f7f5 f959 	bl	80001e0 <__aeabi_dsub>
 800af2e:	f1ba 0f00 	cmp.w	sl, #0
 800af32:	4606      	mov	r6, r0
 800af34:	460f      	mov	r7, r1
 800af36:	dd70      	ble.n	800b01a <__kernel_rem_pio2+0x252>
 800af38:	1e62      	subs	r2, r4, #1
 800af3a:	ab0c      	add	r3, sp, #48	; 0x30
 800af3c:	9d07      	ldr	r5, [sp, #28]
 800af3e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af42:	f1ca 0118 	rsb	r1, sl, #24
 800af46:	fa40 f301 	asr.w	r3, r0, r1
 800af4a:	441d      	add	r5, r3
 800af4c:	408b      	lsls	r3, r1
 800af4e:	1ac0      	subs	r0, r0, r3
 800af50:	ab0c      	add	r3, sp, #48	; 0x30
 800af52:	9507      	str	r5, [sp, #28]
 800af54:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800af58:	f1ca 0317 	rsb	r3, sl, #23
 800af5c:	fa40 f303 	asr.w	r3, r0, r3
 800af60:	9302      	str	r3, [sp, #8]
 800af62:	9b02      	ldr	r3, [sp, #8]
 800af64:	2b00      	cmp	r3, #0
 800af66:	dd66      	ble.n	800b036 <__kernel_rem_pio2+0x26e>
 800af68:	9b07      	ldr	r3, [sp, #28]
 800af6a:	2200      	movs	r2, #0
 800af6c:	3301      	adds	r3, #1
 800af6e:	9307      	str	r3, [sp, #28]
 800af70:	4615      	mov	r5, r2
 800af72:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800af76:	4294      	cmp	r4, r2
 800af78:	f300 8099 	bgt.w	800b0ae <__kernel_rem_pio2+0x2e6>
 800af7c:	f1ba 0f00 	cmp.w	sl, #0
 800af80:	dd07      	ble.n	800af92 <__kernel_rem_pio2+0x1ca>
 800af82:	f1ba 0f01 	cmp.w	sl, #1
 800af86:	f000 80a5 	beq.w	800b0d4 <__kernel_rem_pio2+0x30c>
 800af8a:	f1ba 0f02 	cmp.w	sl, #2
 800af8e:	f000 80c1 	beq.w	800b114 <__kernel_rem_pio2+0x34c>
 800af92:	9b02      	ldr	r3, [sp, #8]
 800af94:	2b02      	cmp	r3, #2
 800af96:	d14e      	bne.n	800b036 <__kernel_rem_pio2+0x26e>
 800af98:	4632      	mov	r2, r6
 800af9a:	463b      	mov	r3, r7
 800af9c:	4958      	ldr	r1, [pc, #352]	; (800b100 <__kernel_rem_pio2+0x338>)
 800af9e:	2000      	movs	r0, #0
 800afa0:	f7f5 f91e 	bl	80001e0 <__aeabi_dsub>
 800afa4:	4606      	mov	r6, r0
 800afa6:	460f      	mov	r7, r1
 800afa8:	2d00      	cmp	r5, #0
 800afaa:	d044      	beq.n	800b036 <__kernel_rem_pio2+0x26e>
 800afac:	4650      	mov	r0, sl
 800afae:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b0f0 <__kernel_rem_pio2+0x328>
 800afb2:	f000 fd3d 	bl	800ba30 <scalbn>
 800afb6:	4630      	mov	r0, r6
 800afb8:	4639      	mov	r1, r7
 800afba:	ec53 2b10 	vmov	r2, r3, d0
 800afbe:	f7f5 f90f 	bl	80001e0 <__aeabi_dsub>
 800afc2:	4606      	mov	r6, r0
 800afc4:	460f      	mov	r7, r1
 800afc6:	e036      	b.n	800b036 <__kernel_rem_pio2+0x26e>
 800afc8:	4b4e      	ldr	r3, [pc, #312]	; (800b104 <__kernel_rem_pio2+0x33c>)
 800afca:	2200      	movs	r2, #0
 800afcc:	4630      	mov	r0, r6
 800afce:	4639      	mov	r1, r7
 800afd0:	f7f5 fabe 	bl	8000550 <__aeabi_dmul>
 800afd4:	f7f5 fd6c 	bl	8000ab0 <__aeabi_d2iz>
 800afd8:	f7f5 fa50 	bl	800047c <__aeabi_i2d>
 800afdc:	4b4a      	ldr	r3, [pc, #296]	; (800b108 <__kernel_rem_pio2+0x340>)
 800afde:	2200      	movs	r2, #0
 800afe0:	4680      	mov	r8, r0
 800afe2:	4689      	mov	r9, r1
 800afe4:	f7f5 fab4 	bl	8000550 <__aeabi_dmul>
 800afe8:	4602      	mov	r2, r0
 800afea:	460b      	mov	r3, r1
 800afec:	4630      	mov	r0, r6
 800afee:	4639      	mov	r1, r7
 800aff0:	f7f5 f8f6 	bl	80001e0 <__aeabi_dsub>
 800aff4:	f7f5 fd5c 	bl	8000ab0 <__aeabi_d2iz>
 800aff8:	9b02      	ldr	r3, [sp, #8]
 800affa:	f843 0b04 	str.w	r0, [r3], #4
 800affe:	3d01      	subs	r5, #1
 800b000:	9302      	str	r3, [sp, #8]
 800b002:	ab70      	add	r3, sp, #448	; 0x1c0
 800b004:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	4640      	mov	r0, r8
 800b00e:	4649      	mov	r1, r9
 800b010:	f7f5 f8e8 	bl	80001e4 <__adddf3>
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	e75b      	b.n	800aed2 <__kernel_rem_pio2+0x10a>
 800b01a:	d105      	bne.n	800b028 <__kernel_rem_pio2+0x260>
 800b01c:	1e63      	subs	r3, r4, #1
 800b01e:	aa0c      	add	r2, sp, #48	; 0x30
 800b020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b024:	15c3      	asrs	r3, r0, #23
 800b026:	e79b      	b.n	800af60 <__kernel_rem_pio2+0x198>
 800b028:	4b38      	ldr	r3, [pc, #224]	; (800b10c <__kernel_rem_pio2+0x344>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	f7f5 fd16 	bl	8000a5c <__aeabi_dcmpge>
 800b030:	2800      	cmp	r0, #0
 800b032:	d139      	bne.n	800b0a8 <__kernel_rem_pio2+0x2e0>
 800b034:	9002      	str	r0, [sp, #8]
 800b036:	2200      	movs	r2, #0
 800b038:	2300      	movs	r3, #0
 800b03a:	4630      	mov	r0, r6
 800b03c:	4639      	mov	r1, r7
 800b03e:	f7f5 fcef 	bl	8000a20 <__aeabi_dcmpeq>
 800b042:	2800      	cmp	r0, #0
 800b044:	f000 80b4 	beq.w	800b1b0 <__kernel_rem_pio2+0x3e8>
 800b048:	f104 3bff 	add.w	fp, r4, #4294967295
 800b04c:	465b      	mov	r3, fp
 800b04e:	2200      	movs	r2, #0
 800b050:	9904      	ldr	r1, [sp, #16]
 800b052:	428b      	cmp	r3, r1
 800b054:	da65      	bge.n	800b122 <__kernel_rem_pio2+0x35a>
 800b056:	2a00      	cmp	r2, #0
 800b058:	d07b      	beq.n	800b152 <__kernel_rem_pio2+0x38a>
 800b05a:	ab0c      	add	r3, sp, #48	; 0x30
 800b05c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b060:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800b064:	2b00      	cmp	r3, #0
 800b066:	f000 80a0 	beq.w	800b1aa <__kernel_rem_pio2+0x3e2>
 800b06a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800b0f0 <__kernel_rem_pio2+0x328>
 800b06e:	4650      	mov	r0, sl
 800b070:	f000 fcde 	bl	800ba30 <scalbn>
 800b074:	4f23      	ldr	r7, [pc, #140]	; (800b104 <__kernel_rem_pio2+0x33c>)
 800b076:	ec55 4b10 	vmov	r4, r5, d0
 800b07a:	46d8      	mov	r8, fp
 800b07c:	2600      	movs	r6, #0
 800b07e:	f1b8 0f00 	cmp.w	r8, #0
 800b082:	f280 80cf 	bge.w	800b224 <__kernel_rem_pio2+0x45c>
 800b086:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800b0e8 <__kernel_rem_pio2+0x320>
 800b08a:	465f      	mov	r7, fp
 800b08c:	f04f 0800 	mov.w	r8, #0
 800b090:	2f00      	cmp	r7, #0
 800b092:	f2c0 80fd 	blt.w	800b290 <__kernel_rem_pio2+0x4c8>
 800b096:	ab70      	add	r3, sp, #448	; 0x1c0
 800b098:	f8df a074 	ldr.w	sl, [pc, #116]	; 800b110 <__kernel_rem_pio2+0x348>
 800b09c:	ec55 4b18 	vmov	r4, r5, d8
 800b0a0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800b0a4:	2600      	movs	r6, #0
 800b0a6:	e0e5      	b.n	800b274 <__kernel_rem_pio2+0x4ac>
 800b0a8:	2302      	movs	r3, #2
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	e75c      	b.n	800af68 <__kernel_rem_pio2+0x1a0>
 800b0ae:	f8db 3000 	ldr.w	r3, [fp]
 800b0b2:	b955      	cbnz	r5, 800b0ca <__kernel_rem_pio2+0x302>
 800b0b4:	b123      	cbz	r3, 800b0c0 <__kernel_rem_pio2+0x2f8>
 800b0b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b0ba:	f8cb 3000 	str.w	r3, [fp]
 800b0be:	2301      	movs	r3, #1
 800b0c0:	3201      	adds	r2, #1
 800b0c2:	f10b 0b04 	add.w	fp, fp, #4
 800b0c6:	461d      	mov	r5, r3
 800b0c8:	e755      	b.n	800af76 <__kernel_rem_pio2+0x1ae>
 800b0ca:	1acb      	subs	r3, r1, r3
 800b0cc:	f8cb 3000 	str.w	r3, [fp]
 800b0d0:	462b      	mov	r3, r5
 800b0d2:	e7f5      	b.n	800b0c0 <__kernel_rem_pio2+0x2f8>
 800b0d4:	1e62      	subs	r2, r4, #1
 800b0d6:	ab0c      	add	r3, sp, #48	; 0x30
 800b0d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b0e0:	a90c      	add	r1, sp, #48	; 0x30
 800b0e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b0e6:	e754      	b.n	800af92 <__kernel_rem_pio2+0x1ca>
	...
 800b0f4:	3ff00000 	.word	0x3ff00000
 800b0f8:	0800bdd0 	.word	0x0800bdd0
 800b0fc:	40200000 	.word	0x40200000
 800b100:	3ff00000 	.word	0x3ff00000
 800b104:	3e700000 	.word	0x3e700000
 800b108:	41700000 	.word	0x41700000
 800b10c:	3fe00000 	.word	0x3fe00000
 800b110:	0800bd90 	.word	0x0800bd90
 800b114:	1e62      	subs	r2, r4, #1
 800b116:	ab0c      	add	r3, sp, #48	; 0x30
 800b118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b120:	e7de      	b.n	800b0e0 <__kernel_rem_pio2+0x318>
 800b122:	a90c      	add	r1, sp, #48	; 0x30
 800b124:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b128:	3b01      	subs	r3, #1
 800b12a:	430a      	orrs	r2, r1
 800b12c:	e790      	b.n	800b050 <__kernel_rem_pio2+0x288>
 800b12e:	3301      	adds	r3, #1
 800b130:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b134:	2900      	cmp	r1, #0
 800b136:	d0fa      	beq.n	800b12e <__kernel_rem_pio2+0x366>
 800b138:	9a08      	ldr	r2, [sp, #32]
 800b13a:	18e3      	adds	r3, r4, r3
 800b13c:	18a6      	adds	r6, r4, r2
 800b13e:	aa20      	add	r2, sp, #128	; 0x80
 800b140:	1c65      	adds	r5, r4, #1
 800b142:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b146:	9302      	str	r3, [sp, #8]
 800b148:	9b02      	ldr	r3, [sp, #8]
 800b14a:	42ab      	cmp	r3, r5
 800b14c:	da04      	bge.n	800b158 <__kernel_rem_pio2+0x390>
 800b14e:	461c      	mov	r4, r3
 800b150:	e6b5      	b.n	800aebe <__kernel_rem_pio2+0xf6>
 800b152:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b154:	2301      	movs	r3, #1
 800b156:	e7eb      	b.n	800b130 <__kernel_rem_pio2+0x368>
 800b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b15e:	f7f5 f98d 	bl	800047c <__aeabi_i2d>
 800b162:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	46b3      	mov	fp, r6
 800b16a:	461c      	mov	r4, r3
 800b16c:	2700      	movs	r7, #0
 800b16e:	f04f 0800 	mov.w	r8, #0
 800b172:	f04f 0900 	mov.w	r9, #0
 800b176:	9b06      	ldr	r3, [sp, #24]
 800b178:	429f      	cmp	r7, r3
 800b17a:	dd06      	ble.n	800b18a <__kernel_rem_pio2+0x3c2>
 800b17c:	ab70      	add	r3, sp, #448	; 0x1c0
 800b17e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b182:	e9c3 8900 	strd	r8, r9, [r3]
 800b186:	3501      	adds	r5, #1
 800b188:	e7de      	b.n	800b148 <__kernel_rem_pio2+0x380>
 800b18a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b18e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b192:	f7f5 f9dd 	bl	8000550 <__aeabi_dmul>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4640      	mov	r0, r8
 800b19c:	4649      	mov	r1, r9
 800b19e:	f7f5 f821 	bl	80001e4 <__adddf3>
 800b1a2:	3701      	adds	r7, #1
 800b1a4:	4680      	mov	r8, r0
 800b1a6:	4689      	mov	r9, r1
 800b1a8:	e7e5      	b.n	800b176 <__kernel_rem_pio2+0x3ae>
 800b1aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1ae:	e754      	b.n	800b05a <__kernel_rem_pio2+0x292>
 800b1b0:	ec47 6b10 	vmov	d0, r6, r7
 800b1b4:	f1ca 0000 	rsb	r0, sl, #0
 800b1b8:	f000 fc3a 	bl	800ba30 <scalbn>
 800b1bc:	ec57 6b10 	vmov	r6, r7, d0
 800b1c0:	4b9f      	ldr	r3, [pc, #636]	; (800b440 <__kernel_rem_pio2+0x678>)
 800b1c2:	ee10 0a10 	vmov	r0, s0
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	f7f5 fc47 	bl	8000a5c <__aeabi_dcmpge>
 800b1ce:	b300      	cbz	r0, 800b212 <__kernel_rem_pio2+0x44a>
 800b1d0:	4b9c      	ldr	r3, [pc, #624]	; (800b444 <__kernel_rem_pio2+0x67c>)
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	f7f5 f9ba 	bl	8000550 <__aeabi_dmul>
 800b1dc:	f7f5 fc68 	bl	8000ab0 <__aeabi_d2iz>
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	f7f5 f94b 	bl	800047c <__aeabi_i2d>
 800b1e6:	4b96      	ldr	r3, [pc, #600]	; (800b440 <__kernel_rem_pio2+0x678>)
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	f7f5 f9b1 	bl	8000550 <__aeabi_dmul>
 800b1ee:	460b      	mov	r3, r1
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	4639      	mov	r1, r7
 800b1f4:	4630      	mov	r0, r6
 800b1f6:	f7f4 fff3 	bl	80001e0 <__aeabi_dsub>
 800b1fa:	f7f5 fc59 	bl	8000ab0 <__aeabi_d2iz>
 800b1fe:	f104 0b01 	add.w	fp, r4, #1
 800b202:	ab0c      	add	r3, sp, #48	; 0x30
 800b204:	f10a 0a18 	add.w	sl, sl, #24
 800b208:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b20c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800b210:	e72b      	b.n	800b06a <__kernel_rem_pio2+0x2a2>
 800b212:	4630      	mov	r0, r6
 800b214:	4639      	mov	r1, r7
 800b216:	f7f5 fc4b 	bl	8000ab0 <__aeabi_d2iz>
 800b21a:	ab0c      	add	r3, sp, #48	; 0x30
 800b21c:	46a3      	mov	fp, r4
 800b21e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b222:	e722      	b.n	800b06a <__kernel_rem_pio2+0x2a2>
 800b224:	ab70      	add	r3, sp, #448	; 0x1c0
 800b226:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800b22a:	ab0c      	add	r3, sp, #48	; 0x30
 800b22c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800b230:	f7f5 f924 	bl	800047c <__aeabi_i2d>
 800b234:	4622      	mov	r2, r4
 800b236:	462b      	mov	r3, r5
 800b238:	f7f5 f98a 	bl	8000550 <__aeabi_dmul>
 800b23c:	4632      	mov	r2, r6
 800b23e:	e9c9 0100 	strd	r0, r1, [r9]
 800b242:	463b      	mov	r3, r7
 800b244:	4620      	mov	r0, r4
 800b246:	4629      	mov	r1, r5
 800b248:	f7f5 f982 	bl	8000550 <__aeabi_dmul>
 800b24c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b250:	4604      	mov	r4, r0
 800b252:	460d      	mov	r5, r1
 800b254:	e713      	b.n	800b07e <__kernel_rem_pio2+0x2b6>
 800b256:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800b25a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800b25e:	f7f5 f977 	bl	8000550 <__aeabi_dmul>
 800b262:	4602      	mov	r2, r0
 800b264:	460b      	mov	r3, r1
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f4 ffbb 	bl	80001e4 <__adddf3>
 800b26e:	3601      	adds	r6, #1
 800b270:	4604      	mov	r4, r0
 800b272:	460d      	mov	r5, r1
 800b274:	9b04      	ldr	r3, [sp, #16]
 800b276:	429e      	cmp	r6, r3
 800b278:	dc01      	bgt.n	800b27e <__kernel_rem_pio2+0x4b6>
 800b27a:	45b0      	cmp	r8, r6
 800b27c:	daeb      	bge.n	800b256 <__kernel_rem_pio2+0x48e>
 800b27e:	ab48      	add	r3, sp, #288	; 0x120
 800b280:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b284:	e9c3 4500 	strd	r4, r5, [r3]
 800b288:	3f01      	subs	r7, #1
 800b28a:	f108 0801 	add.w	r8, r8, #1
 800b28e:	e6ff      	b.n	800b090 <__kernel_rem_pio2+0x2c8>
 800b290:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b292:	2b02      	cmp	r3, #2
 800b294:	dc0b      	bgt.n	800b2ae <__kernel_rem_pio2+0x4e6>
 800b296:	2b00      	cmp	r3, #0
 800b298:	dc6e      	bgt.n	800b378 <__kernel_rem_pio2+0x5b0>
 800b29a:	d045      	beq.n	800b328 <__kernel_rem_pio2+0x560>
 800b29c:	9b07      	ldr	r3, [sp, #28]
 800b29e:	f003 0007 	and.w	r0, r3, #7
 800b2a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800b2a6:	ecbd 8b02 	vpop	{d8}
 800b2aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800b2b0:	2b03      	cmp	r3, #3
 800b2b2:	d1f3      	bne.n	800b29c <__kernel_rem_pio2+0x4d4>
 800b2b4:	ab48      	add	r3, sp, #288	; 0x120
 800b2b6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 800b2ba:	46d0      	mov	r8, sl
 800b2bc:	46d9      	mov	r9, fp
 800b2be:	f1b9 0f00 	cmp.w	r9, #0
 800b2c2:	f1a8 0808 	sub.w	r8, r8, #8
 800b2c6:	dc64      	bgt.n	800b392 <__kernel_rem_pio2+0x5ca>
 800b2c8:	465c      	mov	r4, fp
 800b2ca:	2c01      	cmp	r4, #1
 800b2cc:	f1aa 0a08 	sub.w	sl, sl, #8
 800b2d0:	dc7e      	bgt.n	800b3d0 <__kernel_rem_pio2+0x608>
 800b2d2:	2000      	movs	r0, #0
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	f1bb 0f01 	cmp.w	fp, #1
 800b2da:	f300 8097 	bgt.w	800b40c <__kernel_rem_pio2+0x644>
 800b2de:	9b02      	ldr	r3, [sp, #8]
 800b2e0:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 800b2e4:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f040 8099 	bne.w	800b420 <__kernel_rem_pio2+0x658>
 800b2ee:	9b01      	ldr	r3, [sp, #4]
 800b2f0:	e9c3 5600 	strd	r5, r6, [r3]
 800b2f4:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800b2f8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b2fc:	e7ce      	b.n	800b29c <__kernel_rem_pio2+0x4d4>
 800b2fe:	ab48      	add	r3, sp, #288	; 0x120
 800b300:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b308:	f7f4 ff6c 	bl	80001e4 <__adddf3>
 800b30c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b310:	f1bb 0f00 	cmp.w	fp, #0
 800b314:	daf3      	bge.n	800b2fe <__kernel_rem_pio2+0x536>
 800b316:	9b02      	ldr	r3, [sp, #8]
 800b318:	b113      	cbz	r3, 800b320 <__kernel_rem_pio2+0x558>
 800b31a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b31e:	4619      	mov	r1, r3
 800b320:	9b01      	ldr	r3, [sp, #4]
 800b322:	e9c3 0100 	strd	r0, r1, [r3]
 800b326:	e7b9      	b.n	800b29c <__kernel_rem_pio2+0x4d4>
 800b328:	2000      	movs	r0, #0
 800b32a:	2100      	movs	r1, #0
 800b32c:	e7f0      	b.n	800b310 <__kernel_rem_pio2+0x548>
 800b32e:	ab48      	add	r3, sp, #288	; 0x120
 800b330:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b338:	f7f4 ff54 	bl	80001e4 <__adddf3>
 800b33c:	3c01      	subs	r4, #1
 800b33e:	2c00      	cmp	r4, #0
 800b340:	daf5      	bge.n	800b32e <__kernel_rem_pio2+0x566>
 800b342:	9b02      	ldr	r3, [sp, #8]
 800b344:	b1e3      	cbz	r3, 800b380 <__kernel_rem_pio2+0x5b8>
 800b346:	4602      	mov	r2, r0
 800b348:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b34c:	9c01      	ldr	r4, [sp, #4]
 800b34e:	e9c4 2300 	strd	r2, r3, [r4]
 800b352:	4602      	mov	r2, r0
 800b354:	460b      	mov	r3, r1
 800b356:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800b35a:	f7f4 ff41 	bl	80001e0 <__aeabi_dsub>
 800b35e:	ad4a      	add	r5, sp, #296	; 0x128
 800b360:	2401      	movs	r4, #1
 800b362:	45a3      	cmp	fp, r4
 800b364:	da0f      	bge.n	800b386 <__kernel_rem_pio2+0x5be>
 800b366:	9b02      	ldr	r3, [sp, #8]
 800b368:	b113      	cbz	r3, 800b370 <__kernel_rem_pio2+0x5a8>
 800b36a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b36e:	4619      	mov	r1, r3
 800b370:	9b01      	ldr	r3, [sp, #4]
 800b372:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b376:	e791      	b.n	800b29c <__kernel_rem_pio2+0x4d4>
 800b378:	465c      	mov	r4, fp
 800b37a:	2000      	movs	r0, #0
 800b37c:	2100      	movs	r1, #0
 800b37e:	e7de      	b.n	800b33e <__kernel_rem_pio2+0x576>
 800b380:	4602      	mov	r2, r0
 800b382:	460b      	mov	r3, r1
 800b384:	e7e2      	b.n	800b34c <__kernel_rem_pio2+0x584>
 800b386:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800b38a:	f7f4 ff2b 	bl	80001e4 <__adddf3>
 800b38e:	3401      	adds	r4, #1
 800b390:	e7e7      	b.n	800b362 <__kernel_rem_pio2+0x59a>
 800b392:	e9d8 4500 	ldrd	r4, r5, [r8]
 800b396:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 800b39a:	4620      	mov	r0, r4
 800b39c:	4632      	mov	r2, r6
 800b39e:	463b      	mov	r3, r7
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	f7f4 ff1f 	bl	80001e4 <__adddf3>
 800b3a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	4620      	mov	r0, r4
 800b3b0:	4629      	mov	r1, r5
 800b3b2:	f7f4 ff15 	bl	80001e0 <__aeabi_dsub>
 800b3b6:	4632      	mov	r2, r6
 800b3b8:	463b      	mov	r3, r7
 800b3ba:	f7f4 ff13 	bl	80001e4 <__adddf3>
 800b3be:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b3c2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 800b3c6:	ed88 7b00 	vstr	d7, [r8]
 800b3ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800b3ce:	e776      	b.n	800b2be <__kernel_rem_pio2+0x4f6>
 800b3d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800b3d4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800b3d8:	4640      	mov	r0, r8
 800b3da:	4632      	mov	r2, r6
 800b3dc:	463b      	mov	r3, r7
 800b3de:	4649      	mov	r1, r9
 800b3e0:	f7f4 ff00 	bl	80001e4 <__adddf3>
 800b3e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	460b      	mov	r3, r1
 800b3ec:	4640      	mov	r0, r8
 800b3ee:	4649      	mov	r1, r9
 800b3f0:	f7f4 fef6 	bl	80001e0 <__aeabi_dsub>
 800b3f4:	4632      	mov	r2, r6
 800b3f6:	463b      	mov	r3, r7
 800b3f8:	f7f4 fef4 	bl	80001e4 <__adddf3>
 800b3fc:	ed9d 7b04 	vldr	d7, [sp, #16]
 800b400:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b404:	ed8a 7b00 	vstr	d7, [sl]
 800b408:	3c01      	subs	r4, #1
 800b40a:	e75e      	b.n	800b2ca <__kernel_rem_pio2+0x502>
 800b40c:	ab48      	add	r3, sp, #288	; 0x120
 800b40e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b416:	f7f4 fee5 	bl	80001e4 <__adddf3>
 800b41a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b41e:	e75a      	b.n	800b2d6 <__kernel_rem_pio2+0x50e>
 800b420:	9b01      	ldr	r3, [sp, #4]
 800b422:	9a01      	ldr	r2, [sp, #4]
 800b424:	601d      	str	r5, [r3, #0]
 800b426:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800b42a:	605c      	str	r4, [r3, #4]
 800b42c:	609f      	str	r7, [r3, #8]
 800b42e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800b432:	60d3      	str	r3, [r2, #12]
 800b434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b438:	6110      	str	r0, [r2, #16]
 800b43a:	6153      	str	r3, [r2, #20]
 800b43c:	e72e      	b.n	800b29c <__kernel_rem_pio2+0x4d4>
 800b43e:	bf00      	nop
 800b440:	41700000 	.word	0x41700000
 800b444:	3e700000 	.word	0x3e700000

0800b448 <__kernel_sin>:
 800b448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b44c:	ed2d 8b04 	vpush	{d8-d9}
 800b450:	eeb0 8a41 	vmov.f32	s16, s2
 800b454:	eef0 8a61 	vmov.f32	s17, s3
 800b458:	ec55 4b10 	vmov	r4, r5, d0
 800b45c:	b083      	sub	sp, #12
 800b45e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b462:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b466:	9001      	str	r0, [sp, #4]
 800b468:	da06      	bge.n	800b478 <__kernel_sin+0x30>
 800b46a:	ee10 0a10 	vmov	r0, s0
 800b46e:	4629      	mov	r1, r5
 800b470:	f7f5 fb1e 	bl	8000ab0 <__aeabi_d2iz>
 800b474:	2800      	cmp	r0, #0
 800b476:	d051      	beq.n	800b51c <__kernel_sin+0xd4>
 800b478:	4622      	mov	r2, r4
 800b47a:	462b      	mov	r3, r5
 800b47c:	4620      	mov	r0, r4
 800b47e:	4629      	mov	r1, r5
 800b480:	f7f5 f866 	bl	8000550 <__aeabi_dmul>
 800b484:	4682      	mov	sl, r0
 800b486:	468b      	mov	fp, r1
 800b488:	4602      	mov	r2, r0
 800b48a:	460b      	mov	r3, r1
 800b48c:	4620      	mov	r0, r4
 800b48e:	4629      	mov	r1, r5
 800b490:	f7f5 f85e 	bl	8000550 <__aeabi_dmul>
 800b494:	a341      	add	r3, pc, #260	; (adr r3, 800b59c <__kernel_sin+0x154>)
 800b496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b49a:	4680      	mov	r8, r0
 800b49c:	4689      	mov	r9, r1
 800b49e:	4650      	mov	r0, sl
 800b4a0:	4659      	mov	r1, fp
 800b4a2:	f7f5 f855 	bl	8000550 <__aeabi_dmul>
 800b4a6:	a33f      	add	r3, pc, #252	; (adr r3, 800b5a4 <__kernel_sin+0x15c>)
 800b4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ac:	f7f4 fe98 	bl	80001e0 <__aeabi_dsub>
 800b4b0:	4652      	mov	r2, sl
 800b4b2:	465b      	mov	r3, fp
 800b4b4:	f7f5 f84c 	bl	8000550 <__aeabi_dmul>
 800b4b8:	a33c      	add	r3, pc, #240	; (adr r3, 800b5ac <__kernel_sin+0x164>)
 800b4ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4be:	f7f4 fe91 	bl	80001e4 <__adddf3>
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	f7f5 f843 	bl	8000550 <__aeabi_dmul>
 800b4ca:	a33a      	add	r3, pc, #232	; (adr r3, 800b5b4 <__kernel_sin+0x16c>)
 800b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d0:	f7f4 fe86 	bl	80001e0 <__aeabi_dsub>
 800b4d4:	4652      	mov	r2, sl
 800b4d6:	465b      	mov	r3, fp
 800b4d8:	f7f5 f83a 	bl	8000550 <__aeabi_dmul>
 800b4dc:	a337      	add	r3, pc, #220	; (adr r3, 800b5bc <__kernel_sin+0x174>)
 800b4de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e2:	f7f4 fe7f 	bl	80001e4 <__adddf3>
 800b4e6:	9b01      	ldr	r3, [sp, #4]
 800b4e8:	4606      	mov	r6, r0
 800b4ea:	460f      	mov	r7, r1
 800b4ec:	b9eb      	cbnz	r3, 800b52a <__kernel_sin+0xe2>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	4650      	mov	r0, sl
 800b4f4:	4659      	mov	r1, fp
 800b4f6:	f7f5 f82b 	bl	8000550 <__aeabi_dmul>
 800b4fa:	a325      	add	r3, pc, #148	; (adr r3, 800b590 <__kernel_sin+0x148>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f4 fe6e 	bl	80001e0 <__aeabi_dsub>
 800b504:	4642      	mov	r2, r8
 800b506:	464b      	mov	r3, r9
 800b508:	f7f5 f822 	bl	8000550 <__aeabi_dmul>
 800b50c:	4602      	mov	r2, r0
 800b50e:	460b      	mov	r3, r1
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f4 fe66 	bl	80001e4 <__adddf3>
 800b518:	4604      	mov	r4, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	ec45 4b10 	vmov	d0, r4, r5
 800b520:	b003      	add	sp, #12
 800b522:	ecbd 8b04 	vpop	{d8-d9}
 800b526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52a:	4b1b      	ldr	r3, [pc, #108]	; (800b598 <__kernel_sin+0x150>)
 800b52c:	ec51 0b18 	vmov	r0, r1, d8
 800b530:	2200      	movs	r2, #0
 800b532:	f7f5 f80d 	bl	8000550 <__aeabi_dmul>
 800b536:	4632      	mov	r2, r6
 800b538:	ec41 0b19 	vmov	d9, r0, r1
 800b53c:	463b      	mov	r3, r7
 800b53e:	4640      	mov	r0, r8
 800b540:	4649      	mov	r1, r9
 800b542:	f7f5 f805 	bl	8000550 <__aeabi_dmul>
 800b546:	4602      	mov	r2, r0
 800b548:	460b      	mov	r3, r1
 800b54a:	ec51 0b19 	vmov	r0, r1, d9
 800b54e:	f7f4 fe47 	bl	80001e0 <__aeabi_dsub>
 800b552:	4652      	mov	r2, sl
 800b554:	465b      	mov	r3, fp
 800b556:	f7f4 fffb 	bl	8000550 <__aeabi_dmul>
 800b55a:	ec53 2b18 	vmov	r2, r3, d8
 800b55e:	f7f4 fe3f 	bl	80001e0 <__aeabi_dsub>
 800b562:	a30b      	add	r3, pc, #44	; (adr r3, 800b590 <__kernel_sin+0x148>)
 800b564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b568:	4606      	mov	r6, r0
 800b56a:	460f      	mov	r7, r1
 800b56c:	4640      	mov	r0, r8
 800b56e:	4649      	mov	r1, r9
 800b570:	f7f4 ffee 	bl	8000550 <__aeabi_dmul>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	4630      	mov	r0, r6
 800b57a:	4639      	mov	r1, r7
 800b57c:	f7f4 fe32 	bl	80001e4 <__adddf3>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4620      	mov	r0, r4
 800b586:	4629      	mov	r1, r5
 800b588:	f7f4 fe2a 	bl	80001e0 <__aeabi_dsub>
 800b58c:	e7c4      	b.n	800b518 <__kernel_sin+0xd0>
 800b58e:	bf00      	nop
 800b590:	55555549 	.word	0x55555549
 800b594:	3fc55555 	.word	0x3fc55555
 800b598:	3fe00000 	.word	0x3fe00000
 800b59c:	5acfd57c 	.word	0x5acfd57c
 800b5a0:	3de5d93a 	.word	0x3de5d93a
 800b5a4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b5a8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b5ac:	57b1fe7d 	.word	0x57b1fe7d
 800b5b0:	3ec71de3 	.word	0x3ec71de3
 800b5b4:	19c161d5 	.word	0x19c161d5
 800b5b8:	3f2a01a0 	.word	0x3f2a01a0
 800b5bc:	1110f8a6 	.word	0x1110f8a6
 800b5c0:	3f811111 	.word	0x3f811111
 800b5c4:	00000000 	.word	0x00000000

0800b5c8 <atan>:
 800b5c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5cc:	ec55 4b10 	vmov	r4, r5, d0
 800b5d0:	4bc3      	ldr	r3, [pc, #780]	; (800b8e0 <atan+0x318>)
 800b5d2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b5d6:	429e      	cmp	r6, r3
 800b5d8:	46ab      	mov	fp, r5
 800b5da:	dd18      	ble.n	800b60e <atan+0x46>
 800b5dc:	4bc1      	ldr	r3, [pc, #772]	; (800b8e4 <atan+0x31c>)
 800b5de:	429e      	cmp	r6, r3
 800b5e0:	dc01      	bgt.n	800b5e6 <atan+0x1e>
 800b5e2:	d109      	bne.n	800b5f8 <atan+0x30>
 800b5e4:	b144      	cbz	r4, 800b5f8 <atan+0x30>
 800b5e6:	4622      	mov	r2, r4
 800b5e8:	462b      	mov	r3, r5
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	f7f4 fdf9 	bl	80001e4 <__adddf3>
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	460d      	mov	r5, r1
 800b5f6:	e006      	b.n	800b606 <atan+0x3e>
 800b5f8:	f1bb 0f00 	cmp.w	fp, #0
 800b5fc:	f300 8131 	bgt.w	800b862 <atan+0x29a>
 800b600:	a59b      	add	r5, pc, #620	; (adr r5, 800b870 <atan+0x2a8>)
 800b602:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b606:	ec45 4b10 	vmov	d0, r4, r5
 800b60a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b60e:	4bb6      	ldr	r3, [pc, #728]	; (800b8e8 <atan+0x320>)
 800b610:	429e      	cmp	r6, r3
 800b612:	dc14      	bgt.n	800b63e <atan+0x76>
 800b614:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800b618:	429e      	cmp	r6, r3
 800b61a:	dc0d      	bgt.n	800b638 <atan+0x70>
 800b61c:	a396      	add	r3, pc, #600	; (adr r3, 800b878 <atan+0x2b0>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	ee10 0a10 	vmov	r0, s0
 800b626:	4629      	mov	r1, r5
 800b628:	f7f4 fddc 	bl	80001e4 <__adddf3>
 800b62c:	4baf      	ldr	r3, [pc, #700]	; (800b8ec <atan+0x324>)
 800b62e:	2200      	movs	r2, #0
 800b630:	f7f5 fa1e 	bl	8000a70 <__aeabi_dcmpgt>
 800b634:	2800      	cmp	r0, #0
 800b636:	d1e6      	bne.n	800b606 <atan+0x3e>
 800b638:	f04f 3aff 	mov.w	sl, #4294967295
 800b63c:	e02b      	b.n	800b696 <atan+0xce>
 800b63e:	f000 f963 	bl	800b908 <fabs>
 800b642:	4bab      	ldr	r3, [pc, #684]	; (800b8f0 <atan+0x328>)
 800b644:	429e      	cmp	r6, r3
 800b646:	ec55 4b10 	vmov	r4, r5, d0
 800b64a:	f300 80bf 	bgt.w	800b7cc <atan+0x204>
 800b64e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800b652:	429e      	cmp	r6, r3
 800b654:	f300 80a0 	bgt.w	800b798 <atan+0x1d0>
 800b658:	ee10 2a10 	vmov	r2, s0
 800b65c:	ee10 0a10 	vmov	r0, s0
 800b660:	462b      	mov	r3, r5
 800b662:	4629      	mov	r1, r5
 800b664:	f7f4 fdbe 	bl	80001e4 <__adddf3>
 800b668:	4ba0      	ldr	r3, [pc, #640]	; (800b8ec <atan+0x324>)
 800b66a:	2200      	movs	r2, #0
 800b66c:	f7f4 fdb8 	bl	80001e0 <__aeabi_dsub>
 800b670:	2200      	movs	r2, #0
 800b672:	4606      	mov	r6, r0
 800b674:	460f      	mov	r7, r1
 800b676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b67a:	4620      	mov	r0, r4
 800b67c:	4629      	mov	r1, r5
 800b67e:	f7f4 fdb1 	bl	80001e4 <__adddf3>
 800b682:	4602      	mov	r2, r0
 800b684:	460b      	mov	r3, r1
 800b686:	4630      	mov	r0, r6
 800b688:	4639      	mov	r1, r7
 800b68a:	f7f5 f88b 	bl	80007a4 <__aeabi_ddiv>
 800b68e:	f04f 0a00 	mov.w	sl, #0
 800b692:	4604      	mov	r4, r0
 800b694:	460d      	mov	r5, r1
 800b696:	4622      	mov	r2, r4
 800b698:	462b      	mov	r3, r5
 800b69a:	4620      	mov	r0, r4
 800b69c:	4629      	mov	r1, r5
 800b69e:	f7f4 ff57 	bl	8000550 <__aeabi_dmul>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4680      	mov	r8, r0
 800b6a8:	4689      	mov	r9, r1
 800b6aa:	f7f4 ff51 	bl	8000550 <__aeabi_dmul>
 800b6ae:	a374      	add	r3, pc, #464	; (adr r3, 800b880 <atan+0x2b8>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	460f      	mov	r7, r1
 800b6b8:	f7f4 ff4a 	bl	8000550 <__aeabi_dmul>
 800b6bc:	a372      	add	r3, pc, #456	; (adr r3, 800b888 <atan+0x2c0>)
 800b6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c2:	f7f4 fd8f 	bl	80001e4 <__adddf3>
 800b6c6:	4632      	mov	r2, r6
 800b6c8:	463b      	mov	r3, r7
 800b6ca:	f7f4 ff41 	bl	8000550 <__aeabi_dmul>
 800b6ce:	a370      	add	r3, pc, #448	; (adr r3, 800b890 <atan+0x2c8>)
 800b6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d4:	f7f4 fd86 	bl	80001e4 <__adddf3>
 800b6d8:	4632      	mov	r2, r6
 800b6da:	463b      	mov	r3, r7
 800b6dc:	f7f4 ff38 	bl	8000550 <__aeabi_dmul>
 800b6e0:	a36d      	add	r3, pc, #436	; (adr r3, 800b898 <atan+0x2d0>)
 800b6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e6:	f7f4 fd7d 	bl	80001e4 <__adddf3>
 800b6ea:	4632      	mov	r2, r6
 800b6ec:	463b      	mov	r3, r7
 800b6ee:	f7f4 ff2f 	bl	8000550 <__aeabi_dmul>
 800b6f2:	a36b      	add	r3, pc, #428	; (adr r3, 800b8a0 <atan+0x2d8>)
 800b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f8:	f7f4 fd74 	bl	80001e4 <__adddf3>
 800b6fc:	4632      	mov	r2, r6
 800b6fe:	463b      	mov	r3, r7
 800b700:	f7f4 ff26 	bl	8000550 <__aeabi_dmul>
 800b704:	a368      	add	r3, pc, #416	; (adr r3, 800b8a8 <atan+0x2e0>)
 800b706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70a:	f7f4 fd6b 	bl	80001e4 <__adddf3>
 800b70e:	4642      	mov	r2, r8
 800b710:	464b      	mov	r3, r9
 800b712:	f7f4 ff1d 	bl	8000550 <__aeabi_dmul>
 800b716:	a366      	add	r3, pc, #408	; (adr r3, 800b8b0 <atan+0x2e8>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	4680      	mov	r8, r0
 800b71e:	4689      	mov	r9, r1
 800b720:	4630      	mov	r0, r6
 800b722:	4639      	mov	r1, r7
 800b724:	f7f4 ff14 	bl	8000550 <__aeabi_dmul>
 800b728:	a363      	add	r3, pc, #396	; (adr r3, 800b8b8 <atan+0x2f0>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 fd57 	bl	80001e0 <__aeabi_dsub>
 800b732:	4632      	mov	r2, r6
 800b734:	463b      	mov	r3, r7
 800b736:	f7f4 ff0b 	bl	8000550 <__aeabi_dmul>
 800b73a:	a361      	add	r3, pc, #388	; (adr r3, 800b8c0 <atan+0x2f8>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7f4 fd4e 	bl	80001e0 <__aeabi_dsub>
 800b744:	4632      	mov	r2, r6
 800b746:	463b      	mov	r3, r7
 800b748:	f7f4 ff02 	bl	8000550 <__aeabi_dmul>
 800b74c:	a35e      	add	r3, pc, #376	; (adr r3, 800b8c8 <atan+0x300>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fd45 	bl	80001e0 <__aeabi_dsub>
 800b756:	4632      	mov	r2, r6
 800b758:	463b      	mov	r3, r7
 800b75a:	f7f4 fef9 	bl	8000550 <__aeabi_dmul>
 800b75e:	a35c      	add	r3, pc, #368	; (adr r3, 800b8d0 <atan+0x308>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fd3c 	bl	80001e0 <__aeabi_dsub>
 800b768:	4632      	mov	r2, r6
 800b76a:	463b      	mov	r3, r7
 800b76c:	f7f4 fef0 	bl	8000550 <__aeabi_dmul>
 800b770:	4602      	mov	r2, r0
 800b772:	460b      	mov	r3, r1
 800b774:	4640      	mov	r0, r8
 800b776:	4649      	mov	r1, r9
 800b778:	f7f4 fd34 	bl	80001e4 <__adddf3>
 800b77c:	4622      	mov	r2, r4
 800b77e:	462b      	mov	r3, r5
 800b780:	f7f4 fee6 	bl	8000550 <__aeabi_dmul>
 800b784:	f1ba 3fff 	cmp.w	sl, #4294967295
 800b788:	4602      	mov	r2, r0
 800b78a:	460b      	mov	r3, r1
 800b78c:	d14b      	bne.n	800b826 <atan+0x25e>
 800b78e:	4620      	mov	r0, r4
 800b790:	4629      	mov	r1, r5
 800b792:	f7f4 fd25 	bl	80001e0 <__aeabi_dsub>
 800b796:	e72c      	b.n	800b5f2 <atan+0x2a>
 800b798:	ee10 0a10 	vmov	r0, s0
 800b79c:	4b53      	ldr	r3, [pc, #332]	; (800b8ec <atan+0x324>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	f7f4 fd1d 	bl	80001e0 <__aeabi_dsub>
 800b7a6:	4b51      	ldr	r3, [pc, #324]	; (800b8ec <atan+0x324>)
 800b7a8:	4606      	mov	r6, r0
 800b7aa:	460f      	mov	r7, r1
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	f7f4 fd17 	bl	80001e4 <__adddf3>
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	460b      	mov	r3, r1
 800b7ba:	4630      	mov	r0, r6
 800b7bc:	4639      	mov	r1, r7
 800b7be:	f7f4 fff1 	bl	80007a4 <__aeabi_ddiv>
 800b7c2:	f04f 0a01 	mov.w	sl, #1
 800b7c6:	4604      	mov	r4, r0
 800b7c8:	460d      	mov	r5, r1
 800b7ca:	e764      	b.n	800b696 <atan+0xce>
 800b7cc:	4b49      	ldr	r3, [pc, #292]	; (800b8f4 <atan+0x32c>)
 800b7ce:	429e      	cmp	r6, r3
 800b7d0:	da1d      	bge.n	800b80e <atan+0x246>
 800b7d2:	ee10 0a10 	vmov	r0, s0
 800b7d6:	4b48      	ldr	r3, [pc, #288]	; (800b8f8 <atan+0x330>)
 800b7d8:	2200      	movs	r2, #0
 800b7da:	4629      	mov	r1, r5
 800b7dc:	f7f4 fd00 	bl	80001e0 <__aeabi_dsub>
 800b7e0:	4b45      	ldr	r3, [pc, #276]	; (800b8f8 <atan+0x330>)
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	4629      	mov	r1, r5
 800b7ec:	f7f4 feb0 	bl	8000550 <__aeabi_dmul>
 800b7f0:	4b3e      	ldr	r3, [pc, #248]	; (800b8ec <atan+0x324>)
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f7f4 fcf6 	bl	80001e4 <__adddf3>
 800b7f8:	4602      	mov	r2, r0
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	4639      	mov	r1, r7
 800b800:	f7f4 ffd0 	bl	80007a4 <__aeabi_ddiv>
 800b804:	f04f 0a02 	mov.w	sl, #2
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	e743      	b.n	800b696 <atan+0xce>
 800b80e:	462b      	mov	r3, r5
 800b810:	ee10 2a10 	vmov	r2, s0
 800b814:	4939      	ldr	r1, [pc, #228]	; (800b8fc <atan+0x334>)
 800b816:	2000      	movs	r0, #0
 800b818:	f7f4 ffc4 	bl	80007a4 <__aeabi_ddiv>
 800b81c:	f04f 0a03 	mov.w	sl, #3
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	e737      	b.n	800b696 <atan+0xce>
 800b826:	4b36      	ldr	r3, [pc, #216]	; (800b900 <atan+0x338>)
 800b828:	4e36      	ldr	r6, [pc, #216]	; (800b904 <atan+0x33c>)
 800b82a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b82e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800b832:	e9da 2300 	ldrd	r2, r3, [sl]
 800b836:	f7f4 fcd3 	bl	80001e0 <__aeabi_dsub>
 800b83a:	4622      	mov	r2, r4
 800b83c:	462b      	mov	r3, r5
 800b83e:	f7f4 fccf 	bl	80001e0 <__aeabi_dsub>
 800b842:	4602      	mov	r2, r0
 800b844:	460b      	mov	r3, r1
 800b846:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b84a:	f7f4 fcc9 	bl	80001e0 <__aeabi_dsub>
 800b84e:	f1bb 0f00 	cmp.w	fp, #0
 800b852:	4604      	mov	r4, r0
 800b854:	460d      	mov	r5, r1
 800b856:	f6bf aed6 	bge.w	800b606 <atan+0x3e>
 800b85a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b85e:	461d      	mov	r5, r3
 800b860:	e6d1      	b.n	800b606 <atan+0x3e>
 800b862:	a51d      	add	r5, pc, #116	; (adr r5, 800b8d8 <atan+0x310>)
 800b864:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b868:	e6cd      	b.n	800b606 <atan+0x3e>
 800b86a:	bf00      	nop
 800b86c:	f3af 8000 	nop.w
 800b870:	54442d18 	.word	0x54442d18
 800b874:	bff921fb 	.word	0xbff921fb
 800b878:	8800759c 	.word	0x8800759c
 800b87c:	7e37e43c 	.word	0x7e37e43c
 800b880:	e322da11 	.word	0xe322da11
 800b884:	3f90ad3a 	.word	0x3f90ad3a
 800b888:	24760deb 	.word	0x24760deb
 800b88c:	3fa97b4b 	.word	0x3fa97b4b
 800b890:	a0d03d51 	.word	0xa0d03d51
 800b894:	3fb10d66 	.word	0x3fb10d66
 800b898:	c54c206e 	.word	0xc54c206e
 800b89c:	3fb745cd 	.word	0x3fb745cd
 800b8a0:	920083ff 	.word	0x920083ff
 800b8a4:	3fc24924 	.word	0x3fc24924
 800b8a8:	5555550d 	.word	0x5555550d
 800b8ac:	3fd55555 	.word	0x3fd55555
 800b8b0:	2c6a6c2f 	.word	0x2c6a6c2f
 800b8b4:	bfa2b444 	.word	0xbfa2b444
 800b8b8:	52defd9a 	.word	0x52defd9a
 800b8bc:	3fadde2d 	.word	0x3fadde2d
 800b8c0:	af749a6d 	.word	0xaf749a6d
 800b8c4:	3fb3b0f2 	.word	0x3fb3b0f2
 800b8c8:	fe231671 	.word	0xfe231671
 800b8cc:	3fbc71c6 	.word	0x3fbc71c6
 800b8d0:	9998ebc4 	.word	0x9998ebc4
 800b8d4:	3fc99999 	.word	0x3fc99999
 800b8d8:	54442d18 	.word	0x54442d18
 800b8dc:	3ff921fb 	.word	0x3ff921fb
 800b8e0:	440fffff 	.word	0x440fffff
 800b8e4:	7ff00000 	.word	0x7ff00000
 800b8e8:	3fdbffff 	.word	0x3fdbffff
 800b8ec:	3ff00000 	.word	0x3ff00000
 800b8f0:	3ff2ffff 	.word	0x3ff2ffff
 800b8f4:	40038000 	.word	0x40038000
 800b8f8:	3ff80000 	.word	0x3ff80000
 800b8fc:	bff00000 	.word	0xbff00000
 800b900:	0800be00 	.word	0x0800be00
 800b904:	0800bde0 	.word	0x0800bde0

0800b908 <fabs>:
 800b908:	ec51 0b10 	vmov	r0, r1, d0
 800b90c:	ee10 2a10 	vmov	r2, s0
 800b910:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b914:	ec43 2b10 	vmov	d0, r2, r3
 800b918:	4770      	bx	lr
 800b91a:	0000      	movs	r0, r0
 800b91c:	0000      	movs	r0, r0
	...

0800b920 <floor>:
 800b920:	ec51 0b10 	vmov	r0, r1, d0
 800b924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b928:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b92c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b930:	2e13      	cmp	r6, #19
 800b932:	ee10 5a10 	vmov	r5, s0
 800b936:	ee10 8a10 	vmov	r8, s0
 800b93a:	460c      	mov	r4, r1
 800b93c:	dc32      	bgt.n	800b9a4 <floor+0x84>
 800b93e:	2e00      	cmp	r6, #0
 800b940:	da14      	bge.n	800b96c <floor+0x4c>
 800b942:	a333      	add	r3, pc, #204	; (adr r3, 800ba10 <floor+0xf0>)
 800b944:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b948:	f7f4 fc4c 	bl	80001e4 <__adddf3>
 800b94c:	2200      	movs	r2, #0
 800b94e:	2300      	movs	r3, #0
 800b950:	f7f5 f88e 	bl	8000a70 <__aeabi_dcmpgt>
 800b954:	b138      	cbz	r0, 800b966 <floor+0x46>
 800b956:	2c00      	cmp	r4, #0
 800b958:	da57      	bge.n	800ba0a <floor+0xea>
 800b95a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b95e:	431d      	orrs	r5, r3
 800b960:	d001      	beq.n	800b966 <floor+0x46>
 800b962:	4c2d      	ldr	r4, [pc, #180]	; (800ba18 <floor+0xf8>)
 800b964:	2500      	movs	r5, #0
 800b966:	4621      	mov	r1, r4
 800b968:	4628      	mov	r0, r5
 800b96a:	e025      	b.n	800b9b8 <floor+0x98>
 800b96c:	4f2b      	ldr	r7, [pc, #172]	; (800ba1c <floor+0xfc>)
 800b96e:	4137      	asrs	r7, r6
 800b970:	ea01 0307 	and.w	r3, r1, r7
 800b974:	4303      	orrs	r3, r0
 800b976:	d01f      	beq.n	800b9b8 <floor+0x98>
 800b978:	a325      	add	r3, pc, #148	; (adr r3, 800ba10 <floor+0xf0>)
 800b97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97e:	f7f4 fc31 	bl	80001e4 <__adddf3>
 800b982:	2200      	movs	r2, #0
 800b984:	2300      	movs	r3, #0
 800b986:	f7f5 f873 	bl	8000a70 <__aeabi_dcmpgt>
 800b98a:	2800      	cmp	r0, #0
 800b98c:	d0eb      	beq.n	800b966 <floor+0x46>
 800b98e:	2c00      	cmp	r4, #0
 800b990:	bfbe      	ittt	lt
 800b992:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b996:	fa43 f606 	asrlt.w	r6, r3, r6
 800b99a:	19a4      	addlt	r4, r4, r6
 800b99c:	ea24 0407 	bic.w	r4, r4, r7
 800b9a0:	2500      	movs	r5, #0
 800b9a2:	e7e0      	b.n	800b966 <floor+0x46>
 800b9a4:	2e33      	cmp	r6, #51	; 0x33
 800b9a6:	dd0b      	ble.n	800b9c0 <floor+0xa0>
 800b9a8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b9ac:	d104      	bne.n	800b9b8 <floor+0x98>
 800b9ae:	ee10 2a10 	vmov	r2, s0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	f7f4 fc16 	bl	80001e4 <__adddf3>
 800b9b8:	ec41 0b10 	vmov	d0, r0, r1
 800b9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b9c8:	fa23 f707 	lsr.w	r7, r3, r7
 800b9cc:	4207      	tst	r7, r0
 800b9ce:	d0f3      	beq.n	800b9b8 <floor+0x98>
 800b9d0:	a30f      	add	r3, pc, #60	; (adr r3, 800ba10 <floor+0xf0>)
 800b9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d6:	f7f4 fc05 	bl	80001e4 <__adddf3>
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f7f5 f847 	bl	8000a70 <__aeabi_dcmpgt>
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d0bf      	beq.n	800b966 <floor+0x46>
 800b9e6:	2c00      	cmp	r4, #0
 800b9e8:	da02      	bge.n	800b9f0 <floor+0xd0>
 800b9ea:	2e14      	cmp	r6, #20
 800b9ec:	d103      	bne.n	800b9f6 <floor+0xd6>
 800b9ee:	3401      	adds	r4, #1
 800b9f0:	ea25 0507 	bic.w	r5, r5, r7
 800b9f4:	e7b7      	b.n	800b966 <floor+0x46>
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9fc:	fa03 f606 	lsl.w	r6, r3, r6
 800ba00:	4435      	add	r5, r6
 800ba02:	4545      	cmp	r5, r8
 800ba04:	bf38      	it	cc
 800ba06:	18e4      	addcc	r4, r4, r3
 800ba08:	e7f2      	b.n	800b9f0 <floor+0xd0>
 800ba0a:	2500      	movs	r5, #0
 800ba0c:	462c      	mov	r4, r5
 800ba0e:	e7aa      	b.n	800b966 <floor+0x46>
 800ba10:	8800759c 	.word	0x8800759c
 800ba14:	7e37e43c 	.word	0x7e37e43c
 800ba18:	bff00000 	.word	0xbff00000
 800ba1c:	000fffff 	.word	0x000fffff

0800ba20 <nan>:
 800ba20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba28 <nan+0x8>
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	00000000 	.word	0x00000000
 800ba2c:	7ff80000 	.word	0x7ff80000

0800ba30 <scalbn>:
 800ba30:	b570      	push	{r4, r5, r6, lr}
 800ba32:	ec55 4b10 	vmov	r4, r5, d0
 800ba36:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ba3a:	4606      	mov	r6, r0
 800ba3c:	462b      	mov	r3, r5
 800ba3e:	b99a      	cbnz	r2, 800ba68 <scalbn+0x38>
 800ba40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ba44:	4323      	orrs	r3, r4
 800ba46:	d036      	beq.n	800bab6 <scalbn+0x86>
 800ba48:	4b39      	ldr	r3, [pc, #228]	; (800bb30 <scalbn+0x100>)
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	ee10 0a10 	vmov	r0, s0
 800ba50:	2200      	movs	r2, #0
 800ba52:	f7f4 fd7d 	bl	8000550 <__aeabi_dmul>
 800ba56:	4b37      	ldr	r3, [pc, #220]	; (800bb34 <scalbn+0x104>)
 800ba58:	429e      	cmp	r6, r3
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	460d      	mov	r5, r1
 800ba5e:	da10      	bge.n	800ba82 <scalbn+0x52>
 800ba60:	a32b      	add	r3, pc, #172	; (adr r3, 800bb10 <scalbn+0xe0>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	e03a      	b.n	800bade <scalbn+0xae>
 800ba68:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba6c:	428a      	cmp	r2, r1
 800ba6e:	d10c      	bne.n	800ba8a <scalbn+0x5a>
 800ba70:	ee10 2a10 	vmov	r2, s0
 800ba74:	4620      	mov	r0, r4
 800ba76:	4629      	mov	r1, r5
 800ba78:	f7f4 fbb4 	bl	80001e4 <__adddf3>
 800ba7c:	4604      	mov	r4, r0
 800ba7e:	460d      	mov	r5, r1
 800ba80:	e019      	b.n	800bab6 <scalbn+0x86>
 800ba82:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba86:	460b      	mov	r3, r1
 800ba88:	3a36      	subs	r2, #54	; 0x36
 800ba8a:	4432      	add	r2, r6
 800ba8c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba90:	428a      	cmp	r2, r1
 800ba92:	dd08      	ble.n	800baa6 <scalbn+0x76>
 800ba94:	2d00      	cmp	r5, #0
 800ba96:	a120      	add	r1, pc, #128	; (adr r1, 800bb18 <scalbn+0xe8>)
 800ba98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9c:	da1c      	bge.n	800bad8 <scalbn+0xa8>
 800ba9e:	a120      	add	r1, pc, #128	; (adr r1, 800bb20 <scalbn+0xf0>)
 800baa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baa4:	e018      	b.n	800bad8 <scalbn+0xa8>
 800baa6:	2a00      	cmp	r2, #0
 800baa8:	dd08      	ble.n	800babc <scalbn+0x8c>
 800baaa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800baae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bab2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bab6:	ec45 4b10 	vmov	d0, r4, r5
 800baba:	bd70      	pop	{r4, r5, r6, pc}
 800babc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bac0:	da19      	bge.n	800baf6 <scalbn+0xc6>
 800bac2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bac6:	429e      	cmp	r6, r3
 800bac8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800bacc:	dd0a      	ble.n	800bae4 <scalbn+0xb4>
 800bace:	a112      	add	r1, pc, #72	; (adr r1, 800bb18 <scalbn+0xe8>)
 800bad0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d1e2      	bne.n	800ba9e <scalbn+0x6e>
 800bad8:	a30f      	add	r3, pc, #60	; (adr r3, 800bb18 <scalbn+0xe8>)
 800bada:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bade:	f7f4 fd37 	bl	8000550 <__aeabi_dmul>
 800bae2:	e7cb      	b.n	800ba7c <scalbn+0x4c>
 800bae4:	a10a      	add	r1, pc, #40	; (adr r1, 800bb10 <scalbn+0xe0>)
 800bae6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d0b8      	beq.n	800ba60 <scalbn+0x30>
 800baee:	a10e      	add	r1, pc, #56	; (adr r1, 800bb28 <scalbn+0xf8>)
 800baf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baf4:	e7b4      	b.n	800ba60 <scalbn+0x30>
 800baf6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bafa:	3236      	adds	r2, #54	; 0x36
 800bafc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bb00:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bb04:	4620      	mov	r0, r4
 800bb06:	4b0c      	ldr	r3, [pc, #48]	; (800bb38 <scalbn+0x108>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	e7e8      	b.n	800bade <scalbn+0xae>
 800bb0c:	f3af 8000 	nop.w
 800bb10:	c2f8f359 	.word	0xc2f8f359
 800bb14:	01a56e1f 	.word	0x01a56e1f
 800bb18:	8800759c 	.word	0x8800759c
 800bb1c:	7e37e43c 	.word	0x7e37e43c
 800bb20:	8800759c 	.word	0x8800759c
 800bb24:	fe37e43c 	.word	0xfe37e43c
 800bb28:	c2f8f359 	.word	0xc2f8f359
 800bb2c:	81a56e1f 	.word	0x81a56e1f
 800bb30:	43500000 	.word	0x43500000
 800bb34:	ffff3cb0 	.word	0xffff3cb0
 800bb38:	3c900000 	.word	0x3c900000

0800bb3c <_init>:
 800bb3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb3e:	bf00      	nop
 800bb40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb42:	bc08      	pop	{r3}
 800bb44:	469e      	mov	lr, r3
 800bb46:	4770      	bx	lr

0800bb48 <_fini>:
 800bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4a:	bf00      	nop
 800bb4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb4e:	bc08      	pop	{r3}
 800bb50:	469e      	mov	lr, r3
 800bb52:	4770      	bx	lr
