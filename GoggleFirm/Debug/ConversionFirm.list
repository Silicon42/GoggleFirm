
ConversionFirm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008000  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008310  08008310  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08008310  08008310  00018310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008318  08008318  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008318  08008318  00018318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800831c  0800831c  0001831c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08008320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a6c  20000158  08008478  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  08008478  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a337  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ab3  00000000  00000000  0003a4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  0003df78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  0003f180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019a72  00000000  00000000  00040238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017d7c  00000000  00000000  00059caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca90  00000000  00000000  00071a26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a40  00000000  00000000  000fe50c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000158 	.word	0x20000158
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800817c 	.word	0x0800817c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000015c 	.word	0x2000015c
 80001d0:	0800817c 	.word	0x0800817c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 030c 	add.w	r3, r7, #12
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
 80004e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	60bb      	str	r3, [r7, #8]
 80004e6:	4b3a      	ldr	r3, [pc, #232]	; (80005d0 <MX_GPIO_Init+0x104>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a39      	ldr	r2, [pc, #228]	; (80005d0 <MX_GPIO_Init+0x104>)
 80004ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b37      	ldr	r3, [pc, #220]	; (80005d0 <MX_GPIO_Init+0x104>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004fa:	60bb      	str	r3, [r7, #8]
 80004fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004fe:	2300      	movs	r3, #0
 8000500:	607b      	str	r3, [r7, #4]
 8000502:	4b33      	ldr	r3, [pc, #204]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	4a32      	ldr	r2, [pc, #200]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000508:	f043 0301 	orr.w	r3, r3, #1
 800050c:	6313      	str	r3, [r2, #48]	; 0x30
 800050e:	4b30      	ldr	r3, [pc, #192]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000512:	f003 0301 	and.w	r3, r3, #1
 8000516:	607b      	str	r3, [r7, #4]
 8000518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	603b      	str	r3, [r7, #0]
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a2b      	ldr	r2, [pc, #172]	; (80005d0 <MX_GPIO_Init+0x104>)
 8000524:	f043 0302 	orr.w	r3, r3, #2
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_GPIO_Init+0x104>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0302 	and.w	r3, r3, #2
 8000532:	603b      	str	r3, [r7, #0]
 8000534:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ICM_FSYNC_Pin|LCD_5_5V_EN_Pin, GPIO_PIN_RESET);
 8000536:	2200      	movs	r2, #0
 8000538:	f44f 7182 	mov.w	r1, #260	; 0x104
 800053c:	4825      	ldr	r0, [pc, #148]	; (80005d4 <MX_GPIO_Init+0x108>)
 800053e:	f001 fa75 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, BKLT_EN_Pin|AK_RSTN_Pin|TC_RESETN_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	f240 1105 	movw	r1, #261	; 0x105
 8000548:	4823      	ldr	r0, [pc, #140]	; (80005d8 <MX_GPIO_Init+0x10c>)
 800054a:	f001 fa6f 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TC_VEN_GPIO_Port, TC_VEN_Pin, GPIO_PIN_SET);
 800054e:	2201      	movs	r2, #1
 8000550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000554:	4820      	ldr	r0, [pc, #128]	; (80005d8 <MX_GPIO_Init+0x10c>)
 8000556:	f001 fa69 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PA3 */
  GPIO_InitStruct.Pin = ICM_INT_Pin|ICM_RESV_Pin|GPIO_PIN_3;
 800055a:	230b      	movs	r3, #11
 800055c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055e:	2300      	movs	r3, #0
 8000560:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	2300      	movs	r3, #0
 8000564:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4619      	mov	r1, r3
 800056c:	4819      	ldr	r0, [pc, #100]	; (80005d4 <MX_GPIO_Init+0x108>)
 800056e:	f001 f8d9 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = ICM_FSYNC_Pin|LCD_5_5V_EN_Pin;
 8000572:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000576:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000578:	2301      	movs	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000580:	2300      	movs	r3, #0
 8000582:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000584:	f107 030c 	add.w	r3, r7, #12
 8000588:	4619      	mov	r1, r3
 800058a:	4812      	ldr	r0, [pc, #72]	; (80005d4 <MX_GPIO_Init+0x108>)
 800058c:	f001 f8ca 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BKLT_EN_Pin|AK_RSTN_Pin|TC_VEN_Pin|TC_RESETN_Pin;
 8000590:	f244 1305 	movw	r3, #16645	; 0x4105
 8000594:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000596:	2301      	movs	r3, #1
 8000598:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059a:	2300      	movs	r3, #0
 800059c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	4619      	mov	r1, r3
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <MX_GPIO_Init+0x10c>)
 80005aa:	f001 f8bb 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB5 PB9 */
  GPIO_InitStruct.Pin = BKLT_FEEDBACK_Pin|AK_DRDY_Pin|GPIO_PIN_5|GPIO_PIN_9;
 80005ae:	f241 2322 	movw	r3, #4642	; 0x1222
 80005b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	4619      	mov	r1, r3
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <MX_GPIO_Init+0x10c>)
 80005c4:	f001 f8ae 	bl	8001724 <HAL_GPIO_Init>

}
 80005c8:	bf00      	nop
 80005ca:	3720      	adds	r7, #32
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020000 	.word	0x40020000
 80005d8:	40020400 	.word	0x40020400

080005dc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f001 fa21 	bl	8001a60 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 fd48 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200001a4 	.word	0x200001a4
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_I2C2_Init+0x50>)
 800063e:	4a13      	ldr	r2, [pc, #76]	; (800068c <MX_I2C2_Init+0x54>)
 8000640:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_I2C2_Init+0x50>)
 8000644:	4a12      	ldr	r2, [pc, #72]	; (8000690 <MX_I2C2_Init+0x58>)
 8000646:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_I2C2_Init+0x50>)
 800064a:	2200      	movs	r2, #0
 800064c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_I2C2_Init+0x50>)
 8000650:	2200      	movs	r2, #0
 8000652:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000654:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <MX_I2C2_Init+0x50>)
 8000656:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800065a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800065c:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <MX_I2C2_Init+0x50>)
 800065e:	2200      	movs	r2, #0
 8000660:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000662:	4b09      	ldr	r3, [pc, #36]	; (8000688 <MX_I2C2_Init+0x50>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000668:	4b07      	ldr	r3, [pc, #28]	; (8000688 <MX_I2C2_Init+0x50>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <MX_I2C2_Init+0x50>)
 8000670:	2200      	movs	r2, #0
 8000672:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <MX_I2C2_Init+0x50>)
 8000676:	f001 f9f3 	bl	8001a60 <HAL_I2C_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000680:	f000 fd1a 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	bd80      	pop	{r7, pc}
 8000688:	200001f8 	.word	0x200001f8
 800068c:	40005800 	.word	0x40005800
 8000690:	000186a0 	.word	0x000186a0

08000694 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3a      	ldr	r2, [pc, #232]	; (800079c <HAL_I2C_MspInit+0x108>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d12c      	bne.n	8000710 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
 80006ba:	4b39      	ldr	r3, [pc, #228]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a38      	ldr	r2, [pc, #224]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b36      	ldr	r3, [pc, #216]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	61bb      	str	r3, [r7, #24]
 80006d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80006d2:	23c0      	movs	r3, #192	; 0xc0
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d6:	2312      	movs	r3, #18
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006da:	2301      	movs	r3, #1
 80006dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006de:	2303      	movs	r3, #3
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80006e2:	2304      	movs	r3, #4
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	482d      	ldr	r0, [pc, #180]	; (80007a4 <HAL_I2C_MspInit+0x110>)
 80006ee:	f001 f819 	bl	8001724 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	4b2a      	ldr	r3, [pc, #168]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	4a29      	ldr	r2, [pc, #164]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 80006fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
 8000702:	4b27      	ldr	r3, [pc, #156]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 8000704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800070e:	e041      	b.n	8000794 <HAL_I2C_MspInit+0x100>
  else if(i2cHandle->Instance==I2C2)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <HAL_I2C_MspInit+0x114>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d13c      	bne.n	8000794 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b20      	ldr	r3, [pc, #128]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 8000724:	f043 0302 	orr.w	r3, r3, #2
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0302 	and.w	r3, r3, #2
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000736:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800073a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800073c:	2312      	movs	r3, #18
 800073e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000740:	2301      	movs	r3, #1
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000744:	2303      	movs	r3, #3
 8000746:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000748:	2304      	movs	r3, #4
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	4619      	mov	r1, r3
 8000752:	4814      	ldr	r0, [pc, #80]	; (80007a4 <HAL_I2C_MspInit+0x110>)
 8000754:	f000 ffe6 	bl	8001724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000758:	2308      	movs	r3, #8
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800075c:	2312      	movs	r3, #18
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000760:	2301      	movs	r3, #1
 8000762:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000764:	2303      	movs	r3, #3
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000768:	2309      	movs	r3, #9
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4619      	mov	r1, r3
 8000772:	480c      	ldr	r0, [pc, #48]	; (80007a4 <HAL_I2C_MspInit+0x110>)
 8000774:	f000 ffd6 	bl	8001724 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4b08      	ldr	r3, [pc, #32]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 800077e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 8000782:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000786:	6413      	str	r3, [r2, #64]	; 0x40
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <HAL_I2C_MspInit+0x10c>)
 800078a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
}
 8000794:	bf00      	nop
 8000796:	3730      	adds	r7, #48	; 0x30
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40005400 	.word	0x40005400
 80007a0:	40023800 	.word	0x40023800
 80007a4:	40020400 	.word	0x40020400
 80007a8:	40005800 	.word	0x40005800

080007ac <TCFormatI2C>:
 * formats the register addresses and data how the Toshiba chip needs them
 * and then calls HAL_I2C_Master_Transmit()
 * TODO: optimize this better, possibly with premade arrays
 */
void TCFormatI2C(uint16_t regAddr, uint32_t data, uint8_t dsize)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af02      	add	r7, sp, #8
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	80fb      	strh	r3, [r7, #6]
 80007b8:	4613      	mov	r3, r2
 80007ba:	717b      	strb	r3, [r7, #5]
	aTxBuffer[0] = (uint8_t)(regAddr >> 8);
 80007bc:	88fb      	ldrh	r3, [r7, #6]
 80007be:	0a1b      	lsrs	r3, r3, #8
 80007c0:	b29b      	uxth	r3, r3
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <TCFormatI2C+0x78>)
 80007c6:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = (uint8_t)regAddr;
 80007c8:	88fb      	ldrh	r3, [r7, #6]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <TCFormatI2C+0x78>)
 80007ce:	705a      	strb	r2, [r3, #1]
	aTxBuffer[2] = (uint8_t)data;
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b13      	ldr	r3, [pc, #76]	; (8000824 <TCFormatI2C+0x78>)
 80007d6:	709a      	strb	r2, [r3, #2]
	aTxBuffer[3] = (uint8_t)(data >> 8);
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	0a1b      	lsrs	r3, r3, #8
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <TCFormatI2C+0x78>)
 80007e0:	70da      	strb	r2, [r3, #3]
	aTxBuffer[4] = (uint8_t)(data >> 16);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	0c1b      	lsrs	r3, r3, #16
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <TCFormatI2C+0x78>)
 80007ea:	711a      	strb	r2, [r3, #4]
	aTxBuffer[5] = (uint8_t)(data >> 24);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	0e1b      	lsrs	r3, r3, #24
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <TCFormatI2C+0x78>)
 80007f4:	715a      	strb	r2, [r3, #5]
	if ( HAL_I2C_Master_Transmit(&hi2c1, TC_ADDR, aTxBuffer, dsize+2, 10) != HAL_OK)
 80007f6:	797b      	ldrb	r3, [r7, #5]
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	3302      	adds	r3, #2
 80007fc:	b29b      	uxth	r3, r3
 80007fe:	220a      	movs	r2, #10
 8000800:	9200      	str	r2, [sp, #0]
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <TCFormatI2C+0x78>)
 8000804:	211e      	movs	r1, #30
 8000806:	4808      	ldr	r0, [pc, #32]	; (8000828 <TCFormatI2C+0x7c>)
 8000808:	f001 fa6e 	bl	8001ce8 <HAL_I2C_Master_Transmit>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <TCFormatI2C+0x6a>
		Error_Handler();
 8000812:	f000 fc51 	bl	80010b8 <Error_Handler>
	HAL_Delay(1);
 8000816:	2001      	movs	r0, #1
 8000818:	f000 fe4e 	bl	80014b8 <HAL_Delay>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000174 	.word	0x20000174
 8000828:	200001a4 	.word	0x200001a4

0800082c <TCFormatReadI2C>:

/**
 * wrapper for reading a byte from the Toshiba chip over I2C
 */
uint8_t TCFormatReadI2C(uint16_t regAddr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af02      	add	r7, sp, #8
 8000832:	4603      	mov	r3, r0
 8000834:	80fb      	strh	r3, [r7, #6]
	aTxBuffer[0] = (uint8_t)(regAddr >> 8);
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	0a1b      	lsrs	r3, r3, #8
 800083a:	b29b      	uxth	r3, r3
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b13      	ldr	r3, [pc, #76]	; (800088c <TCFormatReadI2C+0x60>)
 8000840:	701a      	strb	r2, [r3, #0]
	aTxBuffer[1] = (uint8_t)regAddr;
 8000842:	88fb      	ldrh	r3, [r7, #6]
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b11      	ldr	r3, [pc, #68]	; (800088c <TCFormatReadI2C+0x60>)
 8000848:	705a      	strb	r2, [r3, #1]
	if ( HAL_I2C_Master_Transmit(&hi2c1, TC_ADDR, aTxBuffer, 2, 10) == HAL_OK)
 800084a:	230a      	movs	r3, #10
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2302      	movs	r3, #2
 8000850:	4a0e      	ldr	r2, [pc, #56]	; (800088c <TCFormatReadI2C+0x60>)
 8000852:	211e      	movs	r1, #30
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <TCFormatReadI2C+0x64>)
 8000856:	f001 fa47 	bl	8001ce8 <HAL_I2C_Master_Transmit>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d10d      	bne.n	800087c <TCFormatReadI2C+0x50>
		if( HAL_I2C_Master_Receive(&hi2c1, TC_ADDR, aTxBuffer, 1, 10) == HAL_OK)
 8000860:	230a      	movs	r3, #10
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	2301      	movs	r3, #1
 8000866:	4a09      	ldr	r2, [pc, #36]	; (800088c <TCFormatReadI2C+0x60>)
 8000868:	211e      	movs	r1, #30
 800086a:	4809      	ldr	r0, [pc, #36]	; (8000890 <TCFormatReadI2C+0x64>)
 800086c:	f001 fb3a 	bl	8001ee4 <HAL_I2C_Master_Receive>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d102      	bne.n	800087c <TCFormatReadI2C+0x50>
			return aTxBuffer[0];
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <TCFormatReadI2C+0x60>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	e002      	b.n	8000882 <TCFormatReadI2C+0x56>
	Error_Handler();
 800087c:	f000 fc1c 	bl	80010b8 <Error_Handler>
	return 0x00;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3708      	adds	r7, #8
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000174 	.word	0x20000174
 8000890:	200001a4 	.word	0x200001a4

08000894 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b0c8      	sub	sp, #288	; 0x120
 8000898:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800089a:	f000 fd9b 	bl	80013d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800089e:	f000 fb9d 	bl	8000fdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008a2:	f7ff fe13 	bl	80004cc <MX_GPIO_Init>
  MX_I2C1_Init();
 80008a6:	f7ff fe99 	bl	80005dc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80008aa:	f000 fcf7 	bl	800129c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80008ae:	f000 fc09 	bl	80010c4 <MX_SPI1_Init>
  MX_I2C2_Init();
 80008b2:	f7ff fec1 	bl	8000638 <MX_I2C2_Init>
  MX_USB_DEVICE_Init();
 80008b6:	f006 ffcd 	bl	8007854 <MX_USB_DEVICE_Init>
  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);	//GPIO B5 goes to light sensor, might be reset or input
  //HAL_Delay(10);

  //turn on LCD panel power (+/- 5.5V rail)
  //must come before bridge chip so bridge chip can configure it
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008ba:	2201      	movs	r2, #1
 80008bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008c0:	48b4      	ldr	r0, [pc, #720]	; (8000b94 <main+0x300>)
 80008c2:	f001 f8b3 	bl	8001a2c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80008c6:	200a      	movs	r0, #10
 80008c8:	f000 fdf6 	bl	80014b8 <HAL_Delay>

  //turn on bridge chip power rail
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 80008cc:	2201      	movs	r2, #1
 80008ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008d2:	48b1      	ldr	r0, [pc, #708]	; (8000b98 <main+0x304>)
 80008d4:	f001 f8aa 	bl	8001a2c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80008d8:	200a      	movs	r0, #10
 80008da:	f000 fded 	bl	80014b8 <HAL_Delay>

  //disable bridge chip reset line
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 80008de:	2201      	movs	r2, #1
 80008e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e4:	48ac      	ldr	r0, [pc, #688]	; (8000b98 <main+0x304>)
 80008e6:	f001 f8a1 	bl	8001a2c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80008ea:	200a      	movs	r0, #10
 80008ec:	f000 fde4 	bl	80014b8 <HAL_Delay>

  //start writing to bridge chip registers
  TCFormatI2C(0x0004, 0x0004, 2);
 80008f0:	2202      	movs	r2, #2
 80008f2:	2104      	movs	r1, #4
 80008f4:	2004      	movs	r0, #4
 80008f6:	f7ff ff59 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0002, 0x3F00, 2);
 80008fa:	2202      	movs	r2, #2
 80008fc:	f44f 517c 	mov.w	r1, #16128	; 0x3f00
 8000900:	2002      	movs	r0, #2
 8000902:	f7ff ff53 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0002, 0x0000, 2);
 8000906:	2202      	movs	r2, #2
 8000908:	2100      	movs	r1, #0
 800090a:	2002      	movs	r0, #2
 800090c:	f7ff ff4e 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0006, 0x0000, 2);
 8000910:	2202      	movs	r2, #2
 8000912:	2100      	movs	r1, #0
 8000914:	2006      	movs	r0, #6
 8000916:	f7ff ff49 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0016, 0x0F3F, 2);
 800091a:	2202      	movs	r2, #2
 800091c:	f640 713f 	movw	r1, #3903	; 0xf3f
 8000920:	2016      	movs	r0, #22
 8000922:	f7ff ff43 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8502, 0xFF, 1);
 8000926:	2201      	movs	r2, #1
 8000928:	21ff      	movs	r1, #255	; 0xff
 800092a:	f248 5002 	movw	r0, #34050	; 0x8502
 800092e:	f7ff ff3d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x850B, 0xFF, 1);
 8000932:	2201      	movs	r2, #1
 8000934:	21ff      	movs	r1, #255	; 0xff
 8000936:	f248 500b 	movw	r0, #34059	; 0x850b
 800093a:	f7ff ff37 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0014, 0x0F3F, 2);
 800093e:	2202      	movs	r2, #2
 8000940:	f640 713f 	movw	r1, #3903	; 0xf3f
 8000944:	2014      	movs	r0, #20
 8000946:	f7ff ff31 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8512, 0xFE, 1);
 800094a:	2201      	movs	r2, #1
 800094c:	21fe      	movs	r1, #254	; 0xfe
 800094e:	f248 5012 	movw	r0, #34066	; 0x8512
 8000952:	f7ff ff2b 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x851B, 0xFD, 1);
 8000956:	2201      	movs	r2, #1
 8000958:	21fd      	movs	r1, #253	; 0xfd
 800095a:	f248 501b 	movw	r0, #34075	; 0x851b
 800095e:	f7ff ff25 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8410, 0x03, 1);
 8000962:	2201      	movs	r2, #1
 8000964:	2103      	movs	r1, #3
 8000966:	f248 4010 	movw	r0, #33808	; 0x8410
 800096a:	f7ff ff1f 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8413, 0x3F, 1);
 800096e:	2201      	movs	r2, #1
 8000970:	213f      	movs	r1, #63	; 0x3f
 8000972:	f248 4013 	movw	r0, #33811	; 0x8413
 8000976:	f7ff ff19 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8420, 0x06, 1);
 800097a:	2201      	movs	r2, #1
 800097c:	2106      	movs	r1, #6
 800097e:	f248 4020 	movw	r0, #33824	; 0x8420
 8000982:	f7ff ff13 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x84F0, 0x31, 1);
 8000986:	2201      	movs	r2, #1
 8000988:	2131      	movs	r1, #49	; 0x31
 800098a:	f248 40f0 	movw	r0, #34032	; 0x84f0
 800098e:	f7ff ff0d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x84F4, 0x01, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	2101      	movs	r1, #1
 8000996:	f248 40f4 	movw	r0, #34036	; 0x84f4
 800099a:	f7ff ff07 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8540, 0x12C0, 2);
 800099e:	2202      	movs	r2, #2
 80009a0:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 80009a4:	f248 5040 	movw	r0, #34112	; 0x8540
 80009a8:	f7ff ff00 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8630, 0x00, 1);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2100      	movs	r1, #0
 80009b0:	f248 6030 	movw	r0, #34352	; 0x8630
 80009b4:	f7ff fefa 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8631, 0x0753, 2);
 80009b8:	2202      	movs	r2, #2
 80009ba:	f240 7153 	movw	r1, #1875	; 0x753
 80009be:	f248 6031 	movw	r0, #34353	; 0x8631
 80009c2:	f7ff fef3 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8670, 0x02, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2102      	movs	r1, #2
 80009ca:	f248 6070 	movw	r0, #34416	; 0x8670
 80009ce:	f7ff feed 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8A0C, 0x12C0, 2);
 80009d2:	2202      	movs	r2, #2
 80009d4:	f44f 5196 	mov.w	r1, #4800	; 0x12c0
 80009d8:	f648 200c 	movw	r0, #35340	; 0x8a0c
 80009dc:	f7ff fee6 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x85E0, 0x01, 1);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2101      	movs	r1, #1
 80009e4:	f248 50e0 	movw	r0, #34272	; 0x85e0
 80009e8:	f7ff fee0 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x85E3, 0x0100, 2);
 80009ec:	2202      	movs	r2, #2
 80009ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009f2:	f248 50e3 	movw	r0, #34275	; 0x85e3
 80009f6:	f7ff fed9 	bl	80007ac <TCFormatI2C>

  // EDID Data
  //edid needs to have a correct checksum or else it breaks the status register
  uint8_t edid[] = {0x8C, 0x00,	//edid address hardcoded as part of the array to make sending it easier
 80009fa:	463b      	mov	r3, r7
 80009fc:	4a67      	ldr	r2, [pc, #412]	; (8000b9c <main+0x308>)
 80009fe:	4618      	mov	r0, r3
 8000a00:	4611      	mov	r1, r2
 8000a02:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a06:	461a      	mov	r2, r3
 8000a08:	f007 fba2 	bl	8008150 <memcpy>
	0x38, 0xC0, 0x40, 0x80, 0x16, 0x70, 0x0C, 0x28, 0xE2, 0x00, 0xC0, 0x78, 0x00, 0x00, 0x00, 0x18,
	0x02, 0x3A, 0x38, 0xC0, 0x40, 0x80, 0x16, 0x70, 0x0C, 0x28, 0xE2, 0x00, 0xC0, 0x78, 0x00, 0x00,
	0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03};

  if ( HAL_I2C_Master_Transmit(&hi2c1, TC_ADDR, edid, sizeof(edid), 50) != HAL_OK)	//10ms isn't quite enough for 257 bytes, increased to 50ms
 8000a0c:	463a      	mov	r2, r7
 8000a0e:	2332      	movs	r3, #50	; 0x32
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	f44f 7381 	mov.w	r3, #258	; 0x102
 8000a16:	211e      	movs	r1, #30
 8000a18:	4861      	ldr	r0, [pc, #388]	; (8000ba0 <main+0x30c>)
 8000a1a:	f001 f965 	bl	8001ce8 <HAL_I2C_Master_Transmit>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <main+0x194>
	  Error_Handler();
 8000a24:	f000 fb48 	bl	80010b8 <Error_Handler>


  TCFormatI2C(0x85EC, 0x01, 1);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2101      	movs	r1, #1
 8000a2c:	f248 50ec 	movw	r0, #34284	; 0x85ec
 8000a30:	f7ff febc 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8560, 0x24, 1);
 8000a34:	2201      	movs	r2, #1
 8000a36:	2124      	movs	r1, #36	; 0x24
 8000a38:	f248 5060 	movw	r0, #34144	; 0x8560
 8000a3c:	f7ff feb6 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8563, 0x11, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	2111      	movs	r1, #17
 8000a44:	f248 5063 	movw	r0, #34147	; 0x8563
 8000a48:	f7ff feb0 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8564, 0x0F, 1);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	210f      	movs	r1, #15
 8000a50:	f248 5064 	movw	r0, #34148	; 0x8564
 8000a54:	f7ff feaa 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8543, 0x02, 1);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	f248 5043 	movw	r0, #34115	; 0x8543
 8000a60:	f7ff fea4 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8544, 0x10, 1);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2110      	movs	r1, #16
 8000a68:	f248 5044 	movw	r0, #34116	; 0x8544
 8000a6c:	f7ff fe9e 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8600, 0x00, 1);
 8000a70:	2201      	movs	r2, #1
 8000a72:	2100      	movs	r1, #0
 8000a74:	f44f 4006 	mov.w	r0, #34304	; 0x8600
 8000a78:	f7ff fe98 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8602, 0xF3, 1);
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	21f3      	movs	r1, #243	; 0xf3
 8000a80:	f248 6002 	movw	r0, #34306	; 0x8602
 8000a84:	f7ff fe92 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8603, 0x02, 1);
 8000a88:	2201      	movs	r2, #1
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	f248 6003 	movw	r0, #34307	; 0x8603
 8000a90:	f7ff fe8c 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8604, 0x0C, 1);
 8000a94:	2201      	movs	r2, #1
 8000a96:	210c      	movs	r1, #12
 8000a98:	f248 6004 	movw	r0, #34308	; 0x8604
 8000a9c:	f7ff fe86 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8606, 0x05, 1);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	2105      	movs	r1, #5
 8000aa4:	f248 6006 	movw	r0, #34310	; 0x8606
 8000aa8:	f7ff fe80 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8607, 0x00, 1);
 8000aac:	2201      	movs	r2, #1
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f248 6007 	movw	r0, #34311	; 0x8607
 8000ab4:	f7ff fe7a 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8652, 0x02, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	2102      	movs	r1, #2
 8000abc:	f248 6052 	movw	r0, #34386	; 0x8652
 8000ac0:	f7ff fe74 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8671, 0x020C49BA, 4);
 8000ac4:	2204      	movs	r2, #4
 8000ac6:	4937      	ldr	r1, [pc, #220]	; (8000ba4 <main+0x310>)
 8000ac8:	f248 6071 	movw	r0, #34417	; 0x8671
 8000acc:	f7ff fe6e 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8675, 0x01E1B089, 4);
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	4935      	ldr	r1, [pc, #212]	; (8000ba8 <main+0x314>)
 8000ad4:	f248 6075 	movw	r0, #34421	; 0x8675
 8000ad8:	f7ff fe68 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8680, 0x00, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2100      	movs	r1, #0
 8000ae0:	f248 6080 	movw	r0, #34432	; 0x8680
 8000ae4:	f7ff fe62 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0016, 0x0F1F, 2);
 8000ae8:	2202      	movs	r2, #2
 8000aea:	f640 711f 	movw	r1, #3871	; 0xf1f
 8000aee:	2016      	movs	r0, #22
 8000af0:	f7ff fe5c 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0002, 0x0001, 2);
 8000af4:	2202      	movs	r2, #2
 8000af6:	2101      	movs	r1, #1
 8000af8:	2002      	movs	r0, #2
 8000afa:	f7ff fe57 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0002, 0x0000, 2);
 8000afe:	2202      	movs	r2, #2
 8000b00:	2100      	movs	r1, #0
 8000b02:	2002      	movs	r0, #2
 8000b04:	f7ff fe52 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0016, 0x0F3F, 2);
 8000b08:	2202      	movs	r2, #2
 8000b0a:	f640 713f 	movw	r1, #3903	; 0xf3f
 8000b0e:	2016      	movs	r0, #22
 8000b10:	f7ff fe4c 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8502, 0xFF, 1);
 8000b14:	2201      	movs	r2, #1
 8000b16:	21ff      	movs	r1, #255	; 0xff
 8000b18:	f248 5002 	movw	r0, #34050	; 0x8502
 8000b1c:	f7ff fe46 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x850B, 0xFF, 1);
 8000b20:	2201      	movs	r2, #1
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	f248 500b 	movw	r0, #34059	; 0x850b
 8000b28:	f7ff fe40 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0014, 0x0F3F, 2);
 8000b2c:	2202      	movs	r2, #2
 8000b2e:	f640 713f 	movw	r1, #3903	; 0xf3f
 8000b32:	2014      	movs	r0, #20
 8000b34:	f7ff fe3a 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0016, 0x0D3F, 2);
 8000b38:	2202      	movs	r2, #2
 8000b3a:	f640 513f 	movw	r1, #3391	; 0xd3f
 8000b3e:	2016      	movs	r0, #22
 8000b40:	f7ff fe34 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x854A, 0x01, 1);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	f248 504a 	movw	r0, #34122	; 0x854a
 8000b4c:	f7ff fe2e 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0002, 0x0000, 2);
 8000b50:	2202      	movs	r2, #2
 8000b52:	2100      	movs	r1, #0
 8000b54:	2002      	movs	r0, #2
 8000b56:	f7ff fe29 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0016, 0x0F3F, 2);
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	f640 713f 	movw	r1, #3903	; 0xf3f
 8000b60:	2016      	movs	r0, #22
 8000b62:	f7ff fe23 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8502, 0xFF, 1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	21ff      	movs	r1, #255	; 0xff
 8000b6a:	f248 5002 	movw	r0, #34050	; 0x8502
 8000b6e:	f7ff fe1d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x850B, 0xFF, 1);
 8000b72:	2201      	movs	r2, #1
 8000b74:	21ff      	movs	r1, #255	; 0xff
 8000b76:	f248 500b 	movw	r0, #34059	; 0x850b
 8000b7a:	f7ff fe17 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0014, 0x0F3F, 2);
 8000b7e:	2202      	movs	r2, #2
 8000b80:	f640 713f 	movw	r1, #3903	; 0xf3f
 8000b84:	2014      	movs	r0, #20
 8000b86:	f7ff fe11 	bl	80007ac <TCFormatI2C>

  //poll for hdmi plugged in
  uint8_t status = 0x00;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000b90:	e00c      	b.n	8000bac <main+0x318>
 8000b92:	bf00      	nop
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020400 	.word	0x40020400
 8000b9c:	08008194 	.word	0x08008194
 8000ba0:	200001a4 	.word	0x200001a4
 8000ba4:	020c49ba 	.word	0x020c49ba
 8000ba8:	01e1b089 	.word	0x01e1b089
  do
  {
	  HAL_Delay(100);
 8000bac:	2064      	movs	r0, #100	; 0x64
 8000bae:	f000 fc83 	bl	80014b8 <HAL_Delay>
	  status = TCFormatReadI2C(0x8520);
 8000bb2:	f248 5020 	movw	r0, #34080	; 0x8520
 8000bb6:	f7ff fe39 	bl	800082c <TCFormatReadI2C>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  }
  while(status != 0x9F);
 8000bc0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000bc4:	2b9f      	cmp	r3, #159	; 0x9f
 8000bc6:	d1f1      	bne.n	8000bac <main+0x318>

  TCFormatI2C(0x0004, 0x0C32, 2);
 8000bc8:	2202      	movs	r2, #2
 8000bca:	f640 4132 	movw	r1, #3122	; 0xc32
 8000bce:	2004      	movs	r0, #4
 8000bd0:	f7ff fdec 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0002, 0x1200, 2);
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	f44f 5190 	mov.w	r1, #4608	; 0x1200
 8000bda:	2002      	movs	r0, #2
 8000bdc:	f7ff fde6 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0002, 0x0000, 2);
 8000be0:	2202      	movs	r2, #2
 8000be2:	2100      	movs	r1, #0
 8000be4:	2002      	movs	r0, #2
 8000be6:	f7ff fde1 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8A02, 0x42, 1);
 8000bea:	2201      	movs	r2, #1
 8000bec:	2142      	movs	r1, #66	; 0x42
 8000bee:	f648 2002 	movw	r0, #35330	; 0x8a02
 8000bf2:	f7ff fddb 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0108, 0x00000001, 4);
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	f44f 7084 	mov.w	r0, #264	; 0x108
 8000bfe:	f7ff fdd5 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x010C, 0x00000001, 4);
 8000c02:	2204      	movs	r2, #4
 8000c04:	2101      	movs	r1, #1
 8000c06:	f44f 7086 	mov.w	r0, #268	; 0x10c
 8000c0a:	f7ff fdcf 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x02A0, 0x00000001, 4);
 8000c0e:	2204      	movs	r2, #4
 8000c10:	2101      	movs	r1, #1
 8000c12:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 8000c16:	f7ff fdc9 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x02AC, 0x000090B5, 4);
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	f249 01b5 	movw	r1, #37045	; 0x90b5
 8000c20:	f44f 702b 	mov.w	r0, #684	; 0x2ac
 8000c24:	f7ff fdc2 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x02A0, 0x00000003, 4);
 8000c28:	2204      	movs	r2, #4
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	f44f 7028 	mov.w	r0, #672	; 0x2a0
 8000c30:	f7ff fdbc 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0118, 0x00000014, 4);
 8000c34:	2204      	movs	r2, #4
 8000c36:	2114      	movs	r1, #20
 8000c38:	f44f 708c 	mov.w	r0, #280	; 0x118
 8000c3c:	f7ff fdb6 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0120, 0x00001388, 4);
 8000c40:	2204      	movs	r2, #4
 8000c42:	f241 3188 	movw	r1, #5000	; 0x1388
 8000c46:	f44f 7090 	mov.w	r0, #288	; 0x120
 8000c4a:	f7ff fdaf 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0124, 0x00000000, 4);
 8000c4e:	2204      	movs	r2, #4
 8000c50:	2100      	movs	r1, #0
 8000c52:	f44f 7092 	mov.w	r0, #292	; 0x124
 8000c56:	f7ff fda9 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0128, 0x00000101, 4);
 8000c5a:	2204      	movs	r2, #4
 8000c5c:	f240 1101 	movw	r1, #257	; 0x101
 8000c60:	f44f 7094 	mov.w	r0, #296	; 0x128
 8000c64:	f7ff fda2 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0130, 0x00010000, 4);
 8000c68:	2204      	movs	r2, #4
 8000c6a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000c6e:	f44f 7098 	mov.w	r0, #304	; 0x130
 8000c72:	f7ff fd9b 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0134, 0x00005000, 4);
 8000c76:	2204      	movs	r2, #4
 8000c78:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 8000c7c:	f44f 709a 	mov.w	r0, #308	; 0x134
 8000c80:	f7ff fd94 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0138, 0x00010000, 4);
 8000c84:	2204      	movs	r2, #4
 8000c86:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000c8a:	f44f 709c 	mov.w	r0, #312	; 0x138
 8000c8e:	f7ff fd8d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x013C, 0x00010000, 4);
 8000c92:	2204      	movs	r2, #4
 8000c94:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000c98:	f44f 709e 	mov.w	r0, #316	; 0x13c
 8000c9c:	f7ff fd86 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0140, 0x00010000, 4);
 8000ca0:	2204      	movs	r2, #4
 8000ca2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000ca6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000caa:	f7ff fd7f 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0144, 0x00010000, 4);
 8000cae:	2204      	movs	r2, #4
 8000cb0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000cb4:	f44f 70a2 	mov.w	r0, #324	; 0x144
 8000cb8:	f7ff fd78 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0148, 0x00001000, 4);
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cc2:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8000cc6:	f7ff fd71 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x014C, 0x00010000, 4);
 8000cca:	2204      	movs	r2, #4
 8000ccc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000cd0:	f44f 70a6 	mov.w	r0, #332	; 0x14c
 8000cd4:	f7ff fd6a 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0150, 0x00000160, 4);
 8000cd8:	2204      	movs	r2, #4
 8000cda:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8000cde:	f44f 70a8 	mov.w	r0, #336	; 0x150
 8000ce2:	f7ff fd63 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0154, 0x00000001, 4);
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	2101      	movs	r1, #1
 8000cea:	f44f 70aa 	mov.w	r0, #340	; 0x154
 8000cee:	f7ff fd5d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0158, 0x000000C8, 4);
 8000cf2:	2204      	movs	r2, #4
 8000cf4:	21c8      	movs	r1, #200	; 0xc8
 8000cf6:	f44f 70ac 	mov.w	r0, #344	; 0x158
 8000cfa:	f7ff fd57 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0168, 0x0000002A, 4);
 8000cfe:	2204      	movs	r2, #4
 8000d00:	212a      	movs	r1, #42	; 0x2a
 8000d02:	f44f 70b4 	mov.w	r0, #360	; 0x168
 8000d06:	f7ff fd51 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0170, 0x000003A3, 4);
 8000d0a:	2204      	movs	r2, #4
 8000d0c:	f240 31a3 	movw	r1, #931	; 0x3a3
 8000d10:	f44f 70b8 	mov.w	r0, #368	; 0x170
 8000d14:	f7ff fd4a 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x017C, 0x00000081, 4);
 8000d18:	2204      	movs	r2, #4
 8000d1a:	2181      	movs	r1, #129	; 0x81
 8000d1c:	f44f 70be 	mov.w	r0, #380	; 0x17c
 8000d20:	f7ff fd44 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x018C, 0x00000001, 4);
 8000d24:	2204      	movs	r2, #4
 8000d26:	2101      	movs	r1, #1
 8000d28:	f44f 70c6 	mov.w	r0, #396	; 0x18c
 8000d2c:	f7ff fd3e 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0190, 0x00000064, 4);
 8000d30:	2204      	movs	r2, #4
 8000d32:	2164      	movs	r1, #100	; 0x64
 8000d34:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000d38:	f7ff fd38 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x01A4, 0x00000000, 4);
 8000d3c:	2204      	movs	r2, #4
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f44f 70d2 	mov.w	r0, #420	; 0x1a4
 8000d44:	f7ff fd32 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x01C0, 0x00000015, 4);
 8000d48:	2204      	movs	r2, #4
 8000d4a:	2115      	movs	r1, #21
 8000d4c:	f44f 70e0 	mov.w	r0, #448	; 0x1c0
 8000d50:	f7ff fd2c 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0214, 0x00000000, 4);
 8000d54:	2204      	movs	r2, #4
 8000d56:	2100      	movs	r1, #0
 8000d58:	f44f 7005 	mov.w	r0, #532	; 0x214
 8000d5c:	f7ff fd26 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x021C, 0x00000080, 4);
 8000d60:	2204      	movs	r2, #4
 8000d62:	2180      	movs	r1, #128	; 0x80
 8000d64:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8000d68:	f7ff fd20 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0224, 0x00000000, 4);
 8000d6c:	2204      	movs	r2, #4
 8000d6e:	2100      	movs	r1, #0
 8000d70:	f44f 7009 	mov.w	r0, #548	; 0x224
 8000d74:	f7ff fd1a 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0254, 0x00000006, 4);
 8000d78:	2204      	movs	r2, #4
 8000d7a:	2106      	movs	r1, #6
 8000d7c:	f44f 7015 	mov.w	r0, #596	; 0x254
 8000d80:	f7ff fd14 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0258, 0x00200005, 4);
 8000d84:	2204      	movs	r2, #4
 8000d86:	498e      	ldr	r1, [pc, #568]	; (8000fc0 <main+0x72c>)
 8000d88:	f44f 7016 	mov.w	r0, #600	; 0x258
 8000d8c:	f7ff fd0e 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x025C, 0x000B0005, 4);
 8000d90:	2204      	movs	r2, #4
 8000d92:	498c      	ldr	r1, [pc, #560]	; (8000fc4 <main+0x730>)
 8000d94:	f44f 7017 	mov.w	r0, #604	; 0x25c
 8000d98:	f7ff fd08 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0260, 0x000C0006, 4);
 8000d9c:	2204      	movs	r2, #4
 8000d9e:	498a      	ldr	r1, [pc, #552]	; (8000fc8 <main+0x734>)
 8000da0:	f44f 7018 	mov.w	r0, #608	; 0x260
 8000da4:	f7ff fd02 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0264, 0x00003E80, 4);
 8000da8:	2204      	movs	r2, #4
 8000daa:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8000dae:	f44f 7019 	mov.w	r0, #612	; 0x264
 8000db2:	f7ff fcfb 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0268, 0x0000000B, 4);
 8000db6:	2204      	movs	r2, #4
 8000db8:	210b      	movs	r1, #11
 8000dba:	f44f 701a 	mov.w	r0, #616	; 0x268
 8000dbe:	f7ff fcf5 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x026C, 0x000B0008, 4);
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	4981      	ldr	r1, [pc, #516]	; (8000fcc <main+0x738>)
 8000dc6:	f44f 701b 	mov.w	r0, #620	; 0x26c
 8000dca:	f7ff fcef 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0270, 0x00000020, 4);
 8000dce:	2204      	movs	r2, #4
 8000dd0:	2120      	movs	r1, #32
 8000dd2:	f44f 701c 	mov.w	r0, #624	; 0x270
 8000dd6:	f7ff fce9 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0274, 0x0000001F, 4);
 8000dda:	2204      	movs	r2, #4
 8000ddc:	211f      	movs	r1, #31
 8000dde:	f44f 701d 	mov.w	r0, #628	; 0x274
 8000de2:	f7ff fce3 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0278, 0x00060005, 4);
 8000de6:	2204      	movs	r2, #4
 8000de8:	4979      	ldr	r1, [pc, #484]	; (8000fd0 <main+0x73c>)
 8000dea:	f44f 701e 	mov.w	r0, #632	; 0x278
 8000dee:	f7ff fcdd 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x027C, 0x00000002, 4);
 8000df2:	2204      	movs	r2, #4
 8000df4:	2102      	movs	r1, #2
 8000df6:	f44f 701f 	mov.w	r0, #636	; 0x27c
 8000dfa:	f7ff fcd7 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x011C, 0x00000001, 4);
 8000dfe:	2204      	movs	r2, #4
 8000e00:	2101      	movs	r1, #1
 8000e02:	f44f 708e 	mov.w	r0, #284	; 0x11c
 8000e06:	f7ff fcd1 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0500, 0x0000, 2);
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
 8000e12:	f7ff fccb 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0110, 0x00000016, 4);
 8000e16:	2204      	movs	r2, #4
 8000e18:	2116      	movs	r1, #22
 8000e1a:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000e1e:	f7ff fcc5 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0310, 0x00000016, 4);
 8000e22:	2204      	movs	r2, #4
 8000e24:	2116      	movs	r1, #22
 8000e26:	f44f 7044 	mov.w	r0, #784	; 0x310
 8000e2a:	f7ff fcbf 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0504, 0x0005, 2);
 8000e2e:	2202      	movs	r2, #2
 8000e30:	2105      	movs	r1, #5
 8000e32:	f240 5004 	movw	r0, #1284	; 0x504
 8000e36:	f7ff fcb9 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0504, 0x0011, 2);
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	2111      	movs	r1, #17
 8000e3e:	f240 5004 	movw	r0, #1284	; 0x504
 8000e42:	f7ff fcb3 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0504, 0x0005, 2);
 8000e46:	2202      	movs	r2, #2
 8000e48:	2105      	movs	r1, #5
 8000e4a:	f240 5004 	movw	r0, #1284	; 0x504
 8000e4e:	f7ff fcad 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0504, 0x0029, 2);
 8000e52:	2202      	movs	r2, #2
 8000e54:	2129      	movs	r1, #41	; 0x29
 8000e56:	f240 5004 	movw	r0, #1284	; 0x504
 8000e5a:	f7ff fca7 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x5000, 0x0000, 2);
 8000e5e:	2202      	movs	r2, #2
 8000e60:	2100      	movs	r1, #0
 8000e62:	f44f 40a0 	mov.w	r0, #20480	; 0x5000
 8000e66:	f7ff fca1 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x500C, 0x0000, 2);
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	f245 000c 	movw	r0, #20492	; 0x500c
 8000e72:	f7ff fc9b 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x500E, 0x0437, 2);
 8000e76:	2202      	movs	r2, #2
 8000e78:	f240 4137 	movw	r1, #1079	; 0x437
 8000e7c:	f245 000e 	movw	r0, #20494	; 0x500e
 8000e80:	f7ff fc94 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x5080, 0x0000, 2);
 8000e84:	2202      	movs	r2, #2
 8000e86:	2100      	movs	r1, #0
 8000e88:	f44f 40a1 	mov.w	r0, #20608	; 0x5080
 8000e8c:	f7ff fc8e 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x508C, 0x0000, 2);
 8000e90:	2202      	movs	r2, #2
 8000e92:	2100      	movs	r1, #0
 8000e94:	f245 008c 	movw	r0, #20620	; 0x508c
 8000e98:	f7ff fc88 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x508E, 0x0437, 2);
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	f240 4137 	movw	r1, #1079	; 0x437
 8000ea2:	f245 008e 	movw	r0, #20622	; 0x508e
 8000ea6:	f7ff fc81 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x7080, 0x0080, 2);
 8000eaa:	2202      	movs	r2, #2
 8000eac:	2180      	movs	r1, #128	; 0x80
 8000eae:	f44f 40e1 	mov.w	r0, #28800	; 0x7080
 8000eb2:	f7ff fc7b 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x5008, 0x0CA8, 2);
 8000eb6:	2202      	movs	r2, #2
 8000eb8:	f640 41a8 	movw	r1, #3240	; 0xca8
 8000ebc:	f245 0008 	movw	r0, #20488	; 0x5008
 8000ec0:	f7ff fc74 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x5088, 0x0CA8, 2);
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	f640 41a8 	movw	r1, #3240	; 0xca8
 8000eca:	f245 0088 	movw	r0, #20616	; 0x5088
 8000ece:	f7ff fc6d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8502, 0xFF, 1);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	21ff      	movs	r1, #255	; 0xff
 8000ed6:	f248 5002 	movw	r0, #34050	; 0x8502
 8000eda:	f7ff fc67 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8503, 0xFF, 1);
 8000ede:	2201      	movs	r2, #1
 8000ee0:	21ff      	movs	r1, #255	; 0xff
 8000ee2:	f248 5003 	movw	r0, #34051	; 0x8503
 8000ee6:	f7ff fc61 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8504, 0xFF, 1);
 8000eea:	2201      	movs	r2, #1
 8000eec:	21ff      	movs	r1, #255	; 0xff
 8000eee:	f248 5004 	movw	r0, #34052	; 0x8504
 8000ef2:	f7ff fc5b 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8505, 0xFF, 1);
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	21ff      	movs	r1, #255	; 0xff
 8000efa:	f248 5005 	movw	r0, #34053	; 0x8505
 8000efe:	f7ff fc55 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x8506, 0xFF, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	21ff      	movs	r1, #255	; 0xff
 8000f06:	f248 5006 	movw	r0, #34054	; 0x8506
 8000f0a:	f7ff fc4f 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x850B, 0xFF, 1);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	21ff      	movs	r1, #255	; 0xff
 8000f12:	f248 500b 	movw	r0, #34059	; 0x850b
 8000f16:	f7ff fc49 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0014, 0x0F3F, 2);
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	f640 713f 	movw	r1, #3903	; 0xf3f
 8000f20:	2014      	movs	r0, #20
 8000f22:	f7ff fc43 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0016, 0x0D3F, 2);
 8000f26:	2202      	movs	r2, #2
 8000f28:	f640 513f 	movw	r1, #3391	; 0xd3f
 8000f2c:	2016      	movs	r0, #22
 8000f2e:	f7ff fc3d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0004, 0x0C35, 2);
 8000f32:	2202      	movs	r2, #2
 8000f34:	f640 4135 	movw	r1, #3125	; 0xc35
 8000f38:	2004      	movs	r0, #4
 8000f3a:	f7ff fc37 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0006, 0x0000, 2);
 8000f3e:	2202      	movs	r2, #2
 8000f40:	2100      	movs	r1, #0
 8000f42:	2006      	movs	r0, #6
 8000f44:	f7ff fc32 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0110, 0x00000006, 4);
 8000f48:	2204      	movs	r2, #4
 8000f4a:	2106      	movs	r1, #6
 8000f4c:	f44f 7088 	mov.w	r0, #272	; 0x110
 8000f50:	f7ff fc2c 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0310, 0x00000006, 4);
 8000f54:	2204      	movs	r2, #4
 8000f56:	2106      	movs	r1, #6
 8000f58:	f44f 7044 	mov.w	r0, #784	; 0x310
 8000f5c:	f7ff fc26 	bl	80007ac <TCFormatI2C>

  //clear interrupts
  HAL_Delay(20);
 8000f60:	2014      	movs	r0, #20
 8000f62:	f000 faa9 	bl	80014b8 <HAL_Delay>
  TCFormatI2C(0x850B, 0xFF, 1);
 8000f66:	2201      	movs	r2, #1
 8000f68:	21ff      	movs	r1, #255	; 0xff
 8000f6a:	f248 500b 	movw	r0, #34059	; 0x850b
 8000f6e:	f7ff fc1d 	bl	80007ac <TCFormatI2C>
  TCFormatI2C(0x0014, 0x0FBF, 2);
 8000f72:	2202      	movs	r2, #2
 8000f74:	f640 71bf 	movw	r1, #4031	; 0xfbf
 8000f78:	2014      	movs	r0, #20
 8000f7a:	f7ff fc17 	bl	80007ac <TCFormatI2C>


  //turn on panel backlight power
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8000f7e:	2201      	movs	r2, #1
 8000f80:	2101      	movs	r1, #1
 8000f82:	4814      	ldr	r0, [pc, #80]	; (8000fd4 <main+0x740>)
 8000f84:	f000 fd52 	bl	8001a2c <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000f88:	2064      	movs	r0, #100	; 0x64
 8000f8a:	f000 fa95 	bl	80014b8 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    // Send HID report
	    buffer.quat[0] = 1;	//w
 8000f8e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000f92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	    buffer.quat[1] = 0;	//y
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	    buffer.quat[2] = 0;	//z
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	    buffer.quat[3] = 0; //x
 8000fa6:	f04f 0300 	mov.w	r3, #0
 8000faa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &(buffer.bytes), sizeof(buffer));
 8000fae:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4808      	ldr	r0, [pc, #32]	; (8000fd8 <main+0x744>)
 8000fb8:	f005 f9ee 	bl	8006398 <USBD_CUSTOM_HID_SendReport>
	    buffer.quat[0] = 1;	//w
 8000fbc:	e7e7      	b.n	8000f8e <main+0x6fa>
 8000fbe:	bf00      	nop
 8000fc0:	00200005 	.word	0x00200005
 8000fc4:	000b0005 	.word	0x000b0005
 8000fc8:	000c0006 	.word	0x000c0006
 8000fcc:	000b0008 	.word	0x000b0008
 8000fd0:	00060005 	.word	0x00060005
 8000fd4:	40020400 	.word	0x40020400
 8000fd8:	200002ec 	.word	0x200002ec

08000fdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b094      	sub	sp, #80	; 0x50
 8000fe0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe2:	f107 0320 	add.w	r3, r7, #32
 8000fe6:	2230      	movs	r2, #48	; 0x30
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f007 f8be 	bl	800816c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	4b2a      	ldr	r3, [pc, #168]	; (80010b0 <SystemClock_Config+0xd4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <SystemClock_Config+0xd4>)
 800100a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800100e:	6413      	str	r3, [r2, #64]	; 0x40
 8001010:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <SystemClock_Config+0xd4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800101c:	2300      	movs	r3, #0
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4b24      	ldr	r3, [pc, #144]	; (80010b4 <SystemClock_Config+0xd8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <SystemClock_Config+0xd8>)
 800102a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <SystemClock_Config+0xd8>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800103c:	2303      	movs	r3, #3
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001040:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001046:	2301      	movs	r3, #1
 8001048:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104a:	2310      	movs	r3, #16
 800104c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800104e:	2302      	movs	r3, #2
 8001050:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001052:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001056:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001058:	2306      	movs	r3, #6
 800105a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800105c:	2348      	movs	r3, #72	; 0x48
 800105e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001060:	2302      	movs	r3, #2
 8001062:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001064:	2303      	movs	r3, #3
 8001066:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0320 	add.w	r3, r7, #32
 800106c:	4618      	mov	r0, r3
 800106e:	f002 fdf7 	bl	8003c60 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001078:	f000 f81e 	bl	80010b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001080:	2300      	movs	r3, #0
 8001082:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001088:	2300      	movs	r3, #0
 800108a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001090:	f107 030c 	add.w	r3, r7, #12
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f003 f85a 	bl	8004150 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010a2:	f000 f809 	bl	80010b8 <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3750      	adds	r7, #80	; 0x50
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	40023800 	.word	0x40023800
 80010b4:	40007000 	.word	0x40007000

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ca:	4a18      	ldr	r2, [pc, #96]	; (800112c <MX_SPI1_Init+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010ce:	4b16      	ldr	r3, [pc, #88]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010d4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e2:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_SPI1_Init+0x64>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010e8:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_SPI1_Init+0x64>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010f6:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010fc:	4b0a      	ldr	r3, [pc, #40]	; (8001128 <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_SPI1_Init+0x64>)
 8001104:	2200      	movs	r2, #0
 8001106:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001108:	4b07      	ldr	r3, [pc, #28]	; (8001128 <MX_SPI1_Init+0x64>)
 800110a:	2200      	movs	r2, #0
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800110e:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_SPI1_Init+0x64>)
 8001110:	220a      	movs	r2, #10
 8001112:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001114:	4804      	ldr	r0, [pc, #16]	; (8001128 <MX_SPI1_Init+0x64>)
 8001116:	f003 f9eb 	bl	80044f0 <HAL_SPI_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001120:	f7ff ffca 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001124:	bf00      	nop
 8001126:	bd80      	pop	{r7, pc}
 8001128:	2000024c 	.word	0x2000024c
 800112c:	40013000 	.word	0x40013000

08001130 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_SPI_MspInit+0x84>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d12b      	bne.n	80011aa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 800115c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_SPI_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800118a:	23f0      	movs	r3, #240	; 0xf0
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800119a:	2305      	movs	r3, #5
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_SPI_MspInit+0x8c>)
 80011a6:	f000 fabd 	bl	8001724 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40013000 	.word	0x40013000
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_MspInit+0x4c>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_MspInit+0x4c>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_MspInit+0x4c>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x4c>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x4c>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x4c>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f90c 	bl	8001478 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <OTG_FS_IRQHandler+0x10>)
 800126a:	f001 fcde 	bl	8002c2a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200007bc 	.word	0x200007bc

08001278 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <SystemInit+0x20>)
 800127e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <SystemInit+0x20>)
 8001284:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001288:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a0:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012a2:	4a12      	ldr	r2, [pc, #72]	; (80012ec <MX_USART1_UART_Init+0x50>)
 80012a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012a6:	4b10      	ldr	r3, [pc, #64]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012c2:	220c      	movs	r2, #12
 80012c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_USART1_UART_Init+0x4c>)
 80012d4:	f003 f995 	bl	8004602 <HAL_UART_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012de:	f7ff feeb 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200002a4 	.word	0x200002a4
 80012ec:	40011000 	.word	0x40011000

080012f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012f8:	f107 0314 	add.w	r3, r7, #20
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a19      	ldr	r2, [pc, #100]	; (8001374 <HAL_UART_MspInit+0x84>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d12c      	bne.n	800136c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_UART_MspInit+0x88>)
 800131c:	f043 0310 	orr.w	r3, r3, #16
 8001320:	6453      	str	r3, [r2, #68]	; 0x44
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001326:	f003 0310 	and.w	r3, r3, #16
 800132a:	613b      	str	r3, [r7, #16]
 800132c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001336:	4a10      	ldr	r2, [pc, #64]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6313      	str	r3, [r2, #48]	; 0x30
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <HAL_UART_MspInit+0x88>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	60fb      	str	r3, [r7, #12]
 8001348:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800134a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001358:	2303      	movs	r3, #3
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800135c:	2307      	movs	r3, #7
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_UART_MspInit+0x8c>)
 8001368:	f000 f9dc 	bl	8001724 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800136c:	bf00      	nop
 800136e:	3728      	adds	r7, #40	; 0x28
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40011000 	.word	0x40011000
 8001378:	40023800 	.word	0x40023800
 800137c:	40020000 	.word	0x40020000

08001380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001386:	490e      	ldr	r1, [pc, #56]	; (80013c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001388:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800138c:	e002      	b.n	8001394 <LoopCopyDataInit>

0800138e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800138e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001390:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001392:	3304      	adds	r3, #4

08001394 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001394:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001396:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001398:	d3f9      	bcc.n	800138e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800139a:	4a0b      	ldr	r2, [pc, #44]	; (80013c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800139c:	4c0b      	ldr	r4, [pc, #44]	; (80013cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013a0:	e001      	b.n	80013a6 <LoopFillZerobss>

080013a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013a4:	3204      	adds	r2, #4

080013a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a8:	d3fb      	bcc.n	80013a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013aa:	f7ff ff65 	bl	8001278 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ae:	f006 feab 	bl	8008108 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013b2:	f7ff fa6f 	bl	8000894 <main>
  bx  lr    
 80013b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c0:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80013c4:	08008320 	.word	0x08008320
  ldr r2, =_sbss
 80013c8:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80013cc:	20000bc4 	.word	0x20000bc4

080013d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d0:	e7fe      	b.n	80013d0 <ADC_IRQHandler>
	...

080013d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013d8:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <HAL_Init+0x40>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a0d      	ldr	r2, [pc, #52]	; (8001414 <HAL_Init+0x40>)
 80013de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013e4:	4b0b      	ldr	r3, [pc, #44]	; (8001414 <HAL_Init+0x40>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_Init+0x40>)
 80013ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <HAL_Init+0x40>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_Init+0x40>)
 80013f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f94f 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f808 	bl	8001418 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001408:	f7ff feda 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023c00 	.word	0x40023c00

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001420:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_InitTick+0x54>)
 8001422:	681a      	ldr	r2, [r3, #0]
 8001424:	4b12      	ldr	r3, [pc, #72]	; (8001470 <HAL_InitTick+0x58>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	4619      	mov	r1, r3
 800142a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800142e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001432:	fbb2 f3f3 	udiv	r3, r2, r3
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f967 	bl	800170a <HAL_SYSTICK_Config>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e00e      	b.n	8001464 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d80a      	bhi.n	8001462 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800144c:	2200      	movs	r2, #0
 800144e:	6879      	ldr	r1, [r7, #4]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295
 8001454:	f000 f92f 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001458:	4a06      	ldr	r2, [pc, #24]	; (8001474 <HAL_InitTick+0x5c>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e000      	b.n	8001464 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000000 	.word	0x20000000
 8001470:	20000008 	.word	0x20000008
 8001474:	20000004 	.word	0x20000004

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	; (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	200002e8 	.word	0x200002e8

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	; (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	200002e8 	.word	0x200002e8

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff3e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff31 	bl	8001564 <__NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffa2 	bl	800165c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e159      	b.n	80019f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8148 	bne.w	80019ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	2b02      	cmp	r3, #2
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a2 	beq.w	80019ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_GPIO_Init+0x2ec>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a49      	ldr	r2, [pc, #292]	; (8001a14 <HAL_GPIO_Init+0x2f0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x202>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_GPIO_Init+0x2f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x1fe>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a47      	ldr	r2, [pc, #284]	; (8001a1c <HAL_GPIO_Init+0x2f8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x1fa>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a46      	ldr	r2, [pc, #280]	; (8001a20 <HAL_GPIO_Init+0x2fc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x1f6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a45      	ldr	r2, [pc, #276]	; (8001a24 <HAL_GPIO_Init+0x300>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x1f2>
 8001912:	2304      	movs	r3, #4
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001916:	2307      	movs	r3, #7
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x204>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x204>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x2ec>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <HAL_GPIO_Init+0x304>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001994:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_GPIO_Init+0x304>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019e8:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f aea2 	bls.w	8001740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
	...

08001a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e12b      	b.n	8001cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d106      	bne.n	8001a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7fe fe04 	bl	8000694 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2224      	movs	r2, #36	; 0x24
 8001a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ac4:	f002 fcec 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8001ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4a81      	ldr	r2, [pc, #516]	; (8001cd4 <HAL_I2C_Init+0x274>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d807      	bhi.n	8001ae4 <HAL_I2C_Init+0x84>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4a80      	ldr	r2, [pc, #512]	; (8001cd8 <HAL_I2C_Init+0x278>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	bf94      	ite	ls
 8001adc:	2301      	movls	r3, #1
 8001ade:	2300      	movhi	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	e006      	b.n	8001af2 <HAL_I2C_Init+0x92>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4a7d      	ldr	r2, [pc, #500]	; (8001cdc <HAL_I2C_Init+0x27c>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	bf94      	ite	ls
 8001aec:	2301      	movls	r3, #1
 8001aee:	2300      	movhi	r3, #0
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0e7      	b.n	8001cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4a78      	ldr	r2, [pc, #480]	; (8001ce0 <HAL_I2C_Init+0x280>)
 8001afe:	fba2 2303 	umull	r2, r3, r2, r3
 8001b02:	0c9b      	lsrs	r3, r3, #18
 8001b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	68ba      	ldr	r2, [r7, #8]
 8001b16:	430a      	orrs	r2, r1
 8001b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6a1b      	ldr	r3, [r3, #32]
 8001b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	4a6a      	ldr	r2, [pc, #424]	; (8001cd4 <HAL_I2C_Init+0x274>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d802      	bhi.n	8001b34 <HAL_I2C_Init+0xd4>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	3301      	adds	r3, #1
 8001b32:	e009      	b.n	8001b48 <HAL_I2C_Init+0xe8>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	4a69      	ldr	r2, [pc, #420]	; (8001ce4 <HAL_I2C_Init+0x284>)
 8001b40:	fba2 2303 	umull	r2, r3, r2, r3
 8001b44:	099b      	lsrs	r3, r3, #6
 8001b46:	3301      	adds	r3, #1
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	430b      	orrs	r3, r1
 8001b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	69db      	ldr	r3, [r3, #28]
 8001b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	495c      	ldr	r1, [pc, #368]	; (8001cd4 <HAL_I2C_Init+0x274>)
 8001b64:	428b      	cmp	r3, r1
 8001b66:	d819      	bhi.n	8001b9c <HAL_I2C_Init+0x13c>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e59      	subs	r1, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b76:	1c59      	adds	r1, r3, #1
 8001b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b7c:	400b      	ands	r3, r1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_I2C_Init+0x138>
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	1e59      	subs	r1, r3, #1
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b96:	e051      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001b98:	2304      	movs	r3, #4
 8001b9a:	e04f      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d111      	bne.n	8001bc8 <HAL_I2C_Init+0x168>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1e58      	subs	r0, r3, #1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6859      	ldr	r1, [r3, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	440b      	add	r3, r1
 8001bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf0c      	ite	eq
 8001bc0:	2301      	moveq	r3, #1
 8001bc2:	2300      	movne	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	e012      	b.n	8001bee <HAL_I2C_Init+0x18e>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	1e58      	subs	r0, r3, #1
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	0099      	lsls	r1, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bde:	3301      	adds	r3, #1
 8001be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <HAL_I2C_Init+0x196>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	e022      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10e      	bne.n	8001c1c <HAL_I2C_Init+0x1bc>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	1e58      	subs	r0, r3, #1
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	460b      	mov	r3, r1
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	440b      	add	r3, r1
 8001c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c10:	3301      	adds	r3, #1
 8001c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c1a:	e00f      	b.n	8001c3c <HAL_I2C_Init+0x1dc>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	1e58      	subs	r0, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6859      	ldr	r1, [r3, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	0099      	lsls	r1, r3, #2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c32:	3301      	adds	r3, #1
 8001c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c3c:	6879      	ldr	r1, [r7, #4]
 8001c3e:	6809      	ldr	r1, [r1, #0]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69da      	ldr	r2, [r3, #28]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a1b      	ldr	r3, [r3, #32]
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	6911      	ldr	r1, [r2, #16]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	68d2      	ldr	r2, [r2, #12]
 8001c76:	4311      	orrs	r1, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	430b      	orrs	r3, r1
 8001c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	699b      	ldr	r3, [r3, #24]
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f042 0201 	orr.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2220      	movs	r2, #32
 8001cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3710      	adds	r7, #16
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	000186a0 	.word	0x000186a0
 8001cd8:	001e847f 	.word	0x001e847f
 8001cdc:	003d08ff 	.word	0x003d08ff
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	10624dd3 	.word	0x10624dd3

08001ce8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	817b      	strh	r3, [r7, #10]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cfc:	f7ff fbd0 	bl	80014a0 <HAL_GetTick>
 8001d00:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b20      	cmp	r3, #32
 8001d0c:	f040 80e0 	bne.w	8001ed0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2319      	movs	r3, #25
 8001d16:	2201      	movs	r2, #1
 8001d18:	4970      	ldr	r1, [pc, #448]	; (8001edc <HAL_I2C_Master_Transmit+0x1f4>)
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f000 fc58 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d26:	2302      	movs	r3, #2
 8001d28:	e0d3      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d101      	bne.n	8001d38 <HAL_I2C_Master_Transmit+0x50>
 8001d34:	2302      	movs	r3, #2
 8001d36:	e0cc      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d007      	beq.n	8001d5e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0201 	orr.w	r2, r2, #1
 8001d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2221      	movs	r2, #33	; 0x21
 8001d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2210      	movs	r2, #16
 8001d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	893a      	ldrh	r2, [r7, #8]
 8001d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d94:	b29a      	uxth	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	4a50      	ldr	r2, [pc, #320]	; (8001ee0 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001da0:	8979      	ldrh	r1, [r7, #10]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	6a3a      	ldr	r2, [r7, #32]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 fac2 	bl	8002330 <I2C_MasterRequestWrite>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e08d      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001db6:	2300      	movs	r3, #0
 8001db8:	613b      	str	r3, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dcc:	e066      	b.n	8001e9c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	6a39      	ldr	r1, [r7, #32]
 8001dd2:	68f8      	ldr	r0, [r7, #12]
 8001dd4:	f000 fcd2 	bl	800277c <I2C_WaitOnTXEFlagUntilTimeout>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00d      	beq.n	8001dfa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d107      	bne.n	8001df6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001df4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e06b      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	781a      	ldrb	r2, [r3, #0]
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0a:	1c5a      	adds	r2, r3, #1
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e14:	b29b      	uxth	r3, r3
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29a      	uxth	r2, r3
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e22:	3b01      	subs	r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d11b      	bne.n	8001e70 <HAL_I2C_Master_Transmit+0x188>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d017      	beq.n	8001e70 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	1c5a      	adds	r2, r3, #1
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	6a39      	ldr	r1, [r7, #32]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fcc2 	bl	80027fe <I2C_WaitOnBTFFlagUntilTimeout>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d00d      	beq.n	8001e9c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	2b04      	cmp	r3, #4
 8001e86:	d107      	bne.n	8001e98 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e96:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e01a      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d194      	bne.n	8001dce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2220      	movs	r2, #32
 8001eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e000      	b.n	8001ed2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ed0:	2302      	movs	r3, #2
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	00100002 	.word	0x00100002
 8001ee0:	ffff0000 	.word	0xffff0000

08001ee4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08c      	sub	sp, #48	; 0x30
 8001ee8:	af02      	add	r7, sp, #8
 8001eea:	60f8      	str	r0, [r7, #12]
 8001eec:	607a      	str	r2, [r7, #4]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	817b      	strh	r3, [r7, #10]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff fad2 	bl	80014a0 <HAL_GetTick>
 8001efc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b20      	cmp	r3, #32
 8001f08:	f040 820b 	bne.w	8002322 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2319      	movs	r3, #25
 8001f12:	2201      	movs	r2, #1
 8001f14:	497c      	ldr	r1, [pc, #496]	; (8002108 <HAL_I2C_Master_Receive+0x224>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f000 fb5a 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001f22:	2302      	movs	r3, #2
 8001f24:	e1fe      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2C_Master_Receive+0x50>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e1f7      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d007      	beq.n	8001f5a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0201 	orr.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f68:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2222      	movs	r2, #34	; 0x22
 8001f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2210      	movs	r2, #16
 8001f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	893a      	ldrh	r2, [r7, #8]
 8001f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f90:	b29a      	uxth	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	4a5c      	ldr	r2, [pc, #368]	; (800210c <HAL_I2C_Master_Receive+0x228>)
 8001f9a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f9c:	8979      	ldrh	r1, [r7, #10]
 8001f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f000 fa46 	bl	8002434 <I2C_MasterRequestRead>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1b8      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d113      	bne.n	8001fe2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	623b      	str	r3, [r7, #32]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	623b      	str	r3, [r7, #32]
 8001fce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	e18c      	b.n	80022fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d11b      	bne.n	8002022 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	e16c      	b.n	80022fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b02      	cmp	r3, #2
 8002028:	d11b      	bne.n	8002062 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002038:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002048:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	61bb      	str	r3, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	e14c      	b.n	80022fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002070:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002072:	2300      	movs	r3, #0
 8002074:	617b      	str	r3, [r7, #20]
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	617b      	str	r3, [r7, #20]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002088:	e138      	b.n	80022fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800208e:	2b03      	cmp	r3, #3
 8002090:	f200 80f1 	bhi.w	8002276 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002098:	2b01      	cmp	r3, #1
 800209a:	d123      	bne.n	80020e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800209c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800209e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020a0:	68f8      	ldr	r0, [r7, #12]
 80020a2:	f000 fbed 	bl	8002880 <I2C_WaitOnRXNEFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	e139      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691a      	ldr	r2, [r3, #16]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c2:	1c5a      	adds	r2, r3, #1
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b01      	subs	r3, #1
 80020dc:	b29a      	uxth	r2, r3
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020e2:	e10b      	b.n	80022fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d14e      	bne.n	800218a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ee:	9300      	str	r3, [sp, #0]
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	2200      	movs	r2, #0
 80020f4:	4906      	ldr	r1, [pc, #24]	; (8002110 <HAL_I2C_Master_Receive+0x22c>)
 80020f6:	68f8      	ldr	r0, [r7, #12]
 80020f8:	f000 fa6a 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d008      	beq.n	8002114 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e10e      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
 8002106:	bf00      	nop
 8002108:	00100002 	.word	0x00100002
 800210c:	ffff0000 	.word	0xffff0000
 8002110:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002122:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	691a      	ldr	r2, [r3, #16]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	b2d2      	uxtb	r2, r2
 8002130:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	1c5a      	adds	r2, r3, #1
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002172:	3b01      	subs	r3, #1
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217e:	b29b      	uxth	r3, r3
 8002180:	3b01      	subs	r3, #1
 8002182:	b29a      	uxth	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002188:	e0b8      	b.n	80022fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002190:	2200      	movs	r2, #0
 8002192:	4966      	ldr	r1, [pc, #408]	; (800232c <HAL_I2C_Master_Receive+0x448>)
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fa1b 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0bf      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29a      	uxth	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021ec:	2200      	movs	r2, #0
 80021ee:	494f      	ldr	r1, [pc, #316]	; (800232c <HAL_I2C_Master_Receive+0x448>)
 80021f0:	68f8      	ldr	r0, [r7, #12]
 80021f2:	f000 f9ed 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e091      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	691a      	ldr	r2, [r3, #16]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	1c5a      	adds	r2, r3, #1
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222c:	3b01      	subs	r3, #1
 800222e:	b29a      	uxth	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002238:	b29b      	uxth	r3, r3
 800223a:	3b01      	subs	r3, #1
 800223c:	b29a      	uxth	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691a      	ldr	r2, [r3, #16]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800225e:	3b01      	subs	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226a:	b29b      	uxth	r3, r3
 800226c:	3b01      	subs	r3, #1
 800226e:	b29a      	uxth	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002274:	e042      	b.n	80022fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002276:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800227a:	68f8      	ldr	r0, [r7, #12]
 800227c:	f000 fb00 	bl	8002880 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e04c      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229c:	1c5a      	adds	r2, r3, #1
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a6:	3b01      	subs	r3, #1
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0304 	and.w	r3, r3, #4
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	d118      	bne.n	80022fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	1c5a      	adds	r2, r3, #1
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	3b01      	subs	r3, #1
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002300:	2b00      	cmp	r3, #0
 8002302:	f47f aec2 	bne.w	800208a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2220      	movs	r2, #32
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	e000      	b.n	8002324 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002322:	2302      	movs	r3, #2
  }
}
 8002324:	4618      	mov	r0, r3
 8002326:	3728      	adds	r7, #40	; 0x28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	00010004 	.word	0x00010004

08002330 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b088      	sub	sp, #32
 8002334:	af02      	add	r7, sp, #8
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	607a      	str	r2, [r7, #4]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	460b      	mov	r3, r1
 800233e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b08      	cmp	r3, #8
 800234a:	d006      	beq.n	800235a <I2C_MasterRequestWrite+0x2a>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d003      	beq.n	800235a <I2C_MasterRequestWrite+0x2a>
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002358:	d108      	bne.n	800236c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e00b      	b.n	8002384 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002370:	2b12      	cmp	r3, #18
 8002372:	d107      	bne.n	8002384 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002382:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f91d 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00d      	beq.n	80023b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023aa:	d103      	bne.n	80023b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e035      	b.n	8002424 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023c0:	d108      	bne.n	80023d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023c2:	897b      	ldrh	r3, [r7, #10]
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	461a      	mov	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	e01b      	b.n	800240c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023d4:	897b      	ldrh	r3, [r7, #10]
 80023d6:	11db      	asrs	r3, r3, #7
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f003 0306 	and.w	r3, r3, #6
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f063 030f 	orn	r3, r3, #15
 80023e4:	b2da      	uxtb	r2, r3
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	490e      	ldr	r1, [pc, #56]	; (800242c <I2C_MasterRequestWrite+0xfc>)
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 f943 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e010      	b.n	8002424 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002402:	897b      	ldrh	r3, [r7, #10]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	4907      	ldr	r1, [pc, #28]	; (8002430 <I2C_MasterRequestWrite+0x100>)
 8002412:	68f8      	ldr	r0, [r7, #12]
 8002414:	f000 f933 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e000      	b.n	8002424 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	3718      	adds	r7, #24
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	00010008 	.word	0x00010008
 8002430:	00010002 	.word	0x00010002

08002434 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b088      	sub	sp, #32
 8002438:	af02      	add	r7, sp, #8
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	607a      	str	r2, [r7, #4]
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	460b      	mov	r3, r1
 8002442:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002448:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002458:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d006      	beq.n	800246e <I2C_MasterRequestRead+0x3a>
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d003      	beq.n	800246e <I2C_MasterRequestRead+0x3a>
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800246c:	d108      	bne.n	8002480 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	e00b      	b.n	8002498 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002484:	2b11      	cmp	r3, #17
 8002486:	d107      	bne.n	8002498 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002496:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2200      	movs	r2, #0
 80024a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 f893 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024be:	d103      	bne.n	80024c8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e079      	b.n	80025c0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80024d4:	d108      	bne.n	80024e8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024d6:	897b      	ldrh	r3, [r7, #10]
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f043 0301 	orr.w	r3, r3, #1
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	611a      	str	r2, [r3, #16]
 80024e6:	e05f      	b.n	80025a8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80024e8:	897b      	ldrh	r3, [r7, #10]
 80024ea:	11db      	asrs	r3, r3, #7
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	f003 0306 	and.w	r3, r3, #6
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	f063 030f 	orn	r3, r3, #15
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	4930      	ldr	r1, [pc, #192]	; (80025c8 <I2C_MasterRequestRead+0x194>)
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 f8b9 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e054      	b.n	80025c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002516:	897b      	ldrh	r3, [r7, #10]
 8002518:	b2da      	uxtb	r2, r3
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	4929      	ldr	r1, [pc, #164]	; (80025cc <I2C_MasterRequestRead+0x198>)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 f8a9 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e044      	b.n	80025c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800255a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2200      	movs	r2, #0
 8002564:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002568:	68f8      	ldr	r0, [r7, #12]
 800256a:	f000 f831 	bl	80025d0 <I2C_WaitOnFlagUntilTimeout>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00d      	beq.n	8002590 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002582:	d103      	bne.n	800258c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f44f 7200 	mov.w	r2, #512	; 0x200
 800258a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e017      	b.n	80025c0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002590:	897b      	ldrh	r3, [r7, #10]
 8002592:	11db      	asrs	r3, r3, #7
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0306 	and.w	r3, r3, #6
 800259a:	b2db      	uxtb	r3, r3
 800259c:	f063 030e 	orn	r3, r3, #14
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <I2C_MasterRequestRead+0x198>)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 f865 	bl	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	00010008 	.word	0x00010008
 80025cc:	00010002 	.word	0x00010002

080025d0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	603b      	str	r3, [r7, #0]
 80025dc:	4613      	mov	r3, r2
 80025de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025e0:	e025      	b.n	800262e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d021      	beq.n	800262e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025ea:	f7fe ff59 	bl	80014a0 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	1ad3      	subs	r3, r2, r3
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d302      	bcc.n	8002600 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d116      	bne.n	800262e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2220      	movs	r2, #32
 800260a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	f043 0220 	orr.w	r2, r3, #32
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e023      	b.n	8002676 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	0c1b      	lsrs	r3, r3, #16
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d10d      	bne.n	8002654 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	43da      	mvns	r2, r3
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	4013      	ands	r3, r2
 8002644:	b29b      	uxth	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf0c      	ite	eq
 800264a:	2301      	moveq	r3, #1
 800264c:	2300      	movne	r3, #0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	461a      	mov	r2, r3
 8002652:	e00c      	b.n	800266e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	43da      	mvns	r2, r3
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	4013      	ands	r3, r2
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	bf0c      	ite	eq
 8002666:	2301      	moveq	r3, #1
 8002668:	2300      	movne	r3, #0
 800266a:	b2db      	uxtb	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	429a      	cmp	r2, r3
 8002672:	d0b6      	beq.n	80025e2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	3710      	adds	r7, #16
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b084      	sub	sp, #16
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800268c:	e051      	b.n	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	d123      	bne.n	80026e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026b6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2200      	movs	r2, #0
 80026ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f043 0204 	orr.w	r2, r3, #4
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e046      	b.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026ec:	d021      	beq.n	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ee:	f7fe fed7 	bl	80014a0 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d302      	bcc.n	8002704 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d116      	bne.n	8002732 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2200      	movs	r2, #0
 8002708:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2220      	movs	r2, #32
 800270e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f043 0220 	orr.w	r2, r3, #32
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e020      	b.n	8002774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	0c1b      	lsrs	r3, r3, #16
 8002736:	b2db      	uxtb	r3, r3
 8002738:	2b01      	cmp	r3, #1
 800273a:	d10c      	bne.n	8002756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	43da      	mvns	r2, r3
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4013      	ands	r3, r2
 8002748:	b29b      	uxth	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf14      	ite	ne
 800274e:	2301      	movne	r3, #1
 8002750:	2300      	moveq	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e00b      	b.n	800276e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	43da      	mvns	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4013      	ands	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	2b00      	cmp	r3, #0
 8002770:	d18d      	bne.n	800268e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	4618      	mov	r0, r3
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	60f8      	str	r0, [r7, #12]
 8002784:	60b9      	str	r1, [r7, #8]
 8002786:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002788:	e02d      	b.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 f8ce 	bl	800292c <I2C_IsAcknowledgeFailed>
 8002790:	4603      	mov	r3, r0
 8002792:	2b00      	cmp	r3, #0
 8002794:	d001      	beq.n	800279a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e02d      	b.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d021      	beq.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a2:	f7fe fe7d 	bl	80014a0 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d302      	bcc.n	80027b8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d116      	bne.n	80027e6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f043 0220 	orr.w	r2, r3, #32
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e007      	b.n	80027f6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d1ca      	bne.n	800278a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3710      	adds	r7, #16
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027fe:	b580      	push	{r7, lr}
 8002800:	b084      	sub	sp, #16
 8002802:	af00      	add	r7, sp, #0
 8002804:	60f8      	str	r0, [r7, #12]
 8002806:	60b9      	str	r1, [r7, #8]
 8002808:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800280a:	e02d      	b.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f88d 	bl	800292c <I2C_IsAcknowledgeFailed>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e02d      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d021      	beq.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002824:	f7fe fe3c 	bl	80014a0 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d302      	bcc.n	800283a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d116      	bne.n	8002868 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e007      	b.n	8002878 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b04      	cmp	r3, #4
 8002874:	d1ca      	bne.n	800280c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800288c:	e042      	b.n	8002914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	695b      	ldr	r3, [r3, #20]
 8002894:	f003 0310 	and.w	r3, r3, #16
 8002898:	2b10      	cmp	r3, #16
 800289a:	d119      	bne.n	80028d0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f06f 0210 	mvn.w	r2, #16
 80028a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e029      	b.n	8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028d0:	f7fe fde6 	bl	80014a0 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	68ba      	ldr	r2, [r7, #8]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d302      	bcc.n	80028e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d116      	bne.n	8002914 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e007      	b.n	8002924 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291e:	2b40      	cmp	r3, #64	; 0x40
 8002920:	d1b5      	bne.n	800288e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002942:	d11b      	bne.n	800297c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800294c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2220      	movs	r2, #32
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr

0800298a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800298a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800298c:	b08f      	sub	sp, #60	; 0x3c
 800298e:	af0a      	add	r7, sp, #40	; 0x28
 8002990:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d101      	bne.n	800299c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e10f      	b.n	8002bbc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d106      	bne.n	80029bc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f005 f8ae 	bl	8007b18 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f002 f93b 	bl	8004c56 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	603b      	str	r3, [r7, #0]
 80029e6:	687e      	ldr	r6, [r7, #4]
 80029e8:	466d      	mov	r5, sp
 80029ea:	f106 0410 	add.w	r4, r6, #16
 80029ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029f6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029fa:	e885 0003 	stmia.w	r5, {r0, r1}
 80029fe:	1d33      	adds	r3, r6, #4
 8002a00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a02:	6838      	ldr	r0, [r7, #0]
 8002a04:	f002 f812 	bl	8004a2c <USB_CoreInit>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d005      	beq.n	8002a1a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2202      	movs	r2, #2
 8002a12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e0d0      	b.n	8002bbc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f002 f929 	bl	8004c78 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
 8002a2a:	e04a      	b.n	8002ac2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	1a9b      	subs	r3, r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	440b      	add	r3, r1
 8002a3a:	333d      	adds	r3, #61	; 0x3d
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	333c      	adds	r3, #60	; 0x3c
 8002a50:	7bfa      	ldrb	r2, [r7, #15]
 8002a52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	b298      	uxth	r0, r3
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	1a9b      	subs	r3, r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	440b      	add	r3, r1
 8002a66:	3342      	adds	r3, #66	; 0x42
 8002a68:	4602      	mov	r2, r0
 8002a6a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	333f      	adds	r3, #63	; 0x3f
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	3344      	adds	r3, #68	; 0x44
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	6879      	ldr	r1, [r7, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	1a9b      	subs	r3, r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	3348      	adds	r3, #72	; 0x48
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002aa8:	7bfa      	ldrb	r2, [r7, #15]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	00db      	lsls	r3, r3, #3
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	3350      	adds	r3, #80	; 0x50
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002abc:	7bfb      	ldrb	r3, [r7, #15]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d3af      	bcc.n	8002a2c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002acc:	2300      	movs	r3, #0
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	e044      	b.n	8002b5c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ad2:	7bfa      	ldrb	r2, [r7, #15]
 8002ad4:	6879      	ldr	r1, [r7, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	1a9b      	subs	r3, r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002afe:	7bfa      	ldrb	r2, [r7, #15]
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	1a9b      	subs	r3, r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b14:	7bfa      	ldrb	r2, [r7, #15]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b26:	2200      	movs	r2, #0
 8002b28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b2a:	7bfa      	ldrb	r2, [r7, #15]
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	1a9b      	subs	r3, r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b40:	7bfa      	ldrb	r2, [r7, #15]
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	4613      	mov	r3, r2
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	1a9b      	subs	r3, r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	73fb      	strb	r3, [r7, #15]
 8002b5c:	7bfa      	ldrb	r2, [r7, #15]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d3b5      	bcc.n	8002ad2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	603b      	str	r3, [r7, #0]
 8002b6c:	687e      	ldr	r6, [r7, #4]
 8002b6e:	466d      	mov	r5, sp
 8002b70:	f106 0410 	add.w	r4, r6, #16
 8002b74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b80:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b84:	1d33      	adds	r3, r6, #4
 8002b86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b88:	6838      	ldr	r0, [r7, #0]
 8002b8a:	f002 f89f 	bl	8004ccc <USB_DevInit>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2202      	movs	r2, #2
 8002b98:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e00d      	b.n	8002bbc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f003 f8e7 	bl	8005d88 <USB_DevDisconnect>

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bc4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_PCD_Start+0x1c>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e020      	b.n	8002c22 <HAL_PCD_Start+0x5e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d109      	bne.n	8002c04 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d005      	beq.n	8002c04 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f002 f813 	bl	8004c34 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 f897 	bl	8005d46 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002c2a:	b590      	push	{r4, r7, lr}
 8002c2c:	b08d      	sub	sp, #52	; 0x34
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c38:	6a3b      	ldr	r3, [r7, #32]
 8002c3a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f003 f955 	bl	8005ef0 <USB_GetMode>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f040 839d 	bne.w	8003388 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f003 f8b9 	bl	8005dca <USB_ReadInterrupts>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8393 	beq.w	8003386 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4618      	mov	r0, r3
 8002c66:	f003 f8b0 	bl	8005dca <USB_ReadInterrupts>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	f003 0302 	and.w	r3, r3, #2
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d107      	bne.n	8002c84 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695a      	ldr	r2, [r3, #20]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f002 0202 	and.w	r2, r2, #2
 8002c82:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 f89e 	bl	8005dca <USB_ReadInterrupts>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f003 0310 	and.w	r3, r3, #16
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d161      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0210 	bic.w	r2, r2, #16
 8002ca6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ca8:	6a3b      	ldr	r3, [r7, #32]
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	1a9b      	subs	r3, r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	0c5b      	lsrs	r3, r3, #17
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d124      	bne.n	8002d1e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002cda:	4013      	ands	r3, r2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d035      	beq.n	8002d4c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	091b      	lsrs	r3, r3, #4
 8002ce8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6a38      	ldr	r0, [r7, #32]
 8002cf4:	f002 ff04 	bl	8005b00 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	091b      	lsrs	r3, r3, #4
 8002d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d04:	441a      	add	r2, r3
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	699a      	ldr	r2, [r3, #24]
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	091b      	lsrs	r3, r3, #4
 8002d12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d16:	441a      	add	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	619a      	str	r2, [r3, #24]
 8002d1c:	e016      	b.n	8002d4c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	0c5b      	lsrs	r3, r3, #17
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	2b06      	cmp	r3, #6
 8002d28:	d110      	bne.n	8002d4c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d30:	2208      	movs	r2, #8
 8002d32:	4619      	mov	r1, r3
 8002d34:	6a38      	ldr	r0, [r7, #32]
 8002d36:	f002 fee3 	bl	8005b00 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	699a      	ldr	r2, [r3, #24]
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	091b      	lsrs	r3, r3, #4
 8002d42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d46:	441a      	add	r2, r3
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	699a      	ldr	r2, [r3, #24]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f042 0210 	orr.w	r2, r2, #16
 8002d5a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f003 f832 	bl	8005dca <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d6c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002d70:	d16e      	bne.n	8002e50 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002d72:	2300      	movs	r3, #0
 8002d74:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f003 f838 	bl	8005df0 <USB_ReadDevAllOutEpInterrupt>
 8002d80:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002d82:	e062      	b.n	8002e4a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d057      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f003 f85d 	bl	8005e58 <USB_ReadDevOutEPInterrupt>
 8002d9e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	461a      	mov	r2, r3
 8002db8:	2301      	movs	r3, #1
 8002dba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f000 fd98 	bl	80038f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00c      	beq.n	8002de8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd0:	015a      	lsls	r2, r3, #5
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dda:	461a      	mov	r2, r3
 8002ddc:	2308      	movs	r3, #8
 8002dde:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fe92 	bl	8003b0c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d008      	beq.n	8002e04 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	461a      	mov	r2, r3
 8002e00:	2310      	movs	r3, #16
 8002e02:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	f003 0320 	and.w	r3, r3, #32
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d008      	beq.n	8002e20 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	015a      	lsls	r2, r3, #5
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	2320      	movs	r3, #32
 8002e1e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	015a      	lsls	r2, r3, #5
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	4413      	add	r3, r2
 8002e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e36:	461a      	mov	r2, r3
 8002e38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e3c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	3301      	adds	r3, #1
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e46:	085b      	lsrs	r3, r3, #1
 8002e48:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d199      	bne.n	8002d84 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f002 ffb8 	bl	8005dca <USB_ReadInterrupts>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e60:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e64:	f040 80c0 	bne.w	8002fe8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f002 ffd9 	bl	8005e24 <USB_ReadDevAllInEpInterrupt>
 8002e72:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002e78:	e0b2      	b.n	8002fe0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a7 	beq.w	8002fd4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e8c:	b2d2      	uxtb	r2, r2
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f002 ffff 	bl	8005e94 <USB_ReadDevInEPInterrupt>
 8002e96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d057      	beq.n	8002f52 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69f9      	ldr	r1, [r7, #28]
 8002ebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec8:	015a      	lsls	r2, r3, #5
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	4413      	add	r3, r2
 8002ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d132      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee4:	4613      	mov	r3, r2
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	1a9b      	subs	r3, r3, r2
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	3348      	adds	r3, #72	; 0x48
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	4403      	add	r3, r0
 8002f00:	3344      	adds	r3, #68	; 0x44
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4419      	add	r1, r3
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4403      	add	r3, r0
 8002f14:	3348      	adds	r3, #72	; 0x48
 8002f16:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d113      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x31c>
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3350      	adds	r3, #80	; 0x50
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d108      	bne.n	8002f46 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2101      	movs	r1, #1
 8002f42:	f003 f807 	bl	8005f54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f004 fe64 	bl	8007c1a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	f003 0308 	and.w	r3, r3, #8
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	015a      	lsls	r2, r3, #5
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	4413      	add	r3, r2
 8002f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2308      	movs	r3, #8
 8002f6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	f003 0310 	and.w	r3, r3, #16
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f84:	461a      	mov	r2, r3
 8002f86:	2310      	movs	r3, #16
 8002f88:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d008      	beq.n	8002fa6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	015a      	lsls	r2, r3, #5
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	2340      	movs	r3, #64	; 0x40
 8002fa4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	f003 0302 	and.w	r3, r3, #2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002fcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f000 fc03 	bl	80037da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fdc:	085b      	lsrs	r3, r3, #1
 8002fde:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f47f af49 	bne.w	8002e7a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 feec 	bl	8005dca <USB_ReadInterrupts>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ffc:	d122      	bne.n	8003044 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	69fa      	ldr	r2, [r7, #28]
 8003008:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003018:	2b01      	cmp	r3, #1
 800301a:	d108      	bne.n	800302e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003024:	2100      	movs	r1, #0
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fe0e 	bl	8003c48 <HAL_PCDEx_LPM_Callback>
 800302c:	e002      	b.n	8003034 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f004 fe60 	bl	8007cf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003042:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f002 febe 	bl	8005dca <USB_ReadInterrupts>
 800304e:	4603      	mov	r3, r0
 8003050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003058:	d112      	bne.n	8003080 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b01      	cmp	r3, #1
 8003068:	d102      	bne.n	8003070 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f004 fe1c 	bl	8007ca8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800307e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fea0 	bl	8005dca <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003090:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003094:	f040 80c7 	bne.w	8003226 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030a6:	f023 0301 	bic.w	r3, r3, #1
 80030aa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2110      	movs	r1, #16
 80030b2:	4618      	mov	r0, r3
 80030b4:	f001 ff6e 	bl	8004f94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030bc:	e056      	b.n	800316c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80030be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ca:	461a      	mov	r2, r3
 80030cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030d0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80030d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e2:	0151      	lsls	r1, r2, #5
 80030e4:	69fa      	ldr	r2, [r7, #28]
 80030e6:	440a      	add	r2, r1
 80030e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030ec:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030f0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80030f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003102:	0151      	lsls	r1, r2, #5
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	440a      	add	r2, r1
 8003108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800310c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003110:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003114:	015a      	lsls	r2, r3, #5
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	4413      	add	r3, r2
 800311a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800311e:	461a      	mov	r2, r3
 8003120:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003124:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	015a      	lsls	r2, r3, #5
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	4413      	add	r3, r2
 800312e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003136:	0151      	lsls	r1, r2, #5
 8003138:	69fa      	ldr	r2, [r7, #28]
 800313a:	440a      	add	r2, r1
 800313c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003140:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003144:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003156:	0151      	lsls	r1, r2, #5
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	440a      	add	r2, r1
 800315c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003160:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003164:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	3301      	adds	r3, #1
 800316a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003172:	429a      	cmp	r2, r3
 8003174:	d3a3      	bcc.n	80030be <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003184:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003188:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	2b00      	cmp	r3, #0
 8003190:	d016      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	69fa      	ldr	r2, [r7, #28]
 800319e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031a2:	f043 030b 	orr.w	r3, r3, #11
 80031a6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b2:	69fa      	ldr	r2, [r7, #28]
 80031b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b8:	f043 030b 	orr.w	r3, r3, #11
 80031bc:	6453      	str	r3, [r2, #68]	; 0x44
 80031be:	e015      	b.n	80031ec <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c6:	695b      	ldr	r3, [r3, #20]
 80031c8:	69fa      	ldr	r2, [r7, #28]
 80031ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031ce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80031d2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80031d6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	69fa      	ldr	r2, [r7, #28]
 80031e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031e6:	f043 030b 	orr.w	r3, r3, #11
 80031ea:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80031fe:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6818      	ldr	r0, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003210:	461a      	mov	r2, r3
 8003212:	f002 fe9f 	bl	8005f54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695a      	ldr	r2, [r3, #20]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003224:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f002 fdcd 	bl	8005dca <USB_ReadInterrupts>
 8003230:	4603      	mov	r3, r0
 8003232:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800323a:	d124      	bne.n	8003286 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f002 fe63 	bl	8005f0c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f001 ff03 	bl	8005056 <USB_GetDevSpeed>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681c      	ldr	r4, [r3, #0]
 800325c:	f001 f914 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 8003260:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003266:	b2db      	uxtb	r3, r3
 8003268:	461a      	mov	r2, r3
 800326a:	4620      	mov	r0, r4
 800326c:	f001 fc40 	bl	8004af0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f004 fcfa 	bl	8007c6a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	695a      	ldr	r2, [r3, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003284:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f002 fd9d 	bl	8005dca <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b08      	cmp	r3, #8
 8003298:	d10a      	bne.n	80032b0 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f004 fcd7 	bl	8007c4e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f002 0208 	and.w	r2, r2, #8
 80032ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 fd88 	bl	8005dca <USB_ReadInterrupts>
 80032ba:	4603      	mov	r3, r0
 80032bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c4:	d10f      	bne.n	80032e6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	4619      	mov	r1, r3
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f004 fd2f 	bl	8007d34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	695a      	ldr	r2, [r3, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f002 fd6d 	bl	8005dca <USB_ReadInterrupts>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032fa:	d10f      	bne.n	800331c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003302:	b2db      	uxtb	r3, r3
 8003304:	4619      	mov	r1, r3
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f004 fd02 	bl	8007d10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800331a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f002 fd52 	bl	8005dca <USB_ReadInterrupts>
 8003326:	4603      	mov	r3, r0
 8003328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800332c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003330:	d10a      	bne.n	8003348 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f004 fd10 	bl	8007d58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	695a      	ldr	r2, [r3, #20]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003346:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f002 fd3c 	bl	8005dca <USB_ReadInterrupts>
 8003352:	4603      	mov	r3, r0
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	2b04      	cmp	r3, #4
 800335a:	d115      	bne.n	8003388 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	f003 0304 	and.w	r3, r3, #4
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f004 fd00 	bl	8007d74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6859      	ldr	r1, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	430a      	orrs	r2, r1
 8003382:	605a      	str	r2, [r3, #4]
 8003384:	e000      	b.n	8003388 <HAL_PCD_IRQHandler+0x75e>
      return;
 8003386:	bf00      	nop
    }
  }
}
 8003388:	3734      	adds	r7, #52	; 0x34
 800338a:	46bd      	mov	sp, r7
 800338c:	bd90      	pop	{r4, r7, pc}

0800338e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800338e:	b580      	push	{r7, lr}
 8003390:	b082      	sub	sp, #8
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	460b      	mov	r3, r1
 8003398:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d101      	bne.n	80033a8 <HAL_PCD_SetAddress+0x1a>
 80033a4:	2302      	movs	r3, #2
 80033a6:	e013      	b.n	80033d0 <HAL_PCD_SetAddress+0x42>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	78fa      	ldrb	r2, [r7, #3]
 80033be:	4611      	mov	r1, r2
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 fc9a 	bl	8005cfa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3708      	adds	r7, #8
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	4608      	mov	r0, r1
 80033e2:	4611      	mov	r1, r2
 80033e4:	461a      	mov	r2, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	70fb      	strb	r3, [r7, #3]
 80033ea:	460b      	mov	r3, r1
 80033ec:	803b      	strh	r3, [r7, #0]
 80033ee:	4613      	mov	r3, r2
 80033f0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80033f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	da0f      	bge.n	800341e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033fe:	78fb      	ldrb	r3, [r7, #3]
 8003400:	f003 020f 	and.w	r2, r3, #15
 8003404:	4613      	mov	r3, r2
 8003406:	00db      	lsls	r3, r3, #3
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	3338      	adds	r3, #56	; 0x38
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2201      	movs	r2, #1
 800341a:	705a      	strb	r2, [r3, #1]
 800341c:	e00f      	b.n	800343e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800341e:	78fb      	ldrb	r3, [r7, #3]
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	4413      	add	r3, r2
 8003434:	3304      	adds	r3, #4
 8003436:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800343e:	78fb      	ldrb	r3, [r7, #3]
 8003440:	f003 030f 	and.w	r3, r3, #15
 8003444:	b2da      	uxtb	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800344a:	883a      	ldrh	r2, [r7, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	78ba      	ldrb	r2, [r7, #2]
 8003454:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	785b      	ldrb	r3, [r3, #1]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003468:	78bb      	ldrb	r3, [r7, #2]
 800346a:	2b02      	cmp	r3, #2
 800346c:	d102      	bne.n	8003474 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_PCD_EP_Open+0xaa>
 800347e:	2302      	movs	r3, #2
 8003480:	e00e      	b.n	80034a0 <HAL_PCD_EP_Open+0xc8>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fe05 	bl	80050a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800349e:	7afb      	ldrb	r3, [r7, #11]
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	da0f      	bge.n	80034dc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034bc:	78fb      	ldrb	r3, [r7, #3]
 80034be:	f003 020f 	and.w	r2, r3, #15
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	3338      	adds	r3, #56	; 0x38
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	3304      	adds	r3, #4
 80034d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2201      	movs	r2, #1
 80034d8:	705a      	strb	r2, [r3, #1]
 80034da:	e00f      	b.n	80034fc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034dc:	78fb      	ldrb	r3, [r7, #3]
 80034de:	f003 020f 	and.w	r2, r3, #15
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	3304      	adds	r3, #4
 80034f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	b2da      	uxtb	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_PCD_EP_Close+0x6e>
 8003512:	2302      	movs	r3, #2
 8003514:	e00e      	b.n	8003534 <HAL_PCD_EP_Close+0x8c>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68f9      	ldr	r1, [r7, #12]
 8003524:	4618      	mov	r0, r3
 8003526:	f001 fe43 	bl	80051b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	607a      	str	r2, [r7, #4]
 8003546:	603b      	str	r3, [r7, #0]
 8003548:	460b      	mov	r3, r1
 800354a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800354c:	7afb      	ldrb	r3, [r7, #11]
 800354e:	f003 020f 	and.w	r2, r3, #15
 8003552:	4613      	mov	r3, r2
 8003554:	00db      	lsls	r3, r3, #3
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	3304      	adds	r3, #4
 8003564:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800357e:	7afb      	ldrb	r3, [r7, #11]
 8003580:	f003 030f 	and.w	r3, r3, #15
 8003584:	b2da      	uxtb	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d102      	bne.n	8003598 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003598:	7afb      	ldrb	r3, [r7, #11]
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d109      	bne.n	80035b6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	6979      	ldr	r1, [r7, #20]
 80035b0:	f002 f91e 	bl	80057f0 <USB_EP0StartXfer>
 80035b4:	e008      	b.n	80035c8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	461a      	mov	r2, r3
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	f001 fed0 	bl	8005368 <USB_EPStartXfer>
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
 80035de:	460b      	mov	r3, r1
 80035e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e2:	7afb      	ldrb	r3, [r7, #11]
 80035e4:	f003 020f 	and.w	r2, r3, #15
 80035e8:	4613      	mov	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	3338      	adds	r3, #56	; 0x38
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4413      	add	r3, r2
 80035f6:	3304      	adds	r3, #4
 80035f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	687a      	ldr	r2, [r7, #4]
 80035fe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	2200      	movs	r2, #0
 800360a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2201      	movs	r2, #1
 8003610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003612:	7afb      	ldrb	r3, [r7, #11]
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	b2da      	uxtb	r2, r3
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003626:	687a      	ldr	r2, [r7, #4]
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800362c:	7afb      	ldrb	r3, [r7, #11]
 800362e:	f003 030f 	and.w	r3, r3, #15
 8003632:	2b00      	cmp	r3, #0
 8003634:	d109      	bne.n	800364a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	6818      	ldr	r0, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	6979      	ldr	r1, [r7, #20]
 8003644:	f002 f8d4 	bl	80057f0 <USB_EP0StartXfer>
 8003648:	e008      	b.n	800365c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6818      	ldr	r0, [r3, #0]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	6979      	ldr	r1, [r7, #20]
 8003658:	f001 fe86 	bl	8005368 <USB_EPStartXfer>
  }

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3718      	adds	r7, #24
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
 800366e:	460b      	mov	r3, r1
 8003670:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003672:	78fb      	ldrb	r3, [r7, #3]
 8003674:	f003 020f 	and.w	r2, r3, #15
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	429a      	cmp	r2, r3
 800367e:	d901      	bls.n	8003684 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e050      	b.n	8003726 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003684:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003688:	2b00      	cmp	r3, #0
 800368a:	da0f      	bge.n	80036ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800368c:	78fb      	ldrb	r3, [r7, #3]
 800368e:	f003 020f 	and.w	r2, r3, #15
 8003692:	4613      	mov	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	3338      	adds	r3, #56	; 0x38
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	4413      	add	r3, r2
 80036a0:	3304      	adds	r3, #4
 80036a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	705a      	strb	r2, [r3, #1]
 80036aa:	e00d      	b.n	80036c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036ac:	78fa      	ldrb	r2, [r7, #3]
 80036ae:	4613      	mov	r3, r2
 80036b0:	00db      	lsls	r3, r3, #3
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	3304      	adds	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2201      	movs	r2, #1
 80036cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d101      	bne.n	80036e8 <HAL_PCD_EP_SetStall+0x82>
 80036e4:	2302      	movs	r3, #2
 80036e6:	e01e      	b.n	8003726 <HAL_PCD_EP_SetStall+0xc0>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68f9      	ldr	r1, [r7, #12]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f002 fa2b 	bl	8005b52 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	2b00      	cmp	r3, #0
 8003704:	d10a      	bne.n	800371c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	b2d9      	uxtb	r1, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003716:	461a      	mov	r2, r3
 8003718:	f002 fc1c 	bl	8005f54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800372e:	b580      	push	{r7, lr}
 8003730:	b084      	sub	sp, #16
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
 8003736:	460b      	mov	r3, r1
 8003738:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800373a:	78fb      	ldrb	r3, [r7, #3]
 800373c:	f003 020f 	and.w	r2, r3, #15
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	d901      	bls.n	800374c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e042      	b.n	80037d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800374c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003750:	2b00      	cmp	r3, #0
 8003752:	da0f      	bge.n	8003774 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003754:	78fb      	ldrb	r3, [r7, #3]
 8003756:	f003 020f 	and.w	r2, r3, #15
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	3338      	adds	r3, #56	; 0x38
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2201      	movs	r2, #1
 8003770:	705a      	strb	r2, [r3, #1]
 8003772:	e00f      	b.n	8003794 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003774:	78fb      	ldrb	r3, [r7, #3]
 8003776:	f003 020f 	and.w	r2, r3, #15
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	1a9b      	subs	r3, r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003786:	687a      	ldr	r2, [r7, #4]
 8003788:	4413      	add	r3, r2
 800378a:	3304      	adds	r3, #4
 800378c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800379a:	78fb      	ldrb	r3, [r7, #3]
 800379c:	f003 030f 	and.w	r3, r3, #15
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d101      	bne.n	80037b4 <HAL_PCD_EP_ClrStall+0x86>
 80037b0:	2302      	movs	r3, #2
 80037b2:	e00e      	b.n	80037d2 <HAL_PCD_EP_ClrStall+0xa4>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68f9      	ldr	r1, [r7, #12]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f002 fa33 	bl	8005c2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b08a      	sub	sp, #40	; 0x28
 80037de:	af02      	add	r7, sp, #8
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	3338      	adds	r3, #56	; 0x38
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	4413      	add	r3, r2
 80037fe:	3304      	adds	r3, #4
 8003800:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	699a      	ldr	r2, [r3, #24]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	429a      	cmp	r2, r3
 800380c:	d901      	bls.n	8003812 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e06c      	b.n	80038ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	69fa      	ldr	r2, [r7, #28]
 8003824:	429a      	cmp	r2, r3
 8003826:	d902      	bls.n	800382e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3303      	adds	r3, #3
 8003832:	089b      	lsrs	r3, r3, #2
 8003834:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003836:	e02b      	b.n	8003890 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	695a      	ldr	r2, [r3, #20]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	429a      	cmp	r2, r3
 800384c:	d902      	bls.n	8003854 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	3303      	adds	r3, #3
 8003858:	089b      	lsrs	r3, r3, #2
 800385a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	68d9      	ldr	r1, [r3, #12]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2da      	uxtb	r2, r3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800386c:	b2db      	uxtb	r3, r3
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4603      	mov	r3, r0
 8003872:	6978      	ldr	r0, [r7, #20]
 8003874:	f002 f90f 	bl	8005a96 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	441a      	add	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	441a      	add	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	b29b      	uxth	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d809      	bhi.n	80038ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	699a      	ldr	r2, [r3, #24]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d203      	bcs.n	80038ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1be      	bne.n	8003838 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d811      	bhi.n	80038ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	2201      	movs	r2, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	43db      	mvns	r3, r3
 80038e0:	6939      	ldr	r1, [r7, #16]
 80038e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038e6:	4013      	ands	r3, r2
 80038e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	333c      	adds	r3, #60	; 0x3c
 800390c:	3304      	adds	r3, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b01      	cmp	r3, #1
 8003928:	f040 80a0 	bne.w	8003a6c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	f003 0308 	and.w	r3, r3, #8
 8003932:	2b00      	cmp	r3, #0
 8003934:	d015      	beq.n	8003962 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4a72      	ldr	r2, [pc, #456]	; (8003b04 <PCD_EP_OutXfrComplete_int+0x210>)
 800393a:	4293      	cmp	r3, r2
 800393c:	f240 80dd 	bls.w	8003afa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 80d7 	beq.w	8003afa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395e:	6093      	str	r3, [r2, #8]
 8003960:	e0cb      	b.n	8003afa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 0320 	and.w	r3, r3, #32
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	461a      	mov	r2, r3
 800397a:	2320      	movs	r3, #32
 800397c:	6093      	str	r3, [r2, #8]
 800397e:	e0bc      	b.n	8003afa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003986:	2b00      	cmp	r3, #0
 8003988:	f040 80b7 	bne.w	8003afa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <PCD_EP_OutXfrComplete_int+0x210>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d90f      	bls.n	80039b4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039aa:	461a      	mov	r2, r3
 80039ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039b0:	6093      	str	r3, [r2, #8]
 80039b2:	e0a2      	b.n	8003afa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	683a      	ldr	r2, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80039c6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	0159      	lsls	r1, r3, #5
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	440b      	add	r3, r1
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80039da:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4403      	add	r3, r0
 80039ea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80039ee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	1a9b      	subs	r3, r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	440b      	add	r3, r1
 80039fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	1a9b      	subs	r3, r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4403      	add	r3, r0
 8003a12:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4419      	add	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	1a9b      	subs	r3, r3, r2
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4403      	add	r3, r0
 8003a28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a2c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d114      	bne.n	8003a5e <PCD_EP_OutXfrComplete_int+0x16a>
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	683a      	ldr	r2, [r7, #0]
 8003a38:	4613      	mov	r3, r2
 8003a3a:	00db      	lsls	r3, r3, #3
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	440b      	add	r3, r1
 8003a42:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d108      	bne.n	8003a5e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6818      	ldr	r0, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003a56:	461a      	mov	r2, r3
 8003a58:	2101      	movs	r1, #1
 8003a5a:	f002 fa7b 	bl	8005f54 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	4619      	mov	r1, r3
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f004 f8bd 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
 8003a6a:	e046      	b.n	8003afa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4a26      	ldr	r2, [pc, #152]	; (8003b08 <PCD_EP_OutXfrComplete_int+0x214>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d124      	bne.n	8003abe <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a90:	6093      	str	r3, [r2, #8]
 8003a92:	e032      	b.n	8003afa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0320 	and.w	r3, r3, #32
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d008      	beq.n	8003ab0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aaa:	461a      	mov	r2, r3
 8003aac:	2320      	movs	r3, #32
 8003aae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f004 f894 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
 8003abc:	e01d      	b.n	8003afa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d114      	bne.n	8003aee <PCD_EP_OutXfrComplete_int+0x1fa>
 8003ac4:	6879      	ldr	r1, [r7, #4]
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	1a9b      	subs	r3, r3, r2
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	440b      	add	r3, r1
 8003ad2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d108      	bne.n	8003aee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6818      	ldr	r0, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2100      	movs	r1, #0
 8003aea:	f002 fa33 	bl	8005f54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f004 f875 	bl	8007be4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003afa:	2300      	movs	r3, #0
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3718      	adds	r7, #24
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	4f54300a 	.word	0x4f54300a
 8003b08:	4f54310a 	.word	0x4f54310a

08003b0c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	333c      	adds	r3, #60	; 0x3c
 8003b24:	3304      	adds	r3, #4
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a15      	ldr	r2, [pc, #84]	; (8003b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d90e      	bls.n	8003b60 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d009      	beq.n	8003b60 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	461a      	mov	r2, r3
 8003b5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b5e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f004 f82d 	bl	8007bc0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d90c      	bls.n	8003b88 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d108      	bne.n	8003b88 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6818      	ldr	r0, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b80:	461a      	mov	r2, r3
 8003b82:	2101      	movs	r1, #1
 8003b84:	f002 f9e6 	bl	8005f54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	4f54300a 	.word	0x4f54300a

08003b98 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	70fb      	strb	r3, [r7, #3]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bb0:	78fb      	ldrb	r3, [r7, #3]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d107      	bne.n	8003bc6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bb6:	883b      	ldrh	r3, [r7, #0]
 8003bb8:	0419      	lsls	r1, r3, #16
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bc4:	e028      	b.n	8003c18 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	73fb      	strb	r3, [r7, #15]
 8003bd8:	e00d      	b.n	8003bf6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	7bfb      	ldrb	r3, [r7, #15]
 8003be0:	3340      	adds	r3, #64	; 0x40
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4413      	add	r3, r2
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4413      	add	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bf0:	7bfb      	ldrb	r3, [r7, #15]
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	7bfa      	ldrb	r2, [r7, #15]
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3ec      	bcc.n	8003bda <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c00:	883b      	ldrh	r3, [r7, #0]
 8003c02:	0418      	lsls	r0, r3, #16
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6819      	ldr	r1, [r3, #0]
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	4302      	orrs	r2, r0
 8003c10:	3340      	adds	r3, #64	; 0x40
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	460b      	mov	r3, r1
 8003c30:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	887a      	ldrh	r2, [r7, #2]
 8003c38:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	460b      	mov	r3, r1
 8003c52:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b086      	sub	sp, #24
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d101      	bne.n	8003c72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e264      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d075      	beq.n	8003d6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c7e:	4ba3      	ldr	r3, [pc, #652]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 030c 	and.w	r3, r3, #12
 8003c86:	2b04      	cmp	r3, #4
 8003c88:	d00c      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c8a:	4ba0      	ldr	r3, [pc, #640]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c92:	2b08      	cmp	r3, #8
 8003c94:	d112      	bne.n	8003cbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c96:	4b9d      	ldr	r3, [pc, #628]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ca2:	d10b      	bne.n	8003cbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ca4:	4b99      	ldr	r3, [pc, #612]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d05b      	beq.n	8003d68 <HAL_RCC_OscConfig+0x108>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d157      	bne.n	8003d68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e23f      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x74>
 8003cc6:	4b91      	ldr	r3, [pc, #580]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a90      	ldr	r2, [pc, #576]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	e01d      	b.n	8003d10 <HAL_RCC_OscConfig+0xb0>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cdc:	d10c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x98>
 8003cde:	4b8b      	ldr	r3, [pc, #556]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a8a      	ldr	r2, [pc, #552]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	4b88      	ldr	r3, [pc, #544]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a87      	ldr	r2, [pc, #540]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf4:	6013      	str	r3, [r2, #0]
 8003cf6:	e00b      	b.n	8003d10 <HAL_RCC_OscConfig+0xb0>
 8003cf8:	4b84      	ldr	r3, [pc, #528]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a83      	ldr	r2, [pc, #524]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003cfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d02:	6013      	str	r3, [r2, #0]
 8003d04:	4b81      	ldr	r3, [pc, #516]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a80      	ldr	r2, [pc, #512]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d013      	beq.n	8003d40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd fbc2 	bl	80014a0 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fd fbbe 	bl	80014a0 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e204      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d32:	4b76      	ldr	r3, [pc, #472]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0xc0>
 8003d3e:	e014      	b.n	8003d6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fd fbae 	bl	80014a0 <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d46:	e008      	b.n	8003d5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d48:	f7fd fbaa 	bl	80014a0 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	2b64      	cmp	r3, #100	; 0x64
 8003d54:	d901      	bls.n	8003d5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e1f0      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d5a:	4b6c      	ldr	r3, [pc, #432]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1f0      	bne.n	8003d48 <HAL_RCC_OscConfig+0xe8>
 8003d66:	e000      	b.n	8003d6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0302 	and.w	r3, r3, #2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d063      	beq.n	8003e3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d76:	4b65      	ldr	r3, [pc, #404]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 030c 	and.w	r3, r3, #12
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00b      	beq.n	8003d9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d82:	4b62      	ldr	r3, [pc, #392]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d11c      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d8e:	4b5f      	ldr	r3, [pc, #380]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d116      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9a:	4b5c      	ldr	r3, [pc, #368]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d005      	beq.n	8003db2 <HAL_RCC_OscConfig+0x152>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d001      	beq.n	8003db2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e1c4      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b56      	ldr	r3, [pc, #344]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4952      	ldr	r1, [pc, #328]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dc6:	e03a      	b.n	8003e3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d020      	beq.n	8003e12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd0:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <HAL_RCC_OscConfig+0x2b0>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd6:	f7fd fb63 	bl	80014a0 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dde:	f7fd fb5f 	bl	80014a0 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e1a5      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df0:	4b46      	ldr	r3, [pc, #280]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfc:	4b43      	ldr	r3, [pc, #268]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	00db      	lsls	r3, r3, #3
 8003e0a:	4940      	ldr	r1, [pc, #256]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	600b      	str	r3, [r1, #0]
 8003e10:	e015      	b.n	8003e3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e12:	4b3f      	ldr	r3, [pc, #252]	; (8003f10 <HAL_RCC_OscConfig+0x2b0>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e18:	f7fd fb42 	bl	80014a0 <HAL_GetTick>
 8003e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e1e:	e008      	b.n	8003e32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e20:	f7fd fb3e 	bl	80014a0 <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1ad3      	subs	r3, r2, r3
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e184      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e32:	4b36      	ldr	r3, [pc, #216]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d1f0      	bne.n	8003e20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d030      	beq.n	8003eac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d016      	beq.n	8003e80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e52:	4b30      	ldr	r3, [pc, #192]	; (8003f14 <HAL_RCC_OscConfig+0x2b4>)
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e58:	f7fd fb22 	bl	80014a0 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e60:	f7fd fb1e 	bl	80014a0 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e164      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e72:	4b26      	ldr	r3, [pc, #152]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003e74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0x200>
 8003e7e:	e015      	b.n	8003eac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e80:	4b24      	ldr	r3, [pc, #144]	; (8003f14 <HAL_RCC_OscConfig+0x2b4>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e86:	f7fd fb0b 	bl	80014a0 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e8e:	f7fd fb07 	bl	80014a0 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e14d      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea0:	4b1a      	ldr	r3, [pc, #104]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 80a0 	beq.w	8003ffa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ebe:	4b13      	ldr	r3, [pc, #76]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10f      	bne.n	8003eea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
 8003ece:	4b0f      	ldr	r3, [pc, #60]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed2:	4a0e      	ldr	r2, [pc, #56]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <HAL_RCC_OscConfig+0x2ac>)
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003eea:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <HAL_RCC_OscConfig+0x2b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d121      	bne.n	8003f3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef6:	4b08      	ldr	r3, [pc, #32]	; (8003f18 <HAL_RCC_OscConfig+0x2b8>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <HAL_RCC_OscConfig+0x2b8>)
 8003efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f02:	f7fd facd 	bl	80014a0 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f08:	e011      	b.n	8003f2e <HAL_RCC_OscConfig+0x2ce>
 8003f0a:	bf00      	nop
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	42470000 	.word	0x42470000
 8003f14:	42470e80 	.word	0x42470e80
 8003f18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1c:	f7fd fac0 	bl	80014a0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e106      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f2e:	4b85      	ldr	r3, [pc, #532]	; (8004144 <HAL_RCC_OscConfig+0x4e4>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d106      	bne.n	8003f50 <HAL_RCC_OscConfig+0x2f0>
 8003f42:	4b81      	ldr	r3, [pc, #516]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a80      	ldr	r2, [pc, #512]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f48:	f043 0301 	orr.w	r3, r3, #1
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	e01c      	b.n	8003f8a <HAL_RCC_OscConfig+0x32a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b05      	cmp	r3, #5
 8003f56:	d10c      	bne.n	8003f72 <HAL_RCC_OscConfig+0x312>
 8003f58:	4b7b      	ldr	r3, [pc, #492]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4a7a      	ldr	r2, [pc, #488]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f5e:	f043 0304 	orr.w	r3, r3, #4
 8003f62:	6713      	str	r3, [r2, #112]	; 0x70
 8003f64:	4b78      	ldr	r3, [pc, #480]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f68:	4a77      	ldr	r2, [pc, #476]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f6a:	f043 0301 	orr.w	r3, r3, #1
 8003f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003f70:	e00b      	b.n	8003f8a <HAL_RCC_OscConfig+0x32a>
 8003f72:	4b75      	ldr	r3, [pc, #468]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f76:	4a74      	ldr	r2, [pc, #464]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f78:	f023 0301 	bic.w	r3, r3, #1
 8003f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f7e:	4b72      	ldr	r3, [pc, #456]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	4a71      	ldr	r2, [pc, #452]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003f84:	f023 0304 	bic.w	r3, r3, #4
 8003f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d015      	beq.n	8003fbe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f92:	f7fd fa85 	bl	80014a0 <HAL_GetTick>
 8003f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f98:	e00a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f9a:	f7fd fa81 	bl	80014a0 <HAL_GetTick>
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1ad3      	subs	r3, r2, r3
 8003fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e0c5      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fb0:	4b65      	ldr	r3, [pc, #404]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0ee      	beq.n	8003f9a <HAL_RCC_OscConfig+0x33a>
 8003fbc:	e014      	b.n	8003fe8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fbe:	f7fd fa6f 	bl	80014a0 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc4:	e00a      	b.n	8003fdc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fc6:	f7fd fa6b 	bl	80014a0 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e0af      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fdc:	4b5a      	ldr	r3, [pc, #360]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1ee      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7dfb      	ldrb	r3, [r7, #23]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4b56      	ldr	r3, [pc, #344]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff2:	4a55      	ldr	r2, [pc, #340]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	f000 809b 	beq.w	800413a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004004:	4b50      	ldr	r3, [pc, #320]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f003 030c 	and.w	r3, r3, #12
 800400c:	2b08      	cmp	r3, #8
 800400e:	d05c      	beq.n	80040ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b02      	cmp	r3, #2
 8004016:	d141      	bne.n	800409c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004018:	4b4c      	ldr	r3, [pc, #304]	; (800414c <HAL_RCC_OscConfig+0x4ec>)
 800401a:	2200      	movs	r2, #0
 800401c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800401e:	f7fd fa3f 	bl	80014a0 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004024:	e008      	b.n	8004038 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004026:	f7fd fa3b 	bl	80014a0 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	2b02      	cmp	r3, #2
 8004032:	d901      	bls.n	8004038 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e081      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004038:	4b43      	ldr	r3, [pc, #268]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d1f0      	bne.n	8004026 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	69da      	ldr	r2, [r3, #28]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	431a      	orrs	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	019b      	lsls	r3, r3, #6
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800405a:	085b      	lsrs	r3, r3, #1
 800405c:	3b01      	subs	r3, #1
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	061b      	lsls	r3, r3, #24
 8004068:	4937      	ldr	r1, [pc, #220]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 800406a:	4313      	orrs	r3, r2
 800406c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800406e:	4b37      	ldr	r3, [pc, #220]	; (800414c <HAL_RCC_OscConfig+0x4ec>)
 8004070:	2201      	movs	r2, #1
 8004072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004074:	f7fd fa14 	bl	80014a0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407a:	e008      	b.n	800408e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800407c:	f7fd fa10 	bl	80014a0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	2b02      	cmp	r3, #2
 8004088:	d901      	bls.n	800408e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e056      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800408e:	4b2e      	ldr	r3, [pc, #184]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004096:	2b00      	cmp	r3, #0
 8004098:	d0f0      	beq.n	800407c <HAL_RCC_OscConfig+0x41c>
 800409a:	e04e      	b.n	800413a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800409c:	4b2b      	ldr	r3, [pc, #172]	; (800414c <HAL_RCC_OscConfig+0x4ec>)
 800409e:	2200      	movs	r2, #0
 80040a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a2:	f7fd f9fd 	bl	80014a0 <HAL_GetTick>
 80040a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a8:	e008      	b.n	80040bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040aa:	f7fd f9f9 	bl	80014a0 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d901      	bls.n	80040bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80040b8:	2303      	movs	r3, #3
 80040ba:	e03f      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040bc:	4b22      	ldr	r3, [pc, #136]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1f0      	bne.n	80040aa <HAL_RCC_OscConfig+0x44a>
 80040c8:	e037      	b.n	800413a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e032      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040d6:	4b1c      	ldr	r3, [pc, #112]	; (8004148 <HAL_RCC_OscConfig+0x4e8>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699b      	ldr	r3, [r3, #24]
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d028      	beq.n	8004136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d121      	bne.n	8004136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d11a      	bne.n	8004136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004106:	4013      	ands	r3, r2
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800410c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410e:	4293      	cmp	r3, r2
 8004110:	d111      	bne.n	8004136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	3b01      	subs	r3, #1
 8004120:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004122:	429a      	cmp	r2, r3
 8004124:	d107      	bne.n	8004136 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40007000 	.word	0x40007000
 8004148:	40023800 	.word	0x40023800
 800414c:	42470060 	.word	0x42470060

08004150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b084      	sub	sp, #16
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e0cc      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b68      	ldr	r3, [pc, #416]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d90c      	bls.n	800418c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	b2d2      	uxtb	r2, r2
 8004178:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800417a:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	429a      	cmp	r2, r3
 8004186:	d001      	beq.n	800418c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e0b8      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0302 	and.w	r3, r3, #2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d020      	beq.n	80041da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d005      	beq.n	80041b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041a4:	4b59      	ldr	r3, [pc, #356]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a58      	ldr	r2, [pc, #352]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80041ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d005      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041bc:	4b53      	ldr	r3, [pc, #332]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	4a52      	ldr	r2, [pc, #328]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80041c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041c8:	4b50      	ldr	r3, [pc, #320]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	494d      	ldr	r1, [pc, #308]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	4313      	orrs	r3, r2
 80041d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d044      	beq.n	8004270 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d107      	bne.n	80041fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ee:	4b47      	ldr	r3, [pc, #284]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d119      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e07f      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d003      	beq.n	800420e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800420a:	2b03      	cmp	r3, #3
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800420e:	4b3f      	ldr	r3, [pc, #252]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e06f      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800421e:	4b3b      	ldr	r3, [pc, #236]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0302 	and.w	r3, r3, #2
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e067      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b37      	ldr	r3, [pc, #220]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4934      	ldr	r1, [pc, #208]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004240:	f7fd f92e 	bl	80014a0 <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7fd f92a 	bl	80014a0 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	; 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e04f      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b2b      	ldr	r3, [pc, #172]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004270:	4b25      	ldr	r3, [pc, #148]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0307 	and.w	r3, r3, #7
 8004278:	683a      	ldr	r2, [r7, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d20c      	bcs.n	8004298 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800427e:	4b22      	ldr	r3, [pc, #136]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	b2d2      	uxtb	r2, r2
 8004284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004286:	4b20      	ldr	r3, [pc, #128]	; (8004308 <HAL_RCC_ClockConfig+0x1b8>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0307 	and.w	r3, r3, #7
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d001      	beq.n	8004298 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e032      	b.n	80042fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042a4:	4b19      	ldr	r3, [pc, #100]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	4916      	ldr	r1, [pc, #88]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0308 	and.w	r3, r3, #8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d009      	beq.n	80042d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042c2:	4b12      	ldr	r3, [pc, #72]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	490e      	ldr	r1, [pc, #56]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80042d6:	f000 f821 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042da:	4602      	mov	r2, r0
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	091b      	lsrs	r3, r3, #4
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	490a      	ldr	r1, [pc, #40]	; (8004310 <HAL_RCC_ClockConfig+0x1c0>)
 80042e8:	5ccb      	ldrb	r3, [r1, r3]
 80042ea:	fa22 f303 	lsr.w	r3, r2, r3
 80042ee:	4a09      	ldr	r2, [pc, #36]	; (8004314 <HAL_RCC_ClockConfig+0x1c4>)
 80042f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80042f2:	4b09      	ldr	r3, [pc, #36]	; (8004318 <HAL_RCC_ClockConfig+0x1c8>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fd f88e 	bl	8001418 <HAL_InitTick>

  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
 8004306:	bf00      	nop
 8004308:	40023c00 	.word	0x40023c00
 800430c:	40023800 	.word	0x40023800
 8004310:	080082f8 	.word	0x080082f8
 8004314:	20000000 	.word	0x20000000
 8004318:	20000004 	.word	0x20000004

0800431c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b5b0      	push	{r4, r5, r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004322:	2100      	movs	r1, #0
 8004324:	6079      	str	r1, [r7, #4]
 8004326:	2100      	movs	r1, #0
 8004328:	60f9      	str	r1, [r7, #12]
 800432a:	2100      	movs	r1, #0
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800432e:	2100      	movs	r1, #0
 8004330:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004332:	4952      	ldr	r1, [pc, #328]	; (800447c <HAL_RCC_GetSysClockFreq+0x160>)
 8004334:	6889      	ldr	r1, [r1, #8]
 8004336:	f001 010c 	and.w	r1, r1, #12
 800433a:	2908      	cmp	r1, #8
 800433c:	d00d      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0x3e>
 800433e:	2908      	cmp	r1, #8
 8004340:	f200 8094 	bhi.w	800446c <HAL_RCC_GetSysClockFreq+0x150>
 8004344:	2900      	cmp	r1, #0
 8004346:	d002      	beq.n	800434e <HAL_RCC_GetSysClockFreq+0x32>
 8004348:	2904      	cmp	r1, #4
 800434a:	d003      	beq.n	8004354 <HAL_RCC_GetSysClockFreq+0x38>
 800434c:	e08e      	b.n	800446c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800434e:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_RCC_GetSysClockFreq+0x164>)
 8004350:	60bb      	str	r3, [r7, #8]
       break;
 8004352:	e08e      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004354:	4b4b      	ldr	r3, [pc, #300]	; (8004484 <HAL_RCC_GetSysClockFreq+0x168>)
 8004356:	60bb      	str	r3, [r7, #8]
      break;
 8004358:	e08b      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800435a:	4948      	ldr	r1, [pc, #288]	; (800447c <HAL_RCC_GetSysClockFreq+0x160>)
 800435c:	6849      	ldr	r1, [r1, #4]
 800435e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004362:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004364:	4945      	ldr	r1, [pc, #276]	; (800447c <HAL_RCC_GetSysClockFreq+0x160>)
 8004366:	6849      	ldr	r1, [r1, #4]
 8004368:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800436c:	2900      	cmp	r1, #0
 800436e:	d024      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004370:	4942      	ldr	r1, [pc, #264]	; (800447c <HAL_RCC_GetSysClockFreq+0x160>)
 8004372:	6849      	ldr	r1, [r1, #4]
 8004374:	0989      	lsrs	r1, r1, #6
 8004376:	4608      	mov	r0, r1
 8004378:	f04f 0100 	mov.w	r1, #0
 800437c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004380:	f04f 0500 	mov.w	r5, #0
 8004384:	ea00 0204 	and.w	r2, r0, r4
 8004388:	ea01 0305 	and.w	r3, r1, r5
 800438c:	493d      	ldr	r1, [pc, #244]	; (8004484 <HAL_RCC_GetSysClockFreq+0x168>)
 800438e:	fb01 f003 	mul.w	r0, r1, r3
 8004392:	2100      	movs	r1, #0
 8004394:	fb01 f102 	mul.w	r1, r1, r2
 8004398:	1844      	adds	r4, r0, r1
 800439a:	493a      	ldr	r1, [pc, #232]	; (8004484 <HAL_RCC_GetSysClockFreq+0x168>)
 800439c:	fba2 0101 	umull	r0, r1, r2, r1
 80043a0:	1863      	adds	r3, r4, r1
 80043a2:	4619      	mov	r1, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	461a      	mov	r2, r3
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	f7fb ff12 	bl	80001d4 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4613      	mov	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	e04a      	b.n	8004450 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043ba:	4b30      	ldr	r3, [pc, #192]	; (800447c <HAL_RCC_GetSysClockFreq+0x160>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	099b      	lsrs	r3, r3, #6
 80043c0:	461a      	mov	r2, r3
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80043ca:	f04f 0100 	mov.w	r1, #0
 80043ce:	ea02 0400 	and.w	r4, r2, r0
 80043d2:	ea03 0501 	and.w	r5, r3, r1
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	f04f 0200 	mov.w	r2, #0
 80043de:	f04f 0300 	mov.w	r3, #0
 80043e2:	014b      	lsls	r3, r1, #5
 80043e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80043e8:	0142      	lsls	r2, r0, #5
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	1b00      	subs	r0, r0, r4
 80043f0:	eb61 0105 	sbc.w	r1, r1, r5
 80043f4:	f04f 0200 	mov.w	r2, #0
 80043f8:	f04f 0300 	mov.w	r3, #0
 80043fc:	018b      	lsls	r3, r1, #6
 80043fe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004402:	0182      	lsls	r2, r0, #6
 8004404:	1a12      	subs	r2, r2, r0
 8004406:	eb63 0301 	sbc.w	r3, r3, r1
 800440a:	f04f 0000 	mov.w	r0, #0
 800440e:	f04f 0100 	mov.w	r1, #0
 8004412:	00d9      	lsls	r1, r3, #3
 8004414:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004418:	00d0      	lsls	r0, r2, #3
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	1912      	adds	r2, r2, r4
 8004420:	eb45 0303 	adc.w	r3, r5, r3
 8004424:	f04f 0000 	mov.w	r0, #0
 8004428:	f04f 0100 	mov.w	r1, #0
 800442c:	0299      	lsls	r1, r3, #10
 800442e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004432:	0290      	lsls	r0, r2, #10
 8004434:	4602      	mov	r2, r0
 8004436:	460b      	mov	r3, r1
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	461a      	mov	r2, r3
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	f7fb fec6 	bl	80001d4 <__aeabi_uldivmod>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4613      	mov	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004450:	4b0a      	ldr	r3, [pc, #40]	; (800447c <HAL_RCC_GetSysClockFreq+0x160>)
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	0c1b      	lsrs	r3, r3, #16
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	3301      	adds	r3, #1
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	60bb      	str	r3, [r7, #8]
      break;
 800446a:	e002      	b.n	8004472 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800446c:	4b04      	ldr	r3, [pc, #16]	; (8004480 <HAL_RCC_GetSysClockFreq+0x164>)
 800446e:	60bb      	str	r3, [r7, #8]
      break;
 8004470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004472:	68bb      	ldr	r3, [r7, #8]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bdb0      	pop	{r4, r5, r7, pc}
 800447c:	40023800 	.word	0x40023800
 8004480:	00f42400 	.word	0x00f42400
 8004484:	00b71b00 	.word	0x00b71b00

08004488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800448c:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_GetHCLKFreq+0x14>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	4618      	mov	r0, r3
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	20000000 	.word	0x20000000

080044a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044a4:	f7ff fff0 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	0a9b      	lsrs	r3, r3, #10
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4903      	ldr	r1, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044b6:	5ccb      	ldrb	r3, [r1, r3]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40023800 	.word	0x40023800
 80044c4:	08008308 	.word	0x08008308

080044c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044cc:	f7ff ffdc 	bl	8004488 <HAL_RCC_GetHCLKFreq>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	0b5b      	lsrs	r3, r3, #13
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	4903      	ldr	r1, [pc, #12]	; (80044ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80044de:	5ccb      	ldrb	r3, [r1, r3]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	40023800 	.word	0x40023800
 80044ec:	08008308 	.word	0x08008308

080044f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e07b      	b.n	80045fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	2b00      	cmp	r3, #0
 8004508:	d108      	bne.n	800451c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004512:	d009      	beq.n	8004528 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	61da      	str	r2, [r3, #28]
 800451a:	e005      	b.n	8004528 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fc fdf4 	bl	8001130 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800455e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004570:	431a      	orrs	r2, r3
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	431a      	orrs	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004598:	431a      	orrs	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ac:	ea42 0103 	orr.w	r1, r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	430a      	orrs	r2, r1
 80045be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	0c1b      	lsrs	r3, r3, #16
 80045c6:	f003 0104 	and.w	r1, r3, #4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ce:	f003 0210 	and.w	r2, r3, #16
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	69da      	ldr	r2, [r3, #28]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3708      	adds	r7, #8
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e03f      	b.n	8004694 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7fc fe61 	bl	80012f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2224      	movs	r2, #36	; 0x24
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004644:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f828 	bl	800469c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691a      	ldr	r2, [r3, #16]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800465a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800466a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	68da      	ldr	r2, [r3, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800467a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2220      	movs	r2, #32
 8004686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2220      	movs	r2, #32
 800468e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004692:	2300      	movs	r3, #0
}
 8004694:	4618      	mov	r0, r3
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	b09f      	sub	sp, #124	; 0x7c
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b2:	68d9      	ldr	r1, [r3, #12]
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	ea40 0301 	orr.w	r3, r0, r1
 80046bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c0:	689a      	ldr	r2, [r3, #8]
 80046c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	431a      	orrs	r2, r3
 80046c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	431a      	orrs	r2, r3
 80046ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80046d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046e0:	f021 010c 	bic.w	r1, r1, #12
 80046e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80046ea:	430b      	orrs	r3, r1
 80046ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	695b      	ldr	r3, [r3, #20]
 80046f4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fa:	6999      	ldr	r1, [r3, #24]
 80046fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	ea40 0301 	orr.w	r3, r0, r1
 8004704:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	4bc5      	ldr	r3, [pc, #788]	; (8004a20 <UART_SetConfig+0x384>)
 800470c:	429a      	cmp	r2, r3
 800470e:	d004      	beq.n	800471a <UART_SetConfig+0x7e>
 8004710:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	4bc3      	ldr	r3, [pc, #780]	; (8004a24 <UART_SetConfig+0x388>)
 8004716:	429a      	cmp	r2, r3
 8004718:	d103      	bne.n	8004722 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800471a:	f7ff fed5 	bl	80044c8 <HAL_RCC_GetPCLK2Freq>
 800471e:	6778      	str	r0, [r7, #116]	; 0x74
 8004720:	e002      	b.n	8004728 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004722:	f7ff febd 	bl	80044a0 <HAL_RCC_GetPCLK1Freq>
 8004726:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	69db      	ldr	r3, [r3, #28]
 800472c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004730:	f040 80b6 	bne.w	80048a0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004734:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004736:	461c      	mov	r4, r3
 8004738:	f04f 0500 	mov.w	r5, #0
 800473c:	4622      	mov	r2, r4
 800473e:	462b      	mov	r3, r5
 8004740:	1891      	adds	r1, r2, r2
 8004742:	6439      	str	r1, [r7, #64]	; 0x40
 8004744:	415b      	adcs	r3, r3
 8004746:	647b      	str	r3, [r7, #68]	; 0x44
 8004748:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800474c:	1912      	adds	r2, r2, r4
 800474e:	eb45 0303 	adc.w	r3, r5, r3
 8004752:	f04f 0000 	mov.w	r0, #0
 8004756:	f04f 0100 	mov.w	r1, #0
 800475a:	00d9      	lsls	r1, r3, #3
 800475c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004760:	00d0      	lsls	r0, r2, #3
 8004762:	4602      	mov	r2, r0
 8004764:	460b      	mov	r3, r1
 8004766:	1911      	adds	r1, r2, r4
 8004768:	6639      	str	r1, [r7, #96]	; 0x60
 800476a:	416b      	adcs	r3, r5
 800476c:	667b      	str	r3, [r7, #100]	; 0x64
 800476e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	461a      	mov	r2, r3
 8004774:	f04f 0300 	mov.w	r3, #0
 8004778:	1891      	adds	r1, r2, r2
 800477a:	63b9      	str	r1, [r7, #56]	; 0x38
 800477c:	415b      	adcs	r3, r3
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004784:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004788:	f7fb fd24 	bl	80001d4 <__aeabi_uldivmod>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4ba5      	ldr	r3, [pc, #660]	; (8004a28 <UART_SetConfig+0x38c>)
 8004792:	fba3 2302 	umull	r2, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	011e      	lsls	r6, r3, #4
 800479a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800479c:	461c      	mov	r4, r3
 800479e:	f04f 0500 	mov.w	r5, #0
 80047a2:	4622      	mov	r2, r4
 80047a4:	462b      	mov	r3, r5
 80047a6:	1891      	adds	r1, r2, r2
 80047a8:	6339      	str	r1, [r7, #48]	; 0x30
 80047aa:	415b      	adcs	r3, r3
 80047ac:	637b      	str	r3, [r7, #52]	; 0x34
 80047ae:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80047b2:	1912      	adds	r2, r2, r4
 80047b4:	eb45 0303 	adc.w	r3, r5, r3
 80047b8:	f04f 0000 	mov.w	r0, #0
 80047bc:	f04f 0100 	mov.w	r1, #0
 80047c0:	00d9      	lsls	r1, r3, #3
 80047c2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047c6:	00d0      	lsls	r0, r2, #3
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	1911      	adds	r1, r2, r4
 80047ce:	65b9      	str	r1, [r7, #88]	; 0x58
 80047d0:	416b      	adcs	r3, r5
 80047d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	461a      	mov	r2, r3
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	1891      	adds	r1, r2, r2
 80047e0:	62b9      	str	r1, [r7, #40]	; 0x28
 80047e2:	415b      	adcs	r3, r3
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047ea:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80047ee:	f7fb fcf1 	bl	80001d4 <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4b8c      	ldr	r3, [pc, #560]	; (8004a28 <UART_SetConfig+0x38c>)
 80047f8:	fba3 1302 	umull	r1, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	2164      	movs	r1, #100	; 0x64
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	3332      	adds	r3, #50	; 0x32
 800480a:	4a87      	ldr	r2, [pc, #540]	; (8004a28 <UART_SetConfig+0x38c>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004818:	441e      	add	r6, r3
 800481a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800481c:	4618      	mov	r0, r3
 800481e:	f04f 0100 	mov.w	r1, #0
 8004822:	4602      	mov	r2, r0
 8004824:	460b      	mov	r3, r1
 8004826:	1894      	adds	r4, r2, r2
 8004828:	623c      	str	r4, [r7, #32]
 800482a:	415b      	adcs	r3, r3
 800482c:	627b      	str	r3, [r7, #36]	; 0x24
 800482e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004832:	1812      	adds	r2, r2, r0
 8004834:	eb41 0303 	adc.w	r3, r1, r3
 8004838:	f04f 0400 	mov.w	r4, #0
 800483c:	f04f 0500 	mov.w	r5, #0
 8004840:	00dd      	lsls	r5, r3, #3
 8004842:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004846:	00d4      	lsls	r4, r2, #3
 8004848:	4622      	mov	r2, r4
 800484a:	462b      	mov	r3, r5
 800484c:	1814      	adds	r4, r2, r0
 800484e:	653c      	str	r4, [r7, #80]	; 0x50
 8004850:	414b      	adcs	r3, r1
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
 8004854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	461a      	mov	r2, r3
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	1891      	adds	r1, r2, r2
 8004860:	61b9      	str	r1, [r7, #24]
 8004862:	415b      	adcs	r3, r3
 8004864:	61fb      	str	r3, [r7, #28]
 8004866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800486e:	f7fb fcb1 	bl	80001d4 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4b6c      	ldr	r3, [pc, #432]	; (8004a28 <UART_SetConfig+0x38c>)
 8004878:	fba3 1302 	umull	r1, r3, r3, r2
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	2164      	movs	r1, #100	; 0x64
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	3332      	adds	r3, #50	; 0x32
 800488a:	4a67      	ldr	r2, [pc, #412]	; (8004a28 <UART_SetConfig+0x38c>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	f003 0207 	and.w	r2, r3, #7
 8004896:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4432      	add	r2, r6
 800489c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800489e:	e0b9      	b.n	8004a14 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a2:	461c      	mov	r4, r3
 80048a4:	f04f 0500 	mov.w	r5, #0
 80048a8:	4622      	mov	r2, r4
 80048aa:	462b      	mov	r3, r5
 80048ac:	1891      	adds	r1, r2, r2
 80048ae:	6139      	str	r1, [r7, #16]
 80048b0:	415b      	adcs	r3, r3
 80048b2:	617b      	str	r3, [r7, #20]
 80048b4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80048b8:	1912      	adds	r2, r2, r4
 80048ba:	eb45 0303 	adc.w	r3, r5, r3
 80048be:	f04f 0000 	mov.w	r0, #0
 80048c2:	f04f 0100 	mov.w	r1, #0
 80048c6:	00d9      	lsls	r1, r3, #3
 80048c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048cc:	00d0      	lsls	r0, r2, #3
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	eb12 0804 	adds.w	r8, r2, r4
 80048d6:	eb43 0905 	adc.w	r9, r3, r5
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	f04f 0100 	mov.w	r1, #0
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	008b      	lsls	r3, r1, #2
 80048ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048f2:	0082      	lsls	r2, r0, #2
 80048f4:	4640      	mov	r0, r8
 80048f6:	4649      	mov	r1, r9
 80048f8:	f7fb fc6c 	bl	80001d4 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b49      	ldr	r3, [pc, #292]	; (8004a28 <UART_SetConfig+0x38c>)
 8004902:	fba3 2302 	umull	r2, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	011e      	lsls	r6, r3, #4
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	4618      	mov	r0, r3
 800490e:	f04f 0100 	mov.w	r1, #0
 8004912:	4602      	mov	r2, r0
 8004914:	460b      	mov	r3, r1
 8004916:	1894      	adds	r4, r2, r2
 8004918:	60bc      	str	r4, [r7, #8]
 800491a:	415b      	adcs	r3, r3
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004922:	1812      	adds	r2, r2, r0
 8004924:	eb41 0303 	adc.w	r3, r1, r3
 8004928:	f04f 0400 	mov.w	r4, #0
 800492c:	f04f 0500 	mov.w	r5, #0
 8004930:	00dd      	lsls	r5, r3, #3
 8004932:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004936:	00d4      	lsls	r4, r2, #3
 8004938:	4622      	mov	r2, r4
 800493a:	462b      	mov	r3, r5
 800493c:	1814      	adds	r4, r2, r0
 800493e:	64bc      	str	r4, [r7, #72]	; 0x48
 8004940:	414b      	adcs	r3, r1
 8004942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	4618      	mov	r0, r3
 800494a:	f04f 0100 	mov.w	r1, #0
 800494e:	f04f 0200 	mov.w	r2, #0
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	008b      	lsls	r3, r1, #2
 8004958:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800495c:	0082      	lsls	r2, r0, #2
 800495e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004962:	f7fb fc37 	bl	80001d4 <__aeabi_uldivmod>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4b2f      	ldr	r3, [pc, #188]	; (8004a28 <UART_SetConfig+0x38c>)
 800496c:	fba3 1302 	umull	r1, r3, r3, r2
 8004970:	095b      	lsrs	r3, r3, #5
 8004972:	2164      	movs	r1, #100	; 0x64
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	3332      	adds	r3, #50	; 0x32
 800497e:	4a2a      	ldr	r2, [pc, #168]	; (8004a28 <UART_SetConfig+0x38c>)
 8004980:	fba2 2303 	umull	r2, r3, r2, r3
 8004984:	095b      	lsrs	r3, r3, #5
 8004986:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498a:	441e      	add	r6, r3
 800498c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800498e:	4618      	mov	r0, r3
 8004990:	f04f 0100 	mov.w	r1, #0
 8004994:	4602      	mov	r2, r0
 8004996:	460b      	mov	r3, r1
 8004998:	1894      	adds	r4, r2, r2
 800499a:	603c      	str	r4, [r7, #0]
 800499c:	415b      	adcs	r3, r3
 800499e:	607b      	str	r3, [r7, #4]
 80049a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049a4:	1812      	adds	r2, r2, r0
 80049a6:	eb41 0303 	adc.w	r3, r1, r3
 80049aa:	f04f 0400 	mov.w	r4, #0
 80049ae:	f04f 0500 	mov.w	r5, #0
 80049b2:	00dd      	lsls	r5, r3, #3
 80049b4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80049b8:	00d4      	lsls	r4, r2, #3
 80049ba:	4622      	mov	r2, r4
 80049bc:	462b      	mov	r3, r5
 80049be:	eb12 0a00 	adds.w	sl, r2, r0
 80049c2:	eb43 0b01 	adc.w	fp, r3, r1
 80049c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f04f 0100 	mov.w	r1, #0
 80049d0:	f04f 0200 	mov.w	r2, #0
 80049d4:	f04f 0300 	mov.w	r3, #0
 80049d8:	008b      	lsls	r3, r1, #2
 80049da:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80049de:	0082      	lsls	r2, r0, #2
 80049e0:	4650      	mov	r0, sl
 80049e2:	4659      	mov	r1, fp
 80049e4:	f7fb fbf6 	bl	80001d4 <__aeabi_uldivmod>
 80049e8:	4602      	mov	r2, r0
 80049ea:	460b      	mov	r3, r1
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <UART_SetConfig+0x38c>)
 80049ee:	fba3 1302 	umull	r1, r3, r3, r2
 80049f2:	095b      	lsrs	r3, r3, #5
 80049f4:	2164      	movs	r1, #100	; 0x64
 80049f6:	fb01 f303 	mul.w	r3, r1, r3
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	011b      	lsls	r3, r3, #4
 80049fe:	3332      	adds	r3, #50	; 0x32
 8004a00:	4a09      	ldr	r2, [pc, #36]	; (8004a28 <UART_SetConfig+0x38c>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	095b      	lsrs	r3, r3, #5
 8004a08:	f003 020f 	and.w	r2, r3, #15
 8004a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4432      	add	r2, r6
 8004a12:	609a      	str	r2, [r3, #8]
}
 8004a14:	bf00      	nop
 8004a16:	377c      	adds	r7, #124	; 0x7c
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a1e:	bf00      	nop
 8004a20:	40011000 	.word	0x40011000
 8004a24:	40011400 	.word	0x40011400
 8004a28:	51eb851f 	.word	0x51eb851f

08004a2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a2c:	b084      	sub	sp, #16
 8004a2e:	b580      	push	{r7, lr}
 8004a30:	b084      	sub	sp, #16
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
 8004a36:	f107 001c 	add.w	r0, r7, #28
 8004a3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d122      	bne.n	8004a8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d105      	bne.n	8004a7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f001 fac6 	bl	8006010 <USB_CoreReset>
 8004a84:	4603      	mov	r3, r0
 8004a86:	73fb      	strb	r3, [r7, #15]
 8004a88:	e01a      	b.n	8004ac0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 faba 	bl	8006010 <USB_CoreReset>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004aa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
 8004ab2:	e005      	b.n	8004ac0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d10b      	bne.n	8004ade <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f043 0206 	orr.w	r2, r3, #6
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f043 0220 	orr.w	r2, r3, #32
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004aea:	b004      	add	sp, #16
 8004aec:	4770      	bx	lr
	...

08004af0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	4613      	mov	r3, r2
 8004afc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004afe:	79fb      	ldrb	r3, [r7, #7]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d165      	bne.n	8004bd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4a41      	ldr	r2, [pc, #260]	; (8004c0c <USB_SetTurnaroundTime+0x11c>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d906      	bls.n	8004b1a <USB_SetTurnaroundTime+0x2a>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	4a40      	ldr	r2, [pc, #256]	; (8004c10 <USB_SetTurnaroundTime+0x120>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d202      	bcs.n	8004b1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004b14:	230f      	movs	r3, #15
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e062      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	4a3c      	ldr	r2, [pc, #240]	; (8004c10 <USB_SetTurnaroundTime+0x120>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d306      	bcc.n	8004b30 <USB_SetTurnaroundTime+0x40>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4a3b      	ldr	r2, [pc, #236]	; (8004c14 <USB_SetTurnaroundTime+0x124>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d202      	bcs.n	8004b30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004b2a:	230e      	movs	r3, #14
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	e057      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	4a38      	ldr	r2, [pc, #224]	; (8004c14 <USB_SetTurnaroundTime+0x124>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d306      	bcc.n	8004b46 <USB_SetTurnaroundTime+0x56>
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4a37      	ldr	r2, [pc, #220]	; (8004c18 <USB_SetTurnaroundTime+0x128>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d202      	bcs.n	8004b46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004b40:	230d      	movs	r3, #13
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e04c      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4a33      	ldr	r2, [pc, #204]	; (8004c18 <USB_SetTurnaroundTime+0x128>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d306      	bcc.n	8004b5c <USB_SetTurnaroundTime+0x6c>
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	4a32      	ldr	r2, [pc, #200]	; (8004c1c <USB_SetTurnaroundTime+0x12c>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d802      	bhi.n	8004b5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004b56:	230c      	movs	r3, #12
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	e041      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	4a2f      	ldr	r2, [pc, #188]	; (8004c1c <USB_SetTurnaroundTime+0x12c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d906      	bls.n	8004b72 <USB_SetTurnaroundTime+0x82>
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	4a2e      	ldr	r2, [pc, #184]	; (8004c20 <USB_SetTurnaroundTime+0x130>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d802      	bhi.n	8004b72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004b6c:	230b      	movs	r3, #11
 8004b6e:	617b      	str	r3, [r7, #20]
 8004b70:	e036      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	4a2a      	ldr	r2, [pc, #168]	; (8004c20 <USB_SetTurnaroundTime+0x130>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d906      	bls.n	8004b88 <USB_SetTurnaroundTime+0x98>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a29      	ldr	r2, [pc, #164]	; (8004c24 <USB_SetTurnaroundTime+0x134>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d802      	bhi.n	8004b88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004b82:	230a      	movs	r3, #10
 8004b84:	617b      	str	r3, [r7, #20]
 8004b86:	e02b      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4a26      	ldr	r2, [pc, #152]	; (8004c24 <USB_SetTurnaroundTime+0x134>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d906      	bls.n	8004b9e <USB_SetTurnaroundTime+0xae>
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	4a25      	ldr	r2, [pc, #148]	; (8004c28 <USB_SetTurnaroundTime+0x138>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d202      	bcs.n	8004b9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b98:	2309      	movs	r3, #9
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	e020      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4a21      	ldr	r2, [pc, #132]	; (8004c28 <USB_SetTurnaroundTime+0x138>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d306      	bcc.n	8004bb4 <USB_SetTurnaroundTime+0xc4>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	4a20      	ldr	r2, [pc, #128]	; (8004c2c <USB_SetTurnaroundTime+0x13c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d802      	bhi.n	8004bb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004bae:	2308      	movs	r3, #8
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	e015      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	4a1d      	ldr	r2, [pc, #116]	; (8004c2c <USB_SetTurnaroundTime+0x13c>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d906      	bls.n	8004bca <USB_SetTurnaroundTime+0xda>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4a1c      	ldr	r2, [pc, #112]	; (8004c30 <USB_SetTurnaroundTime+0x140>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d202      	bcs.n	8004bca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004bc4:	2307      	movs	r3, #7
 8004bc6:	617b      	str	r3, [r7, #20]
 8004bc8:	e00a      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004bca:	2306      	movs	r3, #6
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	e007      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004bd6:	2309      	movs	r3, #9
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e001      	b.n	8004be0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004bdc:	2309      	movs	r3, #9
 8004bde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	029b      	lsls	r3, r3, #10
 8004bf4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	371c      	adds	r7, #28
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	00d8acbf 	.word	0x00d8acbf
 8004c10:	00e4e1c0 	.word	0x00e4e1c0
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	01067380 	.word	0x01067380
 8004c1c:	011a499f 	.word	0x011a499f
 8004c20:	01312cff 	.word	0x01312cff
 8004c24:	014ca43f 	.word	0x014ca43f
 8004c28:	016e3600 	.word	0x016e3600
 8004c2c:	01a6ab1f 	.word	0x01a6ab1f
 8004c30:	01e84800 	.word	0x01e84800

08004c34 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f043 0201 	orr.w	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c56:	b480      	push	{r7}
 8004c58:	b083      	sub	sp, #12
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f023 0201 	bic.w	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	460b      	mov	r3, r1
 8004c82:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68db      	ldr	r3, [r3, #12]
 8004c88:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c90:	78fb      	ldrb	r3, [r7, #3]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d106      	bne.n	8004ca4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e00b      	b.n	8004cbc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60da      	str	r2, [r3, #12]
 8004cb6:	e001      	b.n	8004cbc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e003      	b.n	8004cc4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004cbc:	2032      	movs	r0, #50	; 0x32
 8004cbe:	f7fc fbfb 	bl	80014b8 <HAL_Delay>

  return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ccc:	b084      	sub	sp, #16
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b086      	sub	sp, #24
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
 8004cd6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004cda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	e009      	b.n	8004d00 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	3340      	adds	r3, #64	; 0x40
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4413      	add	r3, r2
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	2b0e      	cmp	r3, #14
 8004d04:	d9f2      	bls.n	8004cec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d11c      	bne.n	8004d46 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f043 0302 	orr.w	r3, r3, #2
 8004d1e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	; 0x38
 8004d44:	e00b      	b.n	8004d5e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d56:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d64:	461a      	mov	r2, r3
 8004d66:	2300      	movs	r3, #0
 8004d68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d70:	4619      	mov	r1, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d78:	461a      	mov	r2, r3
 8004d7a:	680b      	ldr	r3, [r1, #0]
 8004d7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	d10c      	bne.n	8004d9e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 f949 	bl	8005024 <USB_SetDevSpeed>
 8004d92:	e008      	b.n	8004da6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d94:	2101      	movs	r1, #1
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f944 	bl	8005024 <USB_SetDevSpeed>
 8004d9c:	e003      	b.n	8004da6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d9e:	2103      	movs	r1, #3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 f93f 	bl	8005024 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004da6:	2110      	movs	r1, #16
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8f3 	bl	8004f94 <USB_FlushTxFifo>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f911 	bl	8004fe0 <USB_FlushRxFifo>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d001      	beq.n	8004dc8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dce:	461a      	mov	r2, r3
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dda:	461a      	mov	r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de6:	461a      	mov	r2, r3
 8004de8:	2300      	movs	r3, #0
 8004dea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004dec:	2300      	movs	r3, #0
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e043      	b.n	8004e7a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	015a      	lsls	r2, r3, #5
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	4413      	add	r3, r2
 8004dfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e08:	d118      	bne.n	8004e3c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10a      	bne.n	8004e26 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e22:	6013      	str	r3, [r2, #0]
 8004e24:	e013      	b.n	8004e4e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e32:	461a      	mov	r2, r3
 8004e34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e008      	b.n	8004e4e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	015a      	lsls	r2, r3, #5
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	4413      	add	r3, r2
 8004e68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e6c:	461a      	mov	r2, r3
 8004e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	3301      	adds	r3, #1
 8004e78:	613b      	str	r3, [r7, #16]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d3b7      	bcc.n	8004df2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	e043      	b.n	8004f10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	015a      	lsls	r2, r3, #5
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4413      	add	r3, r2
 8004e90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e9e:	d118      	bne.n	8004ed2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e013      	b.n	8004ee4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec8:	461a      	mov	r2, r3
 8004eca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ece:	6013      	str	r3, [r2, #0]
 8004ed0:	e008      	b.n	8004ee4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	015a      	lsls	r2, r3, #5
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	4413      	add	r3, r2
 8004eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	015a      	lsls	r2, r3, #5
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4413      	add	r3, r2
 8004efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f02:	461a      	mov	r2, r3
 8004f04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	613b      	str	r3, [r7, #16]
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d3b7      	bcc.n	8004e88 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004f38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d105      	bne.n	8004f4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f043 0210 	orr.w	r2, r3, #16
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	4b0f      	ldr	r3, [pc, #60]	; (8004f90 <USB_DevInit+0x2c4>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d005      	beq.n	8004f6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	f043 0208 	orr.w	r2, r3, #8
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d107      	bne.n	8004f80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f78:	f043 0304 	orr.w	r3, r3, #4
 8004f7c:	687a      	ldr	r2, [r7, #4]
 8004f7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f8c:	b004      	add	sp, #16
 8004f8e:	4770      	bx	lr
 8004f90:	803c3800 	.word	0x803c3800

08004f94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	019b      	lsls	r3, r3, #6
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a09      	ldr	r2, [pc, #36]	; (8004fdc <USB_FlushTxFifo+0x48>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d901      	bls.n	8004fc0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e006      	b.n	8004fce <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	691b      	ldr	r3, [r3, #16]
 8004fc4:	f003 0320 	and.w	r3, r3, #32
 8004fc8:	2b20      	cmp	r3, #32
 8004fca:	d0f0      	beq.n	8004fae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	00030d40 	.word	0x00030d40

08004fe0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b085      	sub	sp, #20
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2210      	movs	r2, #16
 8004ff0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a09      	ldr	r2, [pc, #36]	; (8005020 <USB_FlushRxFifo+0x40>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0310 	and.w	r3, r3, #16
 800500c:	2b10      	cmp	r3, #16
 800500e:	d0f0      	beq.n	8004ff2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	00030d40 	.word	0x00030d40

08005024 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	68f9      	ldr	r1, [r7, #12]
 8005040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005044:	4313      	orrs	r3, r2
 8005046:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005056:	b480      	push	{r7}
 8005058:	b087      	sub	sp, #28
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 0306 	and.w	r3, r3, #6
 800506e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d102      	bne.n	800507c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005076:	2300      	movs	r3, #0
 8005078:	75fb      	strb	r3, [r7, #23]
 800507a:	e00a      	b.n	8005092 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d002      	beq.n	8005088 <USB_GetDevSpeed+0x32>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b06      	cmp	r3, #6
 8005086:	d102      	bne.n	800508e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005088:	2302      	movs	r3, #2
 800508a:	75fb      	strb	r3, [r7, #23]
 800508c:	e001      	b.n	8005092 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800508e:	230f      	movs	r3, #15
 8005090:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005092:	7dfb      	ldrb	r3, [r7, #23]
}
 8005094:	4618      	mov	r0, r3
 8005096:	371c      	adds	r7, #28
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	785b      	ldrb	r3, [r3, #1]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d13a      	bne.n	8005132 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	f003 030f 	and.w	r3, r3, #15
 80050cc:	2101      	movs	r1, #1
 80050ce:	fa01 f303 	lsl.w	r3, r1, r3
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	68f9      	ldr	r1, [r7, #12]
 80050d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050da:	4313      	orrs	r3, r2
 80050dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	015a      	lsls	r2, r3, #5
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	4413      	add	r3, r2
 80050e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d155      	bne.n	80051a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	78db      	ldrb	r3, [r3, #3]
 800510e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005110:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005112:	68bb      	ldr	r3, [r7, #8]
 8005114:	059b      	lsls	r3, r3, #22
 8005116:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005118:	4313      	orrs	r3, r2
 800511a:	68ba      	ldr	r2, [r7, #8]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	e036      	b.n	80051a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005138:	69da      	ldr	r2, [r3, #28]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	f003 030f 	and.w	r3, r3, #15
 8005142:	2101      	movs	r1, #1
 8005144:	fa01 f303 	lsl.w	r3, r1, r3
 8005148:	041b      	lsls	r3, r3, #16
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005150:	4313      	orrs	r3, r2
 8005152:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	015a      	lsls	r2, r3, #5
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	4413      	add	r3, r2
 800515c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005166:	2b00      	cmp	r3, #0
 8005168:	d11a      	bne.n	80051a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	4413      	add	r3, r2
 8005172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	78db      	ldrb	r3, [r3, #3]
 8005184:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005186:	430b      	orrs	r3, r1
 8005188:	4313      	orrs	r3, r2
 800518a:	68ba      	ldr	r2, [r7, #8]
 800518c:	0151      	lsls	r1, r2, #5
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	440a      	add	r2, r1
 8005192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800519a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800519e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	781b      	ldrb	r3, [r3, #0]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	785b      	ldrb	r3, [r3, #1]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d161      	bne.n	8005290 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051e2:	d11f      	bne.n	8005224 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	015a      	lsls	r2, r3, #5
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	4413      	add	r3, r2
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	0151      	lsls	r1, r2, #5
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	440a      	add	r2, r1
 80051fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005202:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	0151      	lsls	r1, r2, #5
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	440a      	add	r2, r1
 800521a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800521e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	b29b      	uxth	r3, r3
 800523c:	43db      	mvns	r3, r3
 800523e:	68f9      	ldr	r1, [r7, #12]
 8005240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005244:	4013      	ands	r3, r2
 8005246:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524e:	69da      	ldr	r2, [r3, #28]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	f003 030f 	and.w	r3, r3, #15
 8005258:	2101      	movs	r1, #1
 800525a:	fa01 f303 	lsl.w	r3, r1, r3
 800525e:	b29b      	uxth	r3, r3
 8005260:	43db      	mvns	r3, r3
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005268:	4013      	ands	r3, r2
 800526a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	015a      	lsls	r2, r3, #5
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	4413      	add	r3, r2
 8005274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0159      	lsls	r1, r3, #5
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	440b      	add	r3, r1
 8005282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005286:	4619      	mov	r1, r3
 8005288:	4b35      	ldr	r3, [pc, #212]	; (8005360 <USB_DeactivateEndpoint+0x1b0>)
 800528a:	4013      	ands	r3, r2
 800528c:	600b      	str	r3, [r1, #0]
 800528e:	e060      	b.n	8005352 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052a6:	d11f      	bne.n	80052e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	0151      	lsls	r1, r2, #5
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	440a      	add	r2, r1
 80052be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	0151      	lsls	r1, r2, #5
 80052da:	68fa      	ldr	r2, [r7, #12]
 80052dc:	440a      	add	r2, r1
 80052de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	781b      	ldrb	r3, [r3, #0]
 80052f4:	f003 030f 	and.w	r3, r3, #15
 80052f8:	2101      	movs	r1, #1
 80052fa:	fa01 f303 	lsl.w	r3, r1, r3
 80052fe:	041b      	lsls	r3, r3, #16
 8005300:	43db      	mvns	r3, r3
 8005302:	68f9      	ldr	r1, [r7, #12]
 8005304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005308:	4013      	ands	r3, r2
 800530a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	781b      	ldrb	r3, [r3, #0]
 8005318:	f003 030f 	and.w	r3, r3, #15
 800531c:	2101      	movs	r1, #1
 800531e:	fa01 f303 	lsl.w	r3, r1, r3
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	43db      	mvns	r3, r3
 8005326:	68f9      	ldr	r1, [r7, #12]
 8005328:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800532c:	4013      	ands	r3, r2
 800532e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	0159      	lsls	r1, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	440b      	add	r3, r1
 8005346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800534a:	4619      	mov	r1, r3
 800534c:	4b05      	ldr	r3, [pc, #20]	; (8005364 <USB_DeactivateEndpoint+0x1b4>)
 800534e:	4013      	ands	r3, r2
 8005350:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005352:	2300      	movs	r3, #0
}
 8005354:	4618      	mov	r0, r3
 8005356:	3714      	adds	r7, #20
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr
 8005360:	ec337800 	.word	0xec337800
 8005364:	eff37800 	.word	0xeff37800

08005368 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b08a      	sub	sp, #40	; 0x28
 800536c:	af02      	add	r7, sp, #8
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	4613      	mov	r3, r2
 8005374:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	785b      	ldrb	r3, [r3, #1]
 8005384:	2b01      	cmp	r3, #1
 8005386:	f040 815c 	bne.w	8005642 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d132      	bne.n	80053f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	015a      	lsls	r2, r3, #5
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	4413      	add	r3, r2
 800539a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	0151      	lsls	r1, r2, #5
 80053a4:	69fa      	ldr	r2, [r7, #28]
 80053a6:	440a      	add	r2, r1
 80053a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	015a      	lsls	r2, r3, #5
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	4413      	add	r3, r2
 80053be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	0151      	lsls	r1, r2, #5
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	440a      	add	r2, r1
 80053cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	0151      	lsls	r1, r2, #5
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	440a      	add	r2, r1
 80053ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f0:	0cdb      	lsrs	r3, r3, #19
 80053f2:	04db      	lsls	r3, r3, #19
 80053f4:	6113      	str	r3, [r2, #16]
 80053f6:	e074      	b.n	80054e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	0151      	lsls	r1, r2, #5
 800540a:	69fa      	ldr	r2, [r7, #28]
 800540c:	440a      	add	r2, r1
 800540e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005412:	0cdb      	lsrs	r3, r3, #19
 8005414:	04db      	lsls	r3, r3, #19
 8005416:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	4413      	add	r3, r2
 8005420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	69ba      	ldr	r2, [r7, #24]
 8005428:	0151      	lsls	r1, r2, #5
 800542a:	69fa      	ldr	r2, [r7, #28]
 800542c:	440a      	add	r2, r1
 800542e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005432:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005436:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800543a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	015a      	lsls	r2, r3, #5
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	4413      	add	r3, r2
 8005444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005448:	691a      	ldr	r2, [r3, #16]
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	6959      	ldr	r1, [r3, #20]
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	440b      	add	r3, r1
 8005454:	1e59      	subs	r1, r3, #1
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	fbb1 f3f3 	udiv	r3, r1, r3
 800545e:	04d9      	lsls	r1, r3, #19
 8005460:	4b9d      	ldr	r3, [pc, #628]	; (80056d8 <USB_EPStartXfer+0x370>)
 8005462:	400b      	ands	r3, r1
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	0148      	lsls	r0, r1, #5
 8005468:	69f9      	ldr	r1, [r7, #28]
 800546a:	4401      	add	r1, r0
 800546c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005470:	4313      	orrs	r3, r2
 8005472:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548a:	69b9      	ldr	r1, [r7, #24]
 800548c:	0148      	lsls	r0, r1, #5
 800548e:	69f9      	ldr	r1, [r7, #28]
 8005490:	4401      	add	r1, r0
 8005492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005496:	4313      	orrs	r3, r2
 8005498:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	78db      	ldrb	r3, [r3, #3]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d11f      	bne.n	80054e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	015a      	lsls	r2, r3, #5
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	0151      	lsls	r1, r2, #5
 80054b4:	69fa      	ldr	r2, [r7, #28]
 80054b6:	440a      	add	r2, r1
 80054b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	015a      	lsls	r2, r3, #5
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	4413      	add	r3, r2
 80054ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d14b      	bne.n	8005580 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d009      	beq.n	8005504 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	461a      	mov	r2, r3
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	78db      	ldrb	r3, [r3, #3]
 8005508:	2b01      	cmp	r3, #1
 800550a:	d128      	bne.n	800555e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005518:	2b00      	cmp	r3, #0
 800551a:	d110      	bne.n	800553e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	015a      	lsls	r2, r3, #5
 8005520:	69fb      	ldr	r3, [r7, #28]
 8005522:	4413      	add	r3, r2
 8005524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	0151      	lsls	r1, r2, #5
 800552e:	69fa      	ldr	r2, [r7, #28]
 8005530:	440a      	add	r2, r1
 8005532:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005536:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800553a:	6013      	str	r3, [r2, #0]
 800553c:	e00f      	b.n	800555e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	69ba      	ldr	r2, [r7, #24]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800555c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800555e:	69bb      	ldr	r3, [r7, #24]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	4413      	add	r3, r2
 8005566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69ba      	ldr	r2, [r7, #24]
 800556e:	0151      	lsls	r1, r2, #5
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	440a      	add	r2, r1
 8005574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005578:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800557c:	6013      	str	r3, [r2, #0]
 800557e:	e12f      	b.n	80057e0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	015a      	lsls	r2, r3, #5
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	4413      	add	r3, r2
 8005588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	69fa      	ldr	r2, [r7, #28]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800559a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800559e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	78db      	ldrb	r3, [r3, #3]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d015      	beq.n	80055d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f000 8117 	beq.w	80057e0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	2101      	movs	r1, #1
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	69f9      	ldr	r1, [r7, #28]
 80055ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055ce:	4313      	orrs	r3, r2
 80055d0:	634b      	str	r3, [r1, #52]	; 0x34
 80055d2:	e105      	b.n	80057e0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055d4:	69fb      	ldr	r3, [r7, #28]
 80055d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d110      	bne.n	8005606 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69ba      	ldr	r2, [r7, #24]
 80055f4:	0151      	lsls	r1, r2, #5
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	440a      	add	r2, r1
 80055fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005602:	6013      	str	r3, [r2, #0]
 8005604:	e00f      	b.n	8005626 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	4413      	add	r3, r2
 800560e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69ba      	ldr	r2, [r7, #24]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	440a      	add	r2, r1
 800561c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005624:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	68d9      	ldr	r1, [r3, #12]
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	781a      	ldrb	r2, [r3, #0]
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	b298      	uxth	r0, r3
 8005634:	79fb      	ldrb	r3, [r7, #7]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	4603      	mov	r3, r0
 800563a:	68f8      	ldr	r0, [r7, #12]
 800563c:	f000 fa2b 	bl	8005a96 <USB_WritePacket>
 8005640:	e0ce      	b.n	80057e0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	69ba      	ldr	r2, [r7, #24]
 8005652:	0151      	lsls	r1, r2, #5
 8005654:	69fa      	ldr	r2, [r7, #28]
 8005656:	440a      	add	r2, r1
 8005658:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800565c:	0cdb      	lsrs	r3, r3, #19
 800565e:	04db      	lsls	r3, r3, #19
 8005660:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800567c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005680:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005684:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d126      	bne.n	80056dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800568e:	69bb      	ldr	r3, [r7, #24]
 8005690:	015a      	lsls	r2, r3, #5
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	4413      	add	r3, r2
 8005696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80056a4:	69b9      	ldr	r1, [r7, #24]
 80056a6:	0148      	lsls	r0, r1, #5
 80056a8:	69f9      	ldr	r1, [r7, #28]
 80056aa:	4401      	add	r1, r0
 80056ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80056b0:	4313      	orrs	r3, r2
 80056b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	69ba      	ldr	r2, [r7, #24]
 80056c4:	0151      	lsls	r1, r2, #5
 80056c6:	69fa      	ldr	r2, [r7, #28]
 80056c8:	440a      	add	r2, r1
 80056ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056d2:	6113      	str	r3, [r2, #16]
 80056d4:	e036      	b.n	8005744 <USB_EPStartXfer+0x3dc>
 80056d6:	bf00      	nop
 80056d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	695a      	ldr	r2, [r3, #20]
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	4413      	add	r3, r2
 80056e6:	1e5a      	subs	r2, r3, #1
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	8afb      	ldrh	r3, [r7, #22]
 8005702:	04d9      	lsls	r1, r3, #19
 8005704:	4b39      	ldr	r3, [pc, #228]	; (80057ec <USB_EPStartXfer+0x484>)
 8005706:	400b      	ands	r3, r1
 8005708:	69b9      	ldr	r1, [r7, #24]
 800570a:	0148      	lsls	r0, r1, #5
 800570c:	69f9      	ldr	r1, [r7, #28]
 800570e:	4401      	add	r1, r0
 8005710:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005714:	4313      	orrs	r3, r2
 8005716:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	4413      	add	r3, r2
 8005720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005724:	691a      	ldr	r2, [r3, #16]
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	8af9      	ldrh	r1, [r7, #22]
 800572c:	fb01 f303 	mul.w	r3, r1, r3
 8005730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005734:	69b9      	ldr	r1, [r7, #24]
 8005736:	0148      	lsls	r0, r1, #5
 8005738:	69f9      	ldr	r1, [r7, #28]
 800573a:	4401      	add	r1, r0
 800573c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005740:	4313      	orrs	r3, r2
 8005742:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	2b01      	cmp	r3, #1
 8005748:	d10d      	bne.n	8005766 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	68d9      	ldr	r1, [r3, #12]
 8005756:	69bb      	ldr	r3, [r7, #24]
 8005758:	015a      	lsls	r2, r3, #5
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	4413      	add	r3, r2
 800575e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005762:	460a      	mov	r2, r1
 8005764:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	78db      	ldrb	r3, [r3, #3]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d128      	bne.n	80057c0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577a:	2b00      	cmp	r3, #0
 800577c:	d110      	bne.n	80057a0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	015a      	lsls	r2, r3, #5
 8005782:	69fb      	ldr	r3, [r7, #28]
 8005784:	4413      	add	r3, r2
 8005786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	69ba      	ldr	r2, [r7, #24]
 800578e:	0151      	lsls	r1, r2, #5
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	440a      	add	r2, r1
 8005794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005798:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800579c:	6013      	str	r3, [r2, #0]
 800579e:	e00f      	b.n	80057c0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80057a0:	69bb      	ldr	r3, [r7, #24]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	69ba      	ldr	r2, [r7, #24]
 80057b0:	0151      	lsls	r1, r2, #5
 80057b2:	69fa      	ldr	r2, [r7, #28]
 80057b4:	440a      	add	r2, r1
 80057b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057be:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	015a      	lsls	r2, r3, #5
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	4413      	add	r3, r2
 80057c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	0151      	lsls	r1, r2, #5
 80057d2:	69fa      	ldr	r2, [r7, #28]
 80057d4:	440a      	add	r2, r1
 80057d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3720      	adds	r7, #32
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	1ff80000 	.word	0x1ff80000

080057f0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b087      	sub	sp, #28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	785b      	ldrb	r3, [r3, #1]
 800580c:	2b01      	cmp	r3, #1
 800580e:	f040 80cd 	bne.w	80059ac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d132      	bne.n	8005880 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	4413      	add	r3, r2
 8005822:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005834:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005838:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800583c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	015a      	lsls	r2, r3, #5
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	4413      	add	r3, r2
 8005846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	697a      	ldr	r2, [r7, #20]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005858:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800585c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	015a      	lsls	r2, r3, #5
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	4413      	add	r3, r2
 8005866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	693a      	ldr	r2, [r7, #16]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	440a      	add	r2, r1
 8005874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005878:	0cdb      	lsrs	r3, r3, #19
 800587a:	04db      	lsls	r3, r3, #19
 800587c:	6113      	str	r3, [r2, #16]
 800587e:	e04e      	b.n	800591e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	015a      	lsls	r2, r3, #5
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	4413      	add	r3, r2
 8005888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	0151      	lsls	r1, r2, #5
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	440a      	add	r2, r1
 8005896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589a:	0cdb      	lsrs	r3, r3, #19
 800589c:	04db      	lsls	r3, r3, #19
 800589e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	015a      	lsls	r2, r3, #5
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4413      	add	r3, r2
 80058a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	0151      	lsls	r1, r2, #5
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	440a      	add	r2, r1
 80058b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058c2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d903      	bls.n	80058d8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	693a      	ldr	r2, [r7, #16]
 80058e8:	0151      	lsls	r1, r2, #5
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	440a      	add	r2, r1
 80058ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	695b      	ldr	r3, [r3, #20]
 800590a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800590e:	6939      	ldr	r1, [r7, #16]
 8005910:	0148      	lsls	r0, r1, #5
 8005912:	6979      	ldr	r1, [r7, #20]
 8005914:	4401      	add	r1, r0
 8005916:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800591a:	4313      	orrs	r3, r2
 800591c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800591e:	79fb      	ldrb	r3, [r7, #7]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d11e      	bne.n	8005962 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005938:	461a      	mov	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	0151      	lsls	r1, r2, #5
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	440a      	add	r2, r1
 8005956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800595a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800595e:	6013      	str	r3, [r2, #0]
 8005960:	e092      	b.n	8005a88 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	693a      	ldr	r2, [r7, #16]
 8005972:	0151      	lsls	r1, r2, #5
 8005974:	697a      	ldr	r2, [r7, #20]
 8005976:	440a      	add	r2, r1
 8005978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800597c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005980:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d07e      	beq.n	8005a88 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	781b      	ldrb	r3, [r3, #0]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	2101      	movs	r1, #1
 800599c:	fa01 f303 	lsl.w	r3, r1, r3
 80059a0:	6979      	ldr	r1, [r7, #20]
 80059a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059a6:	4313      	orrs	r3, r2
 80059a8:	634b      	str	r3, [r1, #52]	; 0x34
 80059aa:	e06d      	b.n	8005a88 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	015a      	lsls	r2, r3, #5
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	4413      	add	r3, r2
 80059b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059b8:	691b      	ldr	r3, [r3, #16]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	0151      	lsls	r1, r2, #5
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	440a      	add	r2, r1
 80059c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059c6:	0cdb      	lsrs	r3, r3, #19
 80059c8:	04db      	lsls	r3, r3, #19
 80059ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	015a      	lsls	r2, r3, #5
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	4413      	add	r3, r2
 80059d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	0151      	lsls	r1, r2, #5
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	440a      	add	r2, r1
 80059e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059ee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	695b      	ldr	r3, [r3, #20]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d003      	beq.n	8005a00 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	689a      	ldr	r2, [r3, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	691a      	ldr	r2, [r3, #16]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a36:	6939      	ldr	r1, [r7, #16]
 8005a38:	0148      	lsls	r0, r1, #5
 8005a3a:	6979      	ldr	r1, [r7, #20]
 8005a3c:	4401      	add	r1, r0
 8005a3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a42:	4313      	orrs	r3, r2
 8005a44:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d10d      	bne.n	8005a68 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d009      	beq.n	8005a68 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	68d9      	ldr	r1, [r3, #12]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	015a      	lsls	r2, r3, #5
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	4413      	add	r3, r2
 8005a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a64:	460a      	mov	r2, r1
 8005a66:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	015a      	lsls	r2, r3, #5
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	4413      	add	r3, r2
 8005a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	0151      	lsls	r1, r2, #5
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	440a      	add	r2, r1
 8005a7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a88:	2300      	movs	r3, #0
}
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	371c      	adds	r7, #28
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b089      	sub	sp, #36	; 0x24
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	60f8      	str	r0, [r7, #12]
 8005a9e:	60b9      	str	r1, [r7, #8]
 8005aa0:	4611      	mov	r1, r2
 8005aa2:	461a      	mov	r2, r3
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	71fb      	strb	r3, [r7, #7]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005ab4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11a      	bne.n	8005af2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005abc:	88bb      	ldrh	r3, [r7, #4]
 8005abe:	3303      	adds	r3, #3
 8005ac0:	089b      	lsrs	r3, r3, #2
 8005ac2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e00f      	b.n	8005aea <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	031a      	lsls	r2, r3, #12
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	61bb      	str	r3, [r7, #24]
 8005aea:	69ba      	ldr	r2, [r7, #24]
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	d3eb      	bcc.n	8005aca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3724      	adds	r7, #36	; 0x24
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b089      	sub	sp, #36	; 0x24
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005b16:	88fb      	ldrh	r3, [r7, #6]
 8005b18:	3303      	adds	r3, #3
 8005b1a:	089b      	lsrs	r3, r3, #2
 8005b1c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e00b      	b.n	8005b3c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	69fb      	ldr	r3, [r7, #28]
 8005b2e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	3304      	adds	r3, #4
 8005b34:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	69ba      	ldr	r2, [r7, #24]
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d3ef      	bcc.n	8005b24 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8005b44:	69fb      	ldr	r3, [r7, #28]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3724      	adds	r7, #36	; 0x24
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr

08005b52 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]
 8005b5a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	785b      	ldrb	r3, [r3, #1]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d12c      	bne.n	8005bc8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	015a      	lsls	r2, r3, #5
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4413      	add	r3, r2
 8005b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db12      	blt.n	8005ba6 <USB_EPSetStall+0x54>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00f      	beq.n	8005ba6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68ba      	ldr	r2, [r7, #8]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ba0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005ba4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005bc4:	6013      	str	r3, [r2, #0]
 8005bc6:	e02b      	b.n	8005c20 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	db12      	blt.n	8005c00 <USB_EPSetStall+0xae>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00f      	beq.n	8005c00 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	015a      	lsls	r2, r3, #5
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	0151      	lsls	r1, r2, #5
 8005bf2:	68fa      	ldr	r2, [r7, #12]
 8005bf4:	440a      	add	r2, r1
 8005bf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005bfe:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	015a      	lsls	r2, r3, #5
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	4413      	add	r3, r2
 8005c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	0151      	lsls	r1, r2, #5
 8005c12:	68fa      	ldr	r2, [r7, #12]
 8005c14:	440a      	add	r2, r1
 8005c16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	785b      	ldrb	r3, [r3, #1]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d128      	bne.n	8005c9c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	015a      	lsls	r2, r3, #5
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	4413      	add	r3, r2
 8005c52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68ba      	ldr	r2, [r7, #8]
 8005c5a:	0151      	lsls	r1, r2, #5
 8005c5c:	68fa      	ldr	r2, [r7, #12]
 8005c5e:	440a      	add	r2, r1
 8005c60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d003      	beq.n	8005c7a <USB_EPClearStall+0x4c>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	78db      	ldrb	r3, [r3, #3]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d138      	bne.n	8005cec <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68ba      	ldr	r2, [r7, #8]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	68fa      	ldr	r2, [r7, #12]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c98:	6013      	str	r3, [r2, #0]
 8005c9a:	e027      	b.n	8005cec <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	0151      	lsls	r1, r2, #5
 8005cae:	68fa      	ldr	r2, [r7, #12]
 8005cb0:	440a      	add	r2, r1
 8005cb2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	78db      	ldrb	r3, [r3, #3]
 8005cc0:	2b03      	cmp	r3, #3
 8005cc2:	d003      	beq.n	8005ccc <USB_EPClearStall+0x9e>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	78db      	ldrb	r3, [r3, #3]
 8005cc8:	2b02      	cmp	r3, #2
 8005cca:	d10f      	bne.n	8005cec <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	015a      	lsls	r2, r3, #5
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	0151      	lsls	r1, r2, #5
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	440a      	add	r2, r1
 8005ce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cea:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
 8005d02:	460b      	mov	r3, r1
 8005d04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d18:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d1c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	78fb      	ldrb	r3, [r7, #3]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005d2e:	68f9      	ldr	r1, [r7, #12]
 8005d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d34:	4313      	orrs	r3, r2
 8005d36:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d44:	4770      	bx	lr

08005d46 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d46:	b480      	push	{r7}
 8005d48:	b085      	sub	sp, #20
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d60:	f023 0303 	bic.w	r3, r3, #3
 8005d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	68fa      	ldr	r2, [r7, #12]
 8005d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d74:	f023 0302 	bic.w	r3, r3, #2
 8005d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68fa      	ldr	r2, [r7, #12]
 8005d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db6:	f043 0302 	orr.w	r3, r3, #2
 8005dba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005dbc:	2300      	movs	r3, #0
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3714      	adds	r7, #20
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr

08005dca <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005dca:	b480      	push	{r7}
 8005dcc:	b085      	sub	sp, #20
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4013      	ands	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005de2:	68fb      	ldr	r3, [r7, #12]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3714      	adds	r7, #20
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	68ba      	ldr	r2, [r7, #8]
 8005e10:	4013      	ands	r3, r2
 8005e12:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	0c1b      	lsrs	r3, r3, #16
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e40:	69db      	ldr	r3, [r3, #28]
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	b29b      	uxth	r3, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	460b      	mov	r3, r1
 8005e62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	4013      	ands	r3, r2
 8005e84:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005e86:	68bb      	ldr	r3, [r7, #8]
}
 8005e88:	4618      	mov	r0, r3
 8005e8a:	3714      	adds	r7, #20
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr

08005e94 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f003 030f 	and.w	r3, r3, #15
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ec4:	01db      	lsls	r3, r3, #7
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ece:	78fb      	ldrb	r3, [r7, #3]
 8005ed0:	015a      	lsls	r2, r3, #5
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	4013      	ands	r3, r2
 8005ee0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ee2:	68bb      	ldr	r3, [r7, #8]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	f003 0301 	and.w	r3, r3, #1
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f26:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f2a:	f023 0307 	bic.w	r3, r3, #7
 8005f2e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f42:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b087      	sub	sp, #28
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	460b      	mov	r3, r1
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	333c      	adds	r3, #60	; 0x3c
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4a26      	ldr	r2, [pc, #152]	; (800600c <USB_EP0_OutStart+0xb8>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d90a      	bls.n	8005f8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f84:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f88:	d101      	bne.n	8005f8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	e037      	b.n	8005ffe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f94:	461a      	mov	r2, r3
 8005f96:	2300      	movs	r3, #0
 8005f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	697a      	ldr	r2, [r7, #20]
 8005fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fbc:	f043 0318 	orr.w	r3, r3, #24
 8005fc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	697a      	ldr	r2, [r7, #20]
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fd0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005fd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005fd6:	7afb      	ldrb	r3, [r7, #11]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10f      	bne.n	8005ffc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ff6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005ffa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	371c      	adds	r7, #28
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	4f54300a 	.word	0x4f54300a

08006010 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	3301      	adds	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <USB_CoreReset+0x64>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d901      	bls.n	800602e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e01b      	b.n	8006066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	2b00      	cmp	r3, #0
 8006034:	daf2      	bge.n	800601c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	f043 0201 	orr.w	r2, r3, #1
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3301      	adds	r3, #1
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4a09      	ldr	r2, [pc, #36]	; (8006074 <USB_CoreReset+0x64>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d901      	bls.n	8006058 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e006      	b.n	8006066 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b01      	cmp	r3, #1
 8006062:	d0f0      	beq.n	8006046 <USB_CoreReset+0x36>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	00030d40 	.word	0x00030d40

08006078 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8006084:	2024      	movs	r0, #36	; 0x24
 8006086:	f001 fffb 	bl	8008080 <USBD_static_malloc>
 800608a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <USBD_CUSTOM_HID_Init+0x26>
  {
    pdev->pClassData = NULL;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800609a:	2302      	movs	r3, #2
 800609c:	e039      	b.n	8006112 <USBD_CUSTOM_HID_Init+0x9a>
  }

  pdev->pClassData = (void *)hhid;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	7c1b      	ldrb	r3, [r3, #16]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d107      	bne.n	80060be <USBD_CUSTOM_HID_Init+0x46>
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2205      	movs	r2, #5
 80060b2:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2205      	movs	r2, #5
 80060b8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 80060bc:	e006      	b.n	80060cc <USBD_CUSTOM_HID_Init+0x54>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2205      	movs	r2, #5
 80060c2:	875a      	strh	r2, [r3, #58]	; 0x3a
    pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2205      	movs	r2, #5
 80060c8:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80060cc:	2302      	movs	r3, #2
 80060ce:	2203      	movs	r2, #3
 80060d0:	2181      	movs	r1, #129	; 0x81
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f001 fec3 	bl	8007e5e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2201      	movs	r2, #1
 80060dc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80060de:	2302      	movs	r3, #2
 80060e0:	2203      	movs	r2, #3
 80060e2:	2101      	movs	r1, #1
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 feba 	bl	8007e5e <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  hhid->state = CUSTOM_HID_IDLE;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 2020 	strb.w	r2, [r3, #32]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8006104:	68fa      	ldr	r2, [r7, #12]
 8006106:	2310      	movs	r3, #16
 8006108:	2101      	movs	r1, #1
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f001 ff96 	bl	800803c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006110:	2300      	movs	r3, #0
}
 8006112:	4618      	mov	r0, r3
 8006114:	3710      	adds	r7, #16
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8006126:	2181      	movs	r1, #129	; 0x81
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f001 febe 	bl	8007eaa <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	871a      	strh	r2, [r3, #56]	; 0x38
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].bInterval = 0U;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	875a      	strh	r2, [r3, #58]	; 0x3a

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800613a:	2101      	movs	r1, #1
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f001 feb4 	bl	8007eaa <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].bInterval = 0U;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* Free allocated memory */
  if (pdev->pClassData != NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006158:	2b00      	cmp	r3, #0
 800615a:	d00e      	beq.n	800617a <USBD_CUSTOM_HID_DeInit+0x60>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800616c:	4618      	mov	r0, r3
 800616e:	f001 ff95 	bl	800809c <USBD_static_free>
    pdev->pClassData = NULL;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006194:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006196:	2300      	movs	r3, #0
 8006198:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800619e:	2300      	movs	r3, #0
 80061a0:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 80061a2:	2300      	movs	r3, #0
 80061a4:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <USBD_CUSTOM_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80061ac:	2303      	movs	r3, #3
 80061ae:	e0ed      	b.n	800638c <USBD_CUSTOM_HID_Setup+0x208>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	781b      	ldrb	r3, [r3, #0]
 80061b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d052      	beq.n	8006262 <USBD_CUSTOM_HID_Setup+0xde>
 80061bc:	2b20      	cmp	r3, #32
 80061be:	f040 80dd 	bne.w	800637c <USBD_CUSTOM_HID_Setup+0x1f8>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	785b      	ldrb	r3, [r3, #1]
 80061c6:	3b02      	subs	r3, #2
 80061c8:	2b09      	cmp	r3, #9
 80061ca:	d842      	bhi.n	8006252 <USBD_CUSTOM_HID_Setup+0xce>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <USBD_CUSTOM_HID_Setup+0x50>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	0800622d 	.word	0x0800622d
 80061d8:	0800620b 	.word	0x0800620b
 80061dc:	08006253 	.word	0x08006253
 80061e0:	08006253 	.word	0x08006253
 80061e4:	08006253 	.word	0x08006253
 80061e8:	08006253 	.word	0x08006253
 80061ec:	08006253 	.word	0x08006253
 80061f0:	0800623d 	.word	0x0800623d
 80061f4:	0800621b 	.word	0x0800621b
 80061f8:	080061fd 	.word	0x080061fd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	885b      	ldrh	r3, [r3, #2]
 8006200:	b2db      	uxtb	r3, r3
 8006202:	461a      	mov	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	611a      	str	r2, [r3, #16]
          break;
 8006208:	e02a      	b.n	8006260 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	3310      	adds	r3, #16
 800620e:	2201      	movs	r2, #1
 8006210:	4619      	mov	r1, r3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fa9d 	bl	8007752 <USBD_CtlSendData>
          break;
 8006218:	e022      	b.n	8006260 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	885b      	ldrh	r3, [r3, #2]
 800621e:	0a1b      	lsrs	r3, r3, #8
 8006220:	b29b      	uxth	r3, r3
 8006222:	b2db      	uxtb	r3, r3
 8006224:	461a      	mov	r2, r3
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	615a      	str	r2, [r3, #20]
          break;
 800622a:	e019      	b.n	8006260 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	3314      	adds	r3, #20
 8006230:	2201      	movs	r2, #1
 8006232:	4619      	mov	r1, r3
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f001 fa8c 	bl	8007752 <USBD_CtlSendData>
          break;
 800623a:	e011      	b.n	8006260 <USBD_CUSTOM_HID_Setup+0xdc>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	2201      	movs	r2, #1
 8006240:	61da      	str	r2, [r3, #28]
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8006242:	6939      	ldr	r1, [r7, #16]
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	88db      	ldrh	r3, [r3, #6]
 8006248:	461a      	mov	r2, r3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f001 faad 	bl	80077aa <USBD_CtlPrepareRx>
          break;
 8006250:	e006      	b.n	8006260 <USBD_CUSTOM_HID_Setup+0xdc>

        default:
          USBD_CtlError(pdev, req);
 8006252:	6839      	ldr	r1, [r7, #0]
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f001 fa0b 	bl	8007670 <USBD_CtlError>
          ret = USBD_FAIL;
 800625a:	2303      	movs	r3, #3
 800625c:	75fb      	strb	r3, [r7, #23]
          break;
 800625e:	bf00      	nop
      }
      break;
 8006260:	e093      	b.n	800638a <USBD_CUSTOM_HID_Setup+0x206>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	785b      	ldrb	r3, [r3, #1]
 8006266:	2b0b      	cmp	r3, #11
 8006268:	d87f      	bhi.n	800636a <USBD_CUSTOM_HID_Setup+0x1e6>
 800626a:	a201      	add	r2, pc, #4	; (adr r2, 8006270 <USBD_CUSTOM_HID_Setup+0xec>)
 800626c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006270:	080062a1 	.word	0x080062a1
 8006274:	08006379 	.word	0x08006379
 8006278:	0800636b 	.word	0x0800636b
 800627c:	0800636b 	.word	0x0800636b
 8006280:	0800636b 	.word	0x0800636b
 8006284:	0800636b 	.word	0x0800636b
 8006288:	080062cb 	.word	0x080062cb
 800628c:	0800636b 	.word	0x0800636b
 8006290:	0800636b 	.word	0x0800636b
 8006294:	0800636b 	.word	0x0800636b
 8006298:	08006319 	.word	0x08006319
 800629c:	08006343 	.word	0x08006343
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b03      	cmp	r3, #3
 80062aa:	d107      	bne.n	80062bc <USBD_CUSTOM_HID_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80062ac:	f107 030e 	add.w	r3, r7, #14
 80062b0:	2202      	movs	r2, #2
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f001 fa4c 	bl	8007752 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80062ba:	e05e      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f001 f9d6 	bl	8007670 <USBD_CtlError>
            ret = USBD_FAIL;
 80062c4:	2303      	movs	r3, #3
 80062c6:	75fb      	strb	r3, [r7, #23]
          break;
 80062c8:	e057      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	885b      	ldrh	r3, [r3, #2]
 80062ce:	0a1b      	lsrs	r3, r3, #8
 80062d0:	b29b      	uxth	r3, r3
 80062d2:	2b22      	cmp	r3, #34	; 0x22
 80062d4:	d10b      	bne.n	80062ee <USBD_CUSTOM_HID_Setup+0x16a>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	88db      	ldrh	r3, [r3, #6]
 80062da:	2b16      	cmp	r3, #22
 80062dc:	bf28      	it	cs
 80062de:	2316      	movcs	r3, #22
 80062e0:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	e00d      	b.n	800630a <USBD_CUSTOM_HID_Setup+0x186>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	885b      	ldrh	r3, [r3, #2]
 80062f2:	0a1b      	lsrs	r3, r3, #8
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	2b21      	cmp	r3, #33	; 0x21
 80062f8:	d107      	bne.n	800630a <USBD_CUSTOM_HID_Setup+0x186>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80062fa:	4b26      	ldr	r3, [pc, #152]	; (8006394 <USBD_CUSTOM_HID_Setup+0x210>)
 80062fc:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	88db      	ldrh	r3, [r3, #6]
 8006302:	2b09      	cmp	r3, #9
 8006304:	bf28      	it	cs
 8006306:	2309      	movcs	r3, #9
 8006308:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 800630a:	8bfb      	ldrh	r3, [r7, #30]
 800630c:	461a      	mov	r2, r3
 800630e:	69b9      	ldr	r1, [r7, #24]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f001 fa1e 	bl	8007752 <USBD_CtlSendData>
          break;
 8006316:	e030      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800631e:	b2db      	uxtb	r3, r3
 8006320:	2b03      	cmp	r3, #3
 8006322:	d107      	bne.n	8006334 <USBD_CUSTOM_HID_Setup+0x1b0>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	3318      	adds	r3, #24
 8006328:	2201      	movs	r2, #1
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f001 fa10 	bl	8007752 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006332:	e022      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f001 f99a 	bl	8007670 <USBD_CtlError>
            ret = USBD_FAIL;
 800633c:	2303      	movs	r3, #3
 800633e:	75fb      	strb	r3, [r7, #23]
          break;
 8006340:	e01b      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b03      	cmp	r3, #3
 800634c:	d106      	bne.n	800635c <USBD_CUSTOM_HID_Setup+0x1d8>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	885b      	ldrh	r3, [r3, #2]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	461a      	mov	r2, r3
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	619a      	str	r2, [r3, #24]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800635a:	e00e      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>
            USBD_CtlError(pdev, req);
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f001 f986 	bl	8007670 <USBD_CtlError>
            ret = USBD_FAIL;
 8006364:	2303      	movs	r3, #3
 8006366:	75fb      	strb	r3, [r7, #23]
          break;
 8006368:	e007      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 f97f 	bl	8007670 <USBD_CtlError>
          ret = USBD_FAIL;
 8006372:	2303      	movs	r3, #3
 8006374:	75fb      	strb	r3, [r7, #23]
          break;
 8006376:	e000      	b.n	800637a <USBD_CUSTOM_HID_Setup+0x1f6>
          break;
 8006378:	bf00      	nop
      }
      break;
 800637a:	e006      	b.n	800638a <USBD_CUSTOM_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 800637c:	6839      	ldr	r1, [r7, #0]
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f001 f976 	bl	8007670 <USBD_CtlError>
      ret = USBD_FAIL;
 8006384:	2303      	movs	r3, #3
 8006386:	75fb      	strb	r3, [r7, #23]
      break;
 8006388:	bf00      	nop
  }
  return (uint8_t)ret;
 800638a:	7dfb      	ldrb	r3, [r7, #23]
}
 800638c:	4618      	mov	r0, r3
 800638e:	3720      	adds	r7, #32
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}
 8006394:	200000c8 	.word	0x200000c8

08006398 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4613      	mov	r3, r2
 80063a4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <USBD_CUSTOM_HID_SendReport+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e01c      	b.n	80063ee <USBD_CUSTOM_HID_SendReport+0x56>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063ba:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d111      	bne.n	80063ec <USBD_CUSTOM_HID_SendReport+0x54>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d10a      	bne.n	80063e8 <USBD_CUSTOM_HID_SendReport+0x50>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2020 	strb.w	r2, [r3, #32]
      (void)USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80063da:	88fb      	ldrh	r3, [r7, #6]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	2181      	movs	r1, #129	; 0x81
 80063e0:	68f8      	ldr	r0, [r7, #12]
 80063e2:	f001 fe0a 	bl	8007ffa <USBD_LL_Transmit>
 80063e6:	e001      	b.n	80063ec <USBD_CUSTOM_HID_SendReport+0x54>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e000      	b.n	80063ee <USBD_CUSTOM_HID_SendReport+0x56>
    }
  }
  return (uint8_t)USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3718      	adds	r7, #24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
	...

080063f8 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2229      	movs	r2, #41	; 0x29
 8006404:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgFSDesc;
 8006406:	4b03      	ldr	r3, [pc, #12]	; (8006414 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8006408:	4618      	mov	r0, r3
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20000044 	.word	0x20000044

08006418 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2229      	movs	r2, #41	; 0x29
 8006424:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_CfgHSDesc;
 8006426:	4b03      	ldr	r3, [pc, #12]	; (8006434 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	20000070 	.word	0x20000070

08006438 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2229      	movs	r2, #41	; 0x29
 8006444:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8006446:	4b03      	ldr	r3, [pc, #12]	; (8006454 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	2000009c 	.word	0x2000009c

08006458 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	460b      	mov	r3, r1
 8006462:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800646a:	2200      	movs	r2, #0
 800646c:	f883 2020 	strb.w	r2, [r3, #32]

  return (uint8_t)USBD_OK;
 8006470:	2300      	movs	r3, #0
}
 8006472:	4618      	mov	r0, r3
 8006474:	370c      	adds	r7, #12
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr

0800647e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	460b      	mov	r3, r1
 8006488:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <USBD_CUSTOM_HID_DataOut+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006494:	2303      	movs	r3, #3
 8006496:	e00e      	b.n	80064b6 <USBD_CUSTOM_HID_DataOut+0x38>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800649e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	7810      	ldrb	r0, [r2, #0]
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	7852      	ldrb	r2, [r2, #1]
 80064b0:	4611      	mov	r1, r2
 80064b2:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	3710      	adds	r7, #16
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bd80      	pop	{r7, pc}

080064be <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassData == NULL)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d101      	bne.n	80064d4 <USBD_CUSTOM_HID_ReceivePacket+0x16>
  {
    return (uint8_t)USBD_FAIL;
 80064d0:	2303      	movs	r3, #3
 80064d2:	e00a      	b.n	80064ea <USBD_CUSTOM_HID_ReceivePacket+0x2c>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064da:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	2310      	movs	r3, #16
 80064e0:	2101      	movs	r1, #1
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fdaa 	bl	800803c <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b084      	sub	sp, #16
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006500:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <USBD_CUSTOM_HID_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006508:	2303      	movs	r3, #3
 800650a:	e011      	b.n	8006530 <USBD_CUSTOM_HID_EP0_RxReady+0x3e>
  }

  if (hhid->IsReportAvailable == 1U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d10c      	bne.n	800652e <USBD_CUSTOM_HID_EP0_RxReady+0x3c>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	7810      	ldrb	r0, [r2, #0]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	7852      	ldrb	r2, [r2, #1]
 8006524:	4611      	mov	r1, r2
 8006526:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	61da      	str	r2, [r3, #28]
  }

  return (uint8_t)USBD_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006538:	b480      	push	{r7}
 800653a:	b083      	sub	sp, #12
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	220a      	movs	r2, #10
 8006544:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006546:	4b03      	ldr	r3, [pc, #12]	; (8006554 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006548:	4618      	mov	r0, r3
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	200000d4 	.word	0x200000d4

08006558 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006568:	2303      	movs	r3, #3
 800656a:	e004      	b.n	8006576 <USBD_CUSTOM_HID_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006574:	2300      	movs	r3, #0
}
 8006576:	4618      	mov	r0, r3
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	60f8      	str	r0, [r7, #12]
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	4613      	mov	r3, r2
 800658e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006596:	2303      	movs	r3, #3
 8006598:	e01f      	b.n	80065da <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	68ba      	ldr	r2, [r7, #8]
 80065bc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	79fa      	ldrb	r2, [r7, #7]
 80065cc:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	f001 fbde 	bl	8007d90 <USBD_LL_Init>
 80065d4:	4603      	mov	r3, r0
 80065d6:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3718      	adds	r7, #24
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ec:	2300      	movs	r3, #0
 80065ee:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80065f6:	2303      	movs	r3, #3
 80065f8:	e016      	b.n	8006628 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	683a      	ldr	r2, [r7, #0]
 80065fe:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00b      	beq.n	8006626 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f107 020e 	add.w	r2, r7, #14
 800661a:	4610      	mov	r0, r2
 800661c:	4798      	blx	r3
 800661e:	4602      	mov	r2, r0
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f001 fbf5 	bl	8007e28 <USBD_LL_Start>
 800663e:	4603      	mov	r3, r0
}
 8006640:	4618      	mov	r0, r3
 8006642:	3708      	adds	r7, #8
 8006644:	46bd      	mov	sp, r7
 8006646:	bd80      	pop	{r7, pc}

08006648 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b084      	sub	sp, #16
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	460b      	mov	r3, r1
 8006668:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800666a:	2303      	movs	r3, #3
 800666c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	78fa      	ldrb	r2, [r7, #3]
 8006682:	4611      	mov	r1, r2
 8006684:	6878      	ldr	r0, [r7, #4]
 8006686:	4798      	blx	r3
 8006688:	4603      	mov	r3, r0
 800668a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800668c:	7bfb      	ldrb	r3, [r7, #15]
}
 800668e:	4618      	mov	r0, r3
 8006690:	3710      	adds	r7, #16
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b082      	sub	sp, #8
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	460b      	mov	r3, r1
 80066a0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d007      	beq.n	80066bc <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	78fa      	ldrb	r2, [r7, #3]
 80066b6:	4611      	mov	r1, r2
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	4798      	blx	r3
  }

  return USBD_OK;
 80066bc:	2300      	movs	r3, #0
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3708      	adds	r7, #8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066c6:	b580      	push	{r7, lr}
 80066c8:	b084      	sub	sp, #16
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066d6:	6839      	ldr	r1, [r7, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f000 ff8f 	bl	80075fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80066ec:	461a      	mov	r2, r3
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80066fa:	f003 031f 	and.w	r3, r3, #31
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d01a      	beq.n	8006738 <USBD_LL_SetupStage+0x72>
 8006702:	2b02      	cmp	r3, #2
 8006704:	d822      	bhi.n	800674c <USBD_LL_SetupStage+0x86>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <USBD_LL_SetupStage+0x4a>
 800670a:	2b01      	cmp	r3, #1
 800670c:	d00a      	beq.n	8006724 <USBD_LL_SetupStage+0x5e>
 800670e:	e01d      	b.n	800674c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fa61 	bl	8006be0 <USBD_StdDevReq>
 800671e:	4603      	mov	r3, r0
 8006720:	73fb      	strb	r3, [r7, #15]
      break;
 8006722:	e020      	b.n	8006766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 fac5 	bl	8006cbc <USBD_StdItfReq>
 8006732:	4603      	mov	r3, r0
 8006734:	73fb      	strb	r3, [r7, #15]
      break;
 8006736:	e016      	b.n	8006766 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800673e:	4619      	mov	r1, r3
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 fb04 	bl	8006d4e <USBD_StdEPReq>
 8006746:	4603      	mov	r3, r0
 8006748:	73fb      	strb	r3, [r7, #15]
      break;
 800674a:	e00c      	b.n	8006766 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006752:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006756:	b2db      	uxtb	r3, r3
 8006758:	4619      	mov	r1, r3
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f001 fbc4 	bl	8007ee8 <USBD_LL_StallEP>
 8006760:	4603      	mov	r3, r0
 8006762:	73fb      	strb	r3, [r7, #15]
      break;
 8006764:	bf00      	nop
  }

  return ret;
 8006766:	7bfb      	ldrb	r3, [r7, #15]
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	460b      	mov	r3, r1
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800677e:	7afb      	ldrb	r3, [r7, #11]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d138      	bne.n	80067f6 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800678a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006792:	2b03      	cmp	r3, #3
 8006794:	d14a      	bne.n	800682c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d913      	bls.n	80067ca <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	1ad2      	subs	r2, r2, r3
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067b0:	693b      	ldr	r3, [r7, #16]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	4293      	cmp	r3, r2
 80067ba:	bf28      	it	cs
 80067bc:	4613      	movcs	r3, r2
 80067be:	461a      	mov	r2, r3
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	68f8      	ldr	r0, [r7, #12]
 80067c4:	f001 f80e 	bl	80077e4 <USBD_CtlContinueRx>
 80067c8:	e030      	b.n	800682c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d10b      	bne.n	80067ee <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d005      	beq.n	80067ee <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	68f8      	ldr	r0, [r7, #12]
 80067ec:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f001 f809 	bl	8007806 <USBD_CtlSendStatus>
 80067f4:	e01a      	b.n	800682c <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b03      	cmp	r3, #3
 8006800:	d114      	bne.n	800682c <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	7afa      	ldrb	r2, [r7, #11]
 8006818:	4611      	mov	r1, r2
 800681a:	68f8      	ldr	r0, [r7, #12]
 800681c:	4798      	blx	r3
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 8006828:	7dfb      	ldrb	r3, [r7, #23]
 800682a:	e000      	b.n	800682e <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3718      	adds	r7, #24
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b086      	sub	sp, #24
 800683a:	af00      	add	r7, sp, #0
 800683c:	60f8      	str	r0, [r7, #12]
 800683e:	460b      	mov	r3, r1
 8006840:	607a      	str	r2, [r7, #4]
 8006842:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8006844:	7afb      	ldrb	r3, [r7, #11]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d16b      	bne.n	8006922 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3314      	adds	r3, #20
 800684e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006856:	2b02      	cmp	r3, #2
 8006858:	d156      	bne.n	8006908 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	68db      	ldr	r3, [r3, #12]
 8006862:	429a      	cmp	r2, r3
 8006864:	d914      	bls.n	8006890 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	1ad2      	subs	r2, r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	461a      	mov	r2, r3
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 ff83 	bl	8007788 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006882:	2300      	movs	r3, #0
 8006884:	2200      	movs	r2, #0
 8006886:	2100      	movs	r1, #0
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f001 fbd7 	bl	800803c <USBD_LL_PrepareReceive>
 800688e:	e03b      	b.n	8006908 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	68da      	ldr	r2, [r3, #12]
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	d11c      	bne.n	80068d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d316      	bcc.n	80068d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	685a      	ldr	r2, [r3, #4]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d20f      	bcs.n	80068d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068b6:	2200      	movs	r2, #0
 80068b8:	2100      	movs	r1, #0
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 ff64 	bl	8007788 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068c8:	2300      	movs	r3, #0
 80068ca:	2200      	movs	r2, #0
 80068cc:	2100      	movs	r1, #0
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f001 fbb4 	bl	800803c <USBD_LL_PrepareReceive>
 80068d4:	e018      	b.n	8006908 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d10b      	bne.n	80068fa <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d005      	beq.n	80068fa <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	68f8      	ldr	r0, [r7, #12]
 80068fe:	f001 faf3 	bl	8007ee8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 ff92 	bl	800782c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800690e:	2b01      	cmp	r3, #1
 8006910:	d122      	bne.n	8006958 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f7ff fe98 	bl	8006648 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006920:	e01a      	b.n	8006958 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d114      	bne.n	8006958 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00e      	beq.n	8006958 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006940:	695b      	ldr	r3, [r3, #20]
 8006942:	7afa      	ldrb	r2, [r7, #11]
 8006944:	4611      	mov	r1, r2
 8006946:	68f8      	ldr	r0, [r7, #12]
 8006948:	4798      	blx	r3
 800694a:	4603      	mov	r3, r0
 800694c:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d001      	beq.n	8006958 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8006954:	7dfb      	ldrb	r3, [r7, #23]
 8006956:	e000      	b.n	800695a <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800698e:	2b00      	cmp	r3, #0
 8006990:	d101      	bne.n	8006996 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8006992:	2303      	movs	r3, #3
 8006994:	e02f      	b.n	80069f6 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00f      	beq.n	80069c0 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6852      	ldr	r2, [r2, #4]
 80069b8:	b2d2      	uxtb	r2, r2
 80069ba:	4611      	mov	r1, r2
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069c0:	2340      	movs	r3, #64	; 0x40
 80069c2:	2200      	movs	r2, #0
 80069c4:	2100      	movs	r1, #0
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f001 fa49 	bl	8007e5e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2240      	movs	r2, #64	; 0x40
 80069d8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069dc:	2340      	movs	r3, #64	; 0x40
 80069de:	2200      	movs	r2, #0
 80069e0:	2180      	movs	r1, #128	; 0x80
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f001 fa3b 	bl	8007e5e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2240      	movs	r2, #64	; 0x40
 80069f2:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80069f4:	2300      	movs	r3, #0
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3708      	adds	r7, #8
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80069fe:	b480      	push	{r7}
 8006a00:	b083      	sub	sp, #12
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	78fa      	ldrb	r2, [r7, #3]
 8006a0e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	370c      	adds	r7, #12
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr

08006a1e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b083      	sub	sp, #12
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2204      	movs	r2, #4
 8006a38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006a3c:	2300      	movs	r3, #0
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr

08006a4a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b04      	cmp	r3, #4
 8006a5c:	d106      	bne.n	8006a6c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	370c      	adds	r7, #12
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b082      	sub	sp, #8
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d101      	bne.n	8006a90 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e012      	b.n	8006ab6 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	d10b      	bne.n	8006ab4 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa2:	69db      	ldr	r3, [r3, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d005      	beq.n	8006ab4 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b082      	sub	sp, #8
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d101      	bne.n	8006ad8 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e014      	b.n	8006b02 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d10d      	bne.n	8006b00 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	4611      	mov	r1, r2
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d101      	bne.n	8006b24 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	e014      	b.n	8006b4e <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d10d      	bne.n	8006b4c <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d007      	beq.n	8006b4c <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b44:	78fa      	ldrb	r2, [r7, #3]
 8006b46:	4611      	mov	r1, r2
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b082      	sub	sp, #8
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	6852      	ldr	r2, [r2, #4]
 8006b92:	b2d2      	uxtb	r2, r2
 8006b94:	4611      	mov	r1, r2
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
  }

  return USBD_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b087      	sub	sp, #28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006bc2:	8a3b      	ldrh	r3, [r7, #16]
 8006bc4:	021b      	lsls	r3, r3, #8
 8006bc6:	b21a      	sxth	r2, r3
 8006bc8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006bcc:	4313      	orrs	r3, r2
 8006bce:	b21b      	sxth	r3, r3
 8006bd0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006bd2:	89fb      	ldrh	r3, [r7, #14]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	371c      	adds	r7, #28
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr

08006be0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bf6:	2b40      	cmp	r3, #64	; 0x40
 8006bf8:	d005      	beq.n	8006c06 <USBD_StdDevReq+0x26>
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d853      	bhi.n	8006ca6 <USBD_StdDevReq+0xc6>
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <USBD_StdDevReq+0x3a>
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d14f      	bne.n	8006ca6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c0c:	689b      	ldr	r3, [r3, #8]
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	73fb      	strb	r3, [r7, #15]
      break;
 8006c18:	e04a      	b.n	8006cb0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	785b      	ldrb	r3, [r3, #1]
 8006c1e:	2b09      	cmp	r3, #9
 8006c20:	d83b      	bhi.n	8006c9a <USBD_StdDevReq+0xba>
 8006c22:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <USBD_StdDevReq+0x48>)
 8006c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c28:	08006c7d 	.word	0x08006c7d
 8006c2c:	08006c91 	.word	0x08006c91
 8006c30:	08006c9b 	.word	0x08006c9b
 8006c34:	08006c87 	.word	0x08006c87
 8006c38:	08006c9b 	.word	0x08006c9b
 8006c3c:	08006c5b 	.word	0x08006c5b
 8006c40:	08006c51 	.word	0x08006c51
 8006c44:	08006c9b 	.word	0x08006c9b
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c65 	.word	0x08006c65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 f9de 	bl	8007014 <USBD_GetDescriptor>
          break;
 8006c58:	e024      	b.n	8006ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fb43 	bl	80072e8 <USBD_SetAddress>
          break;
 8006c62:	e01f      	b.n	8006ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006c64:	6839      	ldr	r1, [r7, #0]
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fb82 	bl	8007370 <USBD_SetConfig>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	73fb      	strb	r3, [r7, #15]
          break;
 8006c70:	e018      	b.n	8006ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006c72:	6839      	ldr	r1, [r7, #0]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fc21 	bl	80074bc <USBD_GetConfig>
          break;
 8006c7a:	e013      	b.n	8006ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 fc52 	bl	8007528 <USBD_GetStatus>
          break;
 8006c84:	e00e      	b.n	8006ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 fc81 	bl	8007590 <USBD_SetFeature>
          break;
 8006c8e:	e009      	b.n	8006ca4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fc90 	bl	80075b8 <USBD_ClrFeature>
          break;
 8006c98:	e004      	b.n	8006ca4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fce7 	bl	8007670 <USBD_CtlError>
          break;
 8006ca2:	bf00      	nop
      }
      break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fce1 	bl	8007670 <USBD_CtlError>
      break;
 8006cae:	bf00      	nop
  }

  return ret;
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3710      	adds	r7, #16
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop

08006cbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b084      	sub	sp, #16
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cd2:	2b40      	cmp	r3, #64	; 0x40
 8006cd4:	d005      	beq.n	8006ce2 <USBD_StdItfReq+0x26>
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d82f      	bhi.n	8006d3a <USBD_StdItfReq+0x7e>
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <USBD_StdItfReq+0x26>
 8006cde:	2b20      	cmp	r3, #32
 8006ce0:	d12b      	bne.n	8006d3a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d81d      	bhi.n	8006d2c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	889b      	ldrh	r3, [r3, #4]
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d813      	bhi.n	8006d22 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	4798      	blx	r3
 8006d08:	4603      	mov	r3, r0
 8006d0a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	88db      	ldrh	r3, [r3, #6]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d110      	bne.n	8006d36 <USBD_StdItfReq+0x7a>
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fd73 	bl	8007806 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006d20:	e009      	b.n	8006d36 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8006d22:	6839      	ldr	r1, [r7, #0]
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fca3 	bl	8007670 <USBD_CtlError>
          break;
 8006d2a:	e004      	b.n	8006d36 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fc9e 	bl	8007670 <USBD_CtlError>
          break;
 8006d34:	e000      	b.n	8006d38 <USBD_StdItfReq+0x7c>
          break;
 8006d36:	bf00      	nop
      }
      break;
 8006d38:	e004      	b.n	8006d44 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8006d3a:	6839      	ldr	r1, [r7, #0]
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fc97 	bl	8007670 <USBD_CtlError>
      break;
 8006d42:	bf00      	nop
  }

  return ret;
 8006d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
 8006d56:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	889b      	ldrh	r3, [r3, #4]
 8006d60:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d6a:	2b40      	cmp	r3, #64	; 0x40
 8006d6c:	d007      	beq.n	8006d7e <USBD_StdEPReq+0x30>
 8006d6e:	2b40      	cmp	r3, #64	; 0x40
 8006d70:	f200 8145 	bhi.w	8006ffe <USBD_StdEPReq+0x2b0>
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d00c      	beq.n	8006d92 <USBD_StdEPReq+0x44>
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	f040 8140 	bne.w	8006ffe <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	4798      	blx	r3
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d90:	e13a      	b.n	8007008 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	785b      	ldrb	r3, [r3, #1]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d007      	beq.n	8006daa <USBD_StdEPReq+0x5c>
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	f300 8129 	bgt.w	8006ff2 <USBD_StdEPReq+0x2a4>
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d07f      	beq.n	8006ea4 <USBD_StdEPReq+0x156>
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d03c      	beq.n	8006e22 <USBD_StdEPReq+0xd4>
 8006da8:	e123      	b.n	8006ff2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006db0:	b2db      	uxtb	r3, r3
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d002      	beq.n	8006dbc <USBD_StdEPReq+0x6e>
 8006db6:	2b03      	cmp	r3, #3
 8006db8:	d016      	beq.n	8006de8 <USBD_StdEPReq+0x9a>
 8006dba:	e02c      	b.n	8006e16 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00d      	beq.n	8006dde <USBD_StdEPReq+0x90>
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b80      	cmp	r3, #128	; 0x80
 8006dc6:	d00a      	beq.n	8006dde <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f001 f88b 	bl	8007ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dd2:	2180      	movs	r1, #128	; 0x80
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f001 f887 	bl	8007ee8 <USBD_LL_StallEP>
 8006dda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ddc:	e020      	b.n	8006e20 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc45 	bl	8007670 <USBD_CtlError>
              break;
 8006de6:	e01b      	b.n	8006e20 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	885b      	ldrh	r3, [r3, #2]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10e      	bne.n	8006e0e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006df0:	7bbb      	ldrb	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00b      	beq.n	8006e0e <USBD_StdEPReq+0xc0>
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b80      	cmp	r3, #128	; 0x80
 8006dfa:	d008      	beq.n	8006e0e <USBD_StdEPReq+0xc0>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	88db      	ldrh	r3, [r3, #6]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d104      	bne.n	8006e0e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	4619      	mov	r1, r3
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f001 f86d 	bl	8007ee8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fcf9 	bl	8007806 <USBD_CtlSendStatus>

              break;
 8006e14:	e004      	b.n	8006e20 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fc29 	bl	8007670 <USBD_CtlError>
              break;
 8006e1e:	bf00      	nop
          }
          break;
 8006e20:	e0ec      	b.n	8006ffc <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d002      	beq.n	8006e34 <USBD_StdEPReq+0xe6>
 8006e2e:	2b03      	cmp	r3, #3
 8006e30:	d016      	beq.n	8006e60 <USBD_StdEPReq+0x112>
 8006e32:	e030      	b.n	8006e96 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <USBD_StdEPReq+0x108>
 8006e3a:	7bbb      	ldrb	r3, [r7, #14]
 8006e3c:	2b80      	cmp	r3, #128	; 0x80
 8006e3e:	d00a      	beq.n	8006e56 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e40:	7bbb      	ldrb	r3, [r7, #14]
 8006e42:	4619      	mov	r1, r3
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 f84f 	bl	8007ee8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e4a:	2180      	movs	r1, #128	; 0x80
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f001 f84b 	bl	8007ee8 <USBD_LL_StallEP>
 8006e52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e54:	e025      	b.n	8006ea2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8006e56:	6839      	ldr	r1, [r7, #0]
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fc09 	bl	8007670 <USBD_CtlError>
              break;
 8006e5e:	e020      	b.n	8006ea2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	885b      	ldrh	r3, [r3, #2]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d11b      	bne.n	8006ea0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d004      	beq.n	8006e7c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f001 f855 	bl	8007f26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fcc2 	bl	8007806 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	4798      	blx	r3
 8006e90:	4603      	mov	r3, r0
 8006e92:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8006e94:	e004      	b.n	8006ea0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8006e96:	6839      	ldr	r1, [r7, #0]
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 fbe9 	bl	8007670 <USBD_CtlError>
              break;
 8006e9e:	e000      	b.n	8006ea2 <USBD_StdEPReq+0x154>
              break;
 8006ea0:	bf00      	nop
          }
          break;
 8006ea2:	e0ab      	b.n	8006ffc <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d002      	beq.n	8006eb6 <USBD_StdEPReq+0x168>
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d032      	beq.n	8006f1a <USBD_StdEPReq+0x1cc>
 8006eb4:	e097      	b.n	8006fe6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d007      	beq.n	8006ecc <USBD_StdEPReq+0x17e>
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d004      	beq.n	8006ecc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fbd3 	bl	8007670 <USBD_CtlError>
                break;
 8006eca:	e091      	b.n	8006ff0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ecc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	da0b      	bge.n	8006eec <USBD_StdEPReq+0x19e>
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
 8006ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eda:	4613      	mov	r3, r2
 8006edc:	009b      	lsls	r3, r3, #2
 8006ede:	4413      	add	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	3310      	adds	r3, #16
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	4413      	add	r3, r2
 8006ee8:	3304      	adds	r3, #4
 8006eea:	e00b      	b.n	8006f04 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	4413      	add	r3, r2
 8006f02:	3304      	adds	r3, #4
 8006f04:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	4619      	mov	r1, r3
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 fc1d 	bl	8007752 <USBD_CtlSendData>
              break;
 8006f18:	e06a      	b.n	8006ff0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f1a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da11      	bge.n	8006f46 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	f003 020f 	and.w	r2, r3, #15
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	440b      	add	r3, r1
 8006f34:	3324      	adds	r3, #36	; 0x24
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d117      	bne.n	8006f6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f3c:	6839      	ldr	r1, [r7, #0]
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 fb96 	bl	8007670 <USBD_CtlError>
                  break;
 8006f44:	e054      	b.n	8006ff0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	f003 020f 	and.w	r2, r3, #15
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	4413      	add	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	440b      	add	r3, r1
 8006f58:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d104      	bne.n	8006f6c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fb83 	bl	8007670 <USBD_CtlError>
                  break;
 8006f6a:	e041      	b.n	8006ff0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	da0b      	bge.n	8006f8c <USBD_StdEPReq+0x23e>
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	3310      	adds	r3, #16
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	3304      	adds	r3, #4
 8006f8a:	e00b      	b.n	8006fa4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3304      	adds	r3, #4
 8006fa4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fa6:	7bbb      	ldrb	r3, [r7, #14]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <USBD_StdEPReq+0x264>
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d103      	bne.n	8006fba <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e00e      	b.n	8006fd8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fba:	7bbb      	ldrb	r3, [r7, #14]
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 ffd0 	bl	8007f64 <USBD_LL_IsStallEP>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d003      	beq.n	8006fd2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e002      	b.n	8006fd8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	4619      	mov	r1, r3
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 fbb7 	bl	8007752 <USBD_CtlSendData>
              break;
 8006fe4:	e004      	b.n	8006ff0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8006fe6:	6839      	ldr	r1, [r7, #0]
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 fb41 	bl	8007670 <USBD_CtlError>
              break;
 8006fee:	bf00      	nop
          }
          break;
 8006ff0:	e004      	b.n	8006ffc <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 fb3b 	bl	8007670 <USBD_CtlError>
          break;
 8006ffa:	bf00      	nop
      }
      break;
 8006ffc:	e004      	b.n	8007008 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006ffe:	6839      	ldr	r1, [r7, #0]
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f000 fb35 	bl	8007670 <USBD_CtlError>
      break;
 8007006:	bf00      	nop
  }

  return ret;
 8007008:	7bfb      	ldrb	r3, [r7, #15]
}
 800700a:	4618      	mov	r0, r3
 800700c:	3710      	adds	r7, #16
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
	...

08007014 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800701e:	2300      	movs	r3, #0
 8007020:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	885b      	ldrh	r3, [r3, #2]
 800702e:	0a1b      	lsrs	r3, r3, #8
 8007030:	b29b      	uxth	r3, r3
 8007032:	3b01      	subs	r3, #1
 8007034:	2b06      	cmp	r3, #6
 8007036:	f200 8128 	bhi.w	800728a <USBD_GetDescriptor+0x276>
 800703a:	a201      	add	r2, pc, #4	; (adr r2, 8007040 <USBD_GetDescriptor+0x2c>)
 800703c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007040:	0800705d 	.word	0x0800705d
 8007044:	08007075 	.word	0x08007075
 8007048:	080070b5 	.word	0x080070b5
 800704c:	0800728b 	.word	0x0800728b
 8007050:	0800728b 	.word	0x0800728b
 8007054:	0800722b 	.word	0x0800722b
 8007058:	08007257 	.word	0x08007257
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	7c12      	ldrb	r2, [r2, #16]
 8007068:	f107 0108 	add.w	r1, r7, #8
 800706c:	4610      	mov	r0, r2
 800706e:	4798      	blx	r3
 8007070:	60f8      	str	r0, [r7, #12]
      break;
 8007072:	e112      	b.n	800729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	7c1b      	ldrb	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d10d      	bne.n	8007098 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007084:	f107 0208 	add.w	r2, r7, #8
 8007088:	4610      	mov	r0, r2
 800708a:	4798      	blx	r3
 800708c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3301      	adds	r3, #1
 8007092:	2202      	movs	r2, #2
 8007094:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007096:	e100      	b.n	800729a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800709e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a0:	f107 0208 	add.w	r2, r7, #8
 80070a4:	4610      	mov	r0, r2
 80070a6:	4798      	blx	r3
 80070a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	3301      	adds	r3, #1
 80070ae:	2202      	movs	r2, #2
 80070b0:	701a      	strb	r2, [r3, #0]
      break;
 80070b2:	e0f2      	b.n	800729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	885b      	ldrh	r3, [r3, #2]
 80070b8:	b2db      	uxtb	r3, r3
 80070ba:	2b05      	cmp	r3, #5
 80070bc:	f200 80ac 	bhi.w	8007218 <USBD_GetDescriptor+0x204>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <USBD_GetDescriptor+0xb4>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070e1 	.word	0x080070e1
 80070cc:	08007115 	.word	0x08007115
 80070d0:	08007149 	.word	0x08007149
 80070d4:	0800717d 	.word	0x0800717d
 80070d8:	080071b1 	.word	0x080071b1
 80070dc:	080071e5 	.word	0x080071e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d00b      	beq.n	8007104 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	7c12      	ldrb	r2, [r2, #16]
 80070f8:	f107 0108 	add.w	r1, r7, #8
 80070fc:	4610      	mov	r0, r2
 80070fe:	4798      	blx	r3
 8007100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007102:	e091      	b.n	8007228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007104:	6839      	ldr	r1, [r7, #0]
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f000 fab2 	bl	8007670 <USBD_CtlError>
            err++;
 800710c:	7afb      	ldrb	r3, [r7, #11]
 800710e:	3301      	adds	r3, #1
 8007110:	72fb      	strb	r3, [r7, #11]
          break;
 8007112:	e089      	b.n	8007228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00b      	beq.n	8007138 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	7c12      	ldrb	r2, [r2, #16]
 800712c:	f107 0108 	add.w	r1, r7, #8
 8007130:	4610      	mov	r0, r2
 8007132:	4798      	blx	r3
 8007134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007136:	e077      	b.n	8007228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fa98 	bl	8007670 <USBD_CtlError>
            err++;
 8007140:	7afb      	ldrb	r3, [r7, #11]
 8007142:	3301      	adds	r3, #1
 8007144:	72fb      	strb	r3, [r7, #11]
          break;
 8007146:	e06f      	b.n	8007228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	687a      	ldr	r2, [r7, #4]
 800715e:	7c12      	ldrb	r2, [r2, #16]
 8007160:	f107 0108 	add.w	r1, r7, #8
 8007164:	4610      	mov	r0, r2
 8007166:	4798      	blx	r3
 8007168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800716a:	e05d      	b.n	8007228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 fa7e 	bl	8007670 <USBD_CtlError>
            err++;
 8007174:	7afb      	ldrb	r3, [r7, #11]
 8007176:	3301      	adds	r3, #1
 8007178:	72fb      	strb	r3, [r7, #11]
          break;
 800717a:	e055      	b.n	8007228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	691b      	ldr	r3, [r3, #16]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	7c12      	ldrb	r2, [r2, #16]
 8007194:	f107 0108 	add.w	r1, r7, #8
 8007198:	4610      	mov	r0, r2
 800719a:	4798      	blx	r3
 800719c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800719e:	e043      	b.n	8007228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a0:	6839      	ldr	r1, [r7, #0]
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 fa64 	bl	8007670 <USBD_CtlError>
            err++;
 80071a8:	7afb      	ldrb	r3, [r7, #11]
 80071aa:	3301      	adds	r3, #1
 80071ac:	72fb      	strb	r3, [r7, #11]
          break;
 80071ae:	e03b      	b.n	8007228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b6:	695b      	ldr	r3, [r3, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00b      	beq.n	80071d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071c2:	695b      	ldr	r3, [r3, #20]
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	7c12      	ldrb	r2, [r2, #16]
 80071c8:	f107 0108 	add.w	r1, r7, #8
 80071cc:	4610      	mov	r0, r2
 80071ce:	4798      	blx	r3
 80071d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071d2:	e029      	b.n	8007228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fa4a 	bl	8007670 <USBD_CtlError>
            err++;
 80071dc:	7afb      	ldrb	r3, [r7, #11]
 80071de:	3301      	adds	r3, #1
 80071e0:	72fb      	strb	r3, [r7, #11]
          break;
 80071e2:	e021      	b.n	8007228 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ea:	699b      	ldr	r3, [r3, #24]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071f6:	699b      	ldr	r3, [r3, #24]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	7c12      	ldrb	r2, [r2, #16]
 80071fc:	f107 0108 	add.w	r1, r7, #8
 8007200:	4610      	mov	r0, r2
 8007202:	4798      	blx	r3
 8007204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007206:	e00f      	b.n	8007228 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007208:	6839      	ldr	r1, [r7, #0]
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 fa30 	bl	8007670 <USBD_CtlError>
            err++;
 8007210:	7afb      	ldrb	r3, [r7, #11]
 8007212:	3301      	adds	r3, #1
 8007214:	72fb      	strb	r3, [r7, #11]
          break;
 8007216:	e007      	b.n	8007228 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa28 	bl	8007670 <USBD_CtlError>
          err++;
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	3301      	adds	r3, #1
 8007224:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8007226:	bf00      	nop
      }
      break;
 8007228:	e037      	b.n	800729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7c1b      	ldrb	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	f107 0208 	add.w	r2, r7, #8
 800723e:	4610      	mov	r0, r2
 8007240:	4798      	blx	r3
 8007242:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007244:	e029      	b.n	800729a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007246:	6839      	ldr	r1, [r7, #0]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 fa11 	bl	8007670 <USBD_CtlError>
        err++;
 800724e:	7afb      	ldrb	r3, [r7, #11]
 8007250:	3301      	adds	r3, #1
 8007252:	72fb      	strb	r3, [r7, #11]
      break;
 8007254:	e021      	b.n	800729a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7c1b      	ldrb	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10d      	bne.n	800727a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007266:	f107 0208 	add.w	r2, r7, #8
 800726a:	4610      	mov	r0, r2
 800726c:	4798      	blx	r3
 800726e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	3301      	adds	r3, #1
 8007274:	2207      	movs	r2, #7
 8007276:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007278:	e00f      	b.n	800729a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800727a:	6839      	ldr	r1, [r7, #0]
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 f9f7 	bl	8007670 <USBD_CtlError>
        err++;
 8007282:	7afb      	ldrb	r3, [r7, #11]
 8007284:	3301      	adds	r3, #1
 8007286:	72fb      	strb	r3, [r7, #11]
      break;
 8007288:	e007      	b.n	800729a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800728a:	6839      	ldr	r1, [r7, #0]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f9ef 	bl	8007670 <USBD_CtlError>
      err++;
 8007292:	7afb      	ldrb	r3, [r7, #11]
 8007294:	3301      	adds	r3, #1
 8007296:	72fb      	strb	r3, [r7, #11]
      break;
 8007298:	bf00      	nop
  }

  if (err != 0U)
 800729a:	7afb      	ldrb	r3, [r7, #11]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d11e      	bne.n	80072de <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	88db      	ldrh	r3, [r3, #6]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d016      	beq.n	80072d6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072a8:	893b      	ldrh	r3, [r7, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00e      	beq.n	80072cc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	88da      	ldrh	r2, [r3, #6]
 80072b2:	893b      	ldrh	r3, [r7, #8]
 80072b4:	4293      	cmp	r3, r2
 80072b6:	bf28      	it	cs
 80072b8:	4613      	movcs	r3, r2
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072be:	893b      	ldrh	r3, [r7, #8]
 80072c0:	461a      	mov	r2, r3
 80072c2:	68f9      	ldr	r1, [r7, #12]
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 fa44 	bl	8007752 <USBD_CtlSendData>
 80072ca:	e009      	b.n	80072e0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072cc:	6839      	ldr	r1, [r7, #0]
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f9ce 	bl	8007670 <USBD_CtlError>
 80072d4:	e004      	b.n	80072e0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fa95 	bl	8007806 <USBD_CtlSendStatus>
 80072dc:	e000      	b.n	80072e0 <USBD_GetDescriptor+0x2cc>
    return;
 80072de:	bf00      	nop
  }
}
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop

080072e8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	889b      	ldrh	r3, [r3, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d131      	bne.n	800735e <USBD_SetAddress+0x76>
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	88db      	ldrh	r3, [r3, #6]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d12d      	bne.n	800735e <USBD_SetAddress+0x76>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	885b      	ldrh	r3, [r3, #2]
 8007306:	2b7f      	cmp	r3, #127	; 0x7f
 8007308:	d829      	bhi.n	800735e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	885b      	ldrh	r3, [r3, #2]
 800730e:	b2db      	uxtb	r3, r3
 8007310:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007314:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800731c:	b2db      	uxtb	r3, r3
 800731e:	2b03      	cmp	r3, #3
 8007320:	d104      	bne.n	800732c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007322:	6839      	ldr	r1, [r7, #0]
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f9a3 	bl	8007670 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800732a:	e01d      	b.n	8007368 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	7bfa      	ldrb	r2, [r7, #15]
 8007330:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fe3f 	bl	8007fbc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa61 	bl	8007806 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007344:	7bfb      	ldrb	r3, [r7, #15]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d004      	beq.n	8007354 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2202      	movs	r2, #2
 800734e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007352:	e009      	b.n	8007368 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800735c:	e004      	b.n	8007368 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f985 	bl	8007670 <USBD_CtlError>
  }
}
 8007366:	bf00      	nop
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b084      	sub	sp, #16
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800737a:	2300      	movs	r3, #0
 800737c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	885b      	ldrh	r3, [r3, #2]
 8007382:	b2da      	uxtb	r2, r3
 8007384:	4b4c      	ldr	r3, [pc, #304]	; (80074b8 <USBD_SetConfig+0x148>)
 8007386:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007388:	4b4b      	ldr	r3, [pc, #300]	; (80074b8 <USBD_SetConfig+0x148>)
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d905      	bls.n	800739c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f96c 	bl	8007670 <USBD_CtlError>
    return USBD_FAIL;
 8007398:	2303      	movs	r3, #3
 800739a:	e088      	b.n	80074ae <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a2:	b2db      	uxtb	r3, r3
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d002      	beq.n	80073ae <USBD_SetConfig+0x3e>
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d025      	beq.n	80073f8 <USBD_SetConfig+0x88>
 80073ac:	e071      	b.n	8007492 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073ae:	4b42      	ldr	r3, [pc, #264]	; (80074b8 <USBD_SetConfig+0x148>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d01c      	beq.n	80073f0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80073b6:	4b40      	ldr	r3, [pc, #256]	; (80074b8 <USBD_SetConfig+0x148>)
 80073b8:	781b      	ldrb	r3, [r3, #0]
 80073ba:	461a      	mov	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073c0:	4b3d      	ldr	r3, [pc, #244]	; (80074b8 <USBD_SetConfig+0x148>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f7ff f949 	bl	800665e <USBD_SetClassConfig>
 80073cc:	4603      	mov	r3, r0
 80073ce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d004      	beq.n	80073e0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80073d6:	6839      	ldr	r1, [r7, #0]
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f949 	bl	8007670 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073de:	e065      	b.n	80074ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fa10 	bl	8007806 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2203      	movs	r2, #3
 80073ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073ee:	e05d      	b.n	80074ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fa08 	bl	8007806 <USBD_CtlSendStatus>
      break;
 80073f6:	e059      	b.n	80074ac <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073f8:	4b2f      	ldr	r3, [pc, #188]	; (80074b8 <USBD_SetConfig+0x148>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d112      	bne.n	8007426 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007408:	4b2b      	ldr	r3, [pc, #172]	; (80074b8 <USBD_SetConfig+0x148>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007412:	4b29      	ldr	r3, [pc, #164]	; (80074b8 <USBD_SetConfig+0x148>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7ff f93c 	bl	8006696 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f9f1 	bl	8007806 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007424:	e042      	b.n	80074ac <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8007426:	4b24      	ldr	r3, [pc, #144]	; (80074b8 <USBD_SetConfig+0x148>)
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	d02a      	beq.n	800748a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	b2db      	uxtb	r3, r3
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f7ff f92a 	bl	8006696 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007442:	4b1d      	ldr	r3, [pc, #116]	; (80074b8 <USBD_SetConfig+0x148>)
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	461a      	mov	r2, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800744c:	4b1a      	ldr	r3, [pc, #104]	; (80074b8 <USBD_SetConfig+0x148>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	4619      	mov	r1, r3
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7ff f903 	bl	800665e <USBD_SetClassConfig>
 8007458:	4603      	mov	r3, r0
 800745a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800745c:	7bfb      	ldrb	r3, [r7, #15]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00f      	beq.n	8007482 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f903 	bl	8007670 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	685b      	ldr	r3, [r3, #4]
 800746e:	b2db      	uxtb	r3, r3
 8007470:	4619      	mov	r1, r3
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7ff f90f 	bl	8006696 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2202      	movs	r2, #2
 800747c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007480:	e014      	b.n	80074ac <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 f9bf 	bl	8007806 <USBD_CtlSendStatus>
      break;
 8007488:	e010      	b.n	80074ac <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 f9bb 	bl	8007806 <USBD_CtlSendStatus>
      break;
 8007490:	e00c      	b.n	80074ac <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f8eb 	bl	8007670 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800749a:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <USBD_SetConfig+0x148>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7ff f8f8 	bl	8006696 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074a6:	2303      	movs	r3, #3
 80074a8:	73fb      	strb	r3, [r7, #15]
      break;
 80074aa:	bf00      	nop
  }

  return ret;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3710      	adds	r7, #16
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	2000017a 	.word	0x2000017a

080074bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	88db      	ldrh	r3, [r3, #6]
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d004      	beq.n	80074d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074ce:	6839      	ldr	r1, [r7, #0]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f8cd 	bl	8007670 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074d6:	e023      	b.n	8007520 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b02      	cmp	r3, #2
 80074e2:	dc02      	bgt.n	80074ea <USBD_GetConfig+0x2e>
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dc03      	bgt.n	80074f0 <USBD_GetConfig+0x34>
 80074e8:	e015      	b.n	8007516 <USBD_GetConfig+0x5a>
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d00b      	beq.n	8007506 <USBD_GetConfig+0x4a>
 80074ee:	e012      	b.n	8007516 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2200      	movs	r2, #0
 80074f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	3308      	adds	r3, #8
 80074fa:	2201      	movs	r2, #1
 80074fc:	4619      	mov	r1, r3
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f927 	bl	8007752 <USBD_CtlSendData>
        break;
 8007504:	e00c      	b.n	8007520 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	3304      	adds	r3, #4
 800750a:	2201      	movs	r2, #1
 800750c:	4619      	mov	r1, r3
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f91f 	bl	8007752 <USBD_CtlSendData>
        break;
 8007514:	e004      	b.n	8007520 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007516:	6839      	ldr	r1, [r7, #0]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f8a9 	bl	8007670 <USBD_CtlError>
        break;
 800751e:	bf00      	nop
}
 8007520:	bf00      	nop
 8007522:	3708      	adds	r7, #8
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007538:	b2db      	uxtb	r3, r3
 800753a:	3b01      	subs	r3, #1
 800753c:	2b02      	cmp	r3, #2
 800753e:	d81e      	bhi.n	800757e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	88db      	ldrh	r3, [r3, #6]
 8007544:	2b02      	cmp	r3, #2
 8007546:	d004      	beq.n	8007552 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007548:	6839      	ldr	r1, [r7, #0]
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f890 	bl	8007670 <USBD_CtlError>
        break;
 8007550:	e01a      	b.n	8007588 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2201      	movs	r2, #1
 8007556:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800755e:	2b00      	cmp	r3, #0
 8007560:	d005      	beq.n	800756e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	f043 0202 	orr.w	r2, r3, #2
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	330c      	adds	r3, #12
 8007572:	2202      	movs	r2, #2
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f8eb 	bl	8007752 <USBD_CtlSendData>
      break;
 800757c:	e004      	b.n	8007588 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f875 	bl	8007670 <USBD_CtlError>
      break;
 8007586:	bf00      	nop
  }
}
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
 8007598:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	885b      	ldrh	r3, [r3, #2]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d106      	bne.n	80075b0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f92b 	bl	8007806 <USBD_CtlSendStatus>
  }
}
 80075b0:	bf00      	nop
 80075b2:	3708      	adds	r7, #8
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}

080075b8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	3b01      	subs	r3, #1
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	d80b      	bhi.n	80075e8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	885b      	ldrh	r3, [r3, #2]
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d10c      	bne.n	80075f2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f910 	bl	8007806 <USBD_CtlSendStatus>
      }
      break;
 80075e6:	e004      	b.n	80075f2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f840 	bl	8007670 <USBD_CtlError>
      break;
 80075f0:	e000      	b.n	80075f4 <USBD_ClrFeature+0x3c>
      break;
 80075f2:	bf00      	nop
  }
}
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}

080075fc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b084      	sub	sp, #16
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
 8007604:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3301      	adds	r3, #1
 8007616:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	781a      	ldrb	r2, [r3, #0]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3301      	adds	r3, #1
 8007624:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff fabc 	bl	8006ba4 <SWAPBYTE>
 800762c:	4603      	mov	r3, r0
 800762e:	461a      	mov	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3301      	adds	r3, #1
 8007638:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f7ff faaf 	bl	8006ba4 <SWAPBYTE>
 8007646:	4603      	mov	r3, r0
 8007648:	461a      	mov	r2, r3
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3301      	adds	r3, #1
 8007652:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800765a:	68f8      	ldr	r0, [r7, #12]
 800765c:	f7ff faa2 	bl	8006ba4 <SWAPBYTE>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	80da      	strh	r2, [r3, #6]
}
 8007668:	bf00      	nop
 800766a:	3710      	adds	r7, #16
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800767a:	2180      	movs	r1, #128	; 0x80
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fc33 	bl	8007ee8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007682:	2100      	movs	r1, #0
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fc2f 	bl	8007ee8 <USBD_LL_StallEP>
}
 800768a:	bf00      	nop
 800768c:	3708      	adds	r7, #8
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007692:	b580      	push	{r7, lr}
 8007694:	b086      	sub	sp, #24
 8007696:	af00      	add	r7, sp, #0
 8007698:	60f8      	str	r0, [r7, #12]
 800769a:	60b9      	str	r1, [r7, #8]
 800769c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800769e:	2300      	movs	r3, #0
 80076a0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d036      	beq.n	8007716 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076ac:	6938      	ldr	r0, [r7, #16]
 80076ae:	f000 f836 	bl	800771e <USBD_GetLen>
 80076b2:	4603      	mov	r3, r0
 80076b4:	3301      	adds	r3, #1
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	b29a      	uxth	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	4413      	add	r3, r2
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	7812      	ldrb	r2, [r2, #0]
 80076ca:	701a      	strb	r2, [r3, #0]
  idx++;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	3301      	adds	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	4413      	add	r3, r2
 80076d8:	2203      	movs	r2, #3
 80076da:	701a      	strb	r2, [r3, #0]
  idx++;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	3301      	adds	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076e2:	e013      	b.n	800770c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076e4:	7dfb      	ldrb	r3, [r7, #23]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	4413      	add	r3, r2
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	7812      	ldrb	r2, [r2, #0]
 80076ee:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3301      	adds	r3, #1
 80076f4:	613b      	str	r3, [r7, #16]
    idx++;
 80076f6:	7dfb      	ldrb	r3, [r7, #23]
 80076f8:	3301      	adds	r3, #1
 80076fa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	4413      	add	r3, r2
 8007702:	2200      	movs	r2, #0
 8007704:	701a      	strb	r2, [r3, #0]
    idx++;
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	3301      	adds	r3, #1
 800770a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e7      	bne.n	80076e4 <USBD_GetString+0x52>
 8007714:	e000      	b.n	8007718 <USBD_GetString+0x86>
    return;
 8007716:	bf00      	nop
  }
}
 8007718:	3718      	adds	r7, #24
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}

0800771e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800771e:	b480      	push	{r7}
 8007720:	b085      	sub	sp, #20
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800772e:	e005      	b.n	800773c <USBD_GetLen+0x1e>
  {
    len++;
 8007730:	7bfb      	ldrb	r3, [r7, #15]
 8007732:	3301      	adds	r3, #1
 8007734:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	3301      	adds	r3, #1
 800773a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1f5      	bne.n	8007730 <USBD_GetLen+0x12>
  }

  return len;
 8007744:	7bfb      	ldrb	r3, [r7, #15]
}
 8007746:	4618      	mov	r0, r3
 8007748:	3714      	adds	r7, #20
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b084      	sub	sp, #16
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2202      	movs	r2, #2
 8007762:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	2100      	movs	r1, #0
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fc3e 	bl	8007ffa <USBD_LL_Transmit>

  return USBD_OK;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3710      	adds	r7, #16
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68ba      	ldr	r2, [r7, #8]
 8007798:	2100      	movs	r1, #0
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f000 fc2d 	bl	8007ffa <USBD_LL_Transmit>

  return USBD_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3710      	adds	r7, #16
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}

080077aa <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80077aa:	b580      	push	{r7, lr}
 80077ac:	b084      	sub	sp, #16
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	60f8      	str	r0, [r7, #12]
 80077b2:	60b9      	str	r1, [r7, #8]
 80077b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2203      	movs	r2, #3
 80077ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	2100      	movs	r1, #0
 80077d4:	68f8      	ldr	r0, [r7, #12]
 80077d6:	f000 fc31 	bl	800803c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077da:	2300      	movs	r3, #0
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	2100      	movs	r1, #0
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 fc20 	bl	800803c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2204      	movs	r2, #4
 8007812:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007816:	2300      	movs	r3, #0
 8007818:	2200      	movs	r2, #0
 800781a:	2100      	movs	r1, #0
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fbec 	bl	8007ffa <USBD_LL_Transmit>

  return USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2205      	movs	r2, #5
 8007838:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800783c:	2300      	movs	r3, #0
 800783e:	2200      	movs	r2, #0
 8007840:	2100      	movs	r1, #0
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 fbfa 	bl	800803c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007848:	2300      	movs	r3, #0
}
 800784a:	4618      	mov	r0, r3
 800784c:	3708      	adds	r7, #8
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
	...

08007854 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007858:	2200      	movs	r2, #0
 800785a:	4912      	ldr	r1, [pc, #72]	; (80078a4 <MX_USB_DEVICE_Init+0x50>)
 800785c:	4812      	ldr	r0, [pc, #72]	; (80078a8 <MX_USB_DEVICE_Init+0x54>)
 800785e:	f7fe fe90 	bl	8006582 <USBD_Init>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007868:	f7f9 fc26 	bl	80010b8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 800786c:	490f      	ldr	r1, [pc, #60]	; (80078ac <MX_USB_DEVICE_Init+0x58>)
 800786e:	480e      	ldr	r0, [pc, #56]	; (80078a8 <MX_USB_DEVICE_Init+0x54>)
 8007870:	f7fe feb7 	bl	80065e2 <USBD_RegisterClass>
 8007874:	4603      	mov	r3, r0
 8007876:	2b00      	cmp	r3, #0
 8007878:	d001      	beq.n	800787e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800787a:	f7f9 fc1d 	bl	80010b8 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800787e:	490c      	ldr	r1, [pc, #48]	; (80078b0 <MX_USB_DEVICE_Init+0x5c>)
 8007880:	4809      	ldr	r0, [pc, #36]	; (80078a8 <MX_USB_DEVICE_Init+0x54>)
 8007882:	f7fe fe69 	bl	8006558 <USBD_CUSTOM_HID_RegisterInterface>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800788c:	f7f9 fc14 	bl	80010b8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007890:	4805      	ldr	r0, [pc, #20]	; (80078a8 <MX_USB_DEVICE_Init+0x54>)
 8007892:	f7fe fecd 	bl	8006630 <USBD_Start>
 8007896:	4603      	mov	r3, r0
 8007898:	2b00      	cmp	r3, #0
 800789a:	d001      	beq.n	80078a0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800789c:	f7f9 fc0c 	bl	80010b8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078a0:	bf00      	nop
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000108 	.word	0x20000108
 80078a8:	200002ec 	.word	0x200002ec
 80078ac:	2000000c 	.word	0x2000000c
 80078b0:	200000f8 	.word	0x200000f8

080078b4 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80078b4:	b480      	push	{r7}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078b8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80078c4:	b480      	push	{r7}
 80078c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80078c8:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b082      	sub	sp, #8
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	460a      	mov	r2, r1
 80078de:	71fb      	strb	r3, [r7, #7]
 80078e0:	4613      	mov	r3, r2
 80078e2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS);
 80078e4:	4803      	ldr	r0, [pc, #12]	; (80078f4 <CUSTOM_HID_OutEvent_FS+0x20>)
 80078e6:	f7fe fdea 	bl	80064be <USBD_CUSTOM_HID_ReceivePacket>

  return (USBD_OK);
 80078ea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	200002ec 	.word	0x200002ec

080078f8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	4603      	mov	r3, r0
 8007900:	6039      	str	r1, [r7, #0]
 8007902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	2212      	movs	r2, #18
 8007908:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800790a:	4b03      	ldr	r3, [pc, #12]	; (8007918 <USBD_FS_DeviceDescriptor+0x20>)
}
 800790c:	4618      	mov	r0, r3
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	20000124 	.word	0x20000124

0800791c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	2204      	movs	r2, #4
 800792c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800792e:	4b03      	ldr	r3, [pc, #12]	; (800793c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr
 800793c:	20000138 	.word	0x20000138

08007940 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	4603      	mov	r3, r0
 8007948:	6039      	str	r1, [r7, #0]
 800794a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d105      	bne.n	800795e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007952:	683a      	ldr	r2, [r7, #0]
 8007954:	4907      	ldr	r1, [pc, #28]	; (8007974 <USBD_FS_ProductStrDescriptor+0x34>)
 8007956:	4808      	ldr	r0, [pc, #32]	; (8007978 <USBD_FS_ProductStrDescriptor+0x38>)
 8007958:	f7ff fe9b 	bl	8007692 <USBD_GetString>
 800795c:	e004      	b.n	8007968 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	4904      	ldr	r1, [pc, #16]	; (8007974 <USBD_FS_ProductStrDescriptor+0x34>)
 8007962:	4805      	ldr	r0, [pc, #20]	; (8007978 <USBD_FS_ProductStrDescriptor+0x38>)
 8007964:	f7ff fe95 	bl	8007692 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007968:	4b02      	ldr	r3, [pc, #8]	; (8007974 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	200005bc 	.word	0x200005bc
 8007978:	08008298 	.word	0x08008298

0800797c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	4603      	mov	r3, r0
 8007984:	6039      	str	r1, [r7, #0]
 8007986:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007988:	683a      	ldr	r2, [r7, #0]
 800798a:	4904      	ldr	r1, [pc, #16]	; (800799c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800798c:	4804      	ldr	r0, [pc, #16]	; (80079a0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800798e:	f7ff fe80 	bl	8007692 <USBD_GetString>
  return USBD_StrDesc;
 8007992:	4b02      	ldr	r3, [pc, #8]	; (800799c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	200005bc 	.word	0x200005bc
 80079a0:	080082b8 	.word	0x080082b8

080079a4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	4603      	mov	r3, r0
 80079ac:	6039      	str	r1, [r7, #0]
 80079ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	221a      	movs	r2, #26
 80079b4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079b6:	f000 f843 	bl	8007a40 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079ba:	4b02      	ldr	r3, [pc, #8]	; (80079c4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	2000013c 	.word	0x2000013c

080079c8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	4603      	mov	r3, r0
 80079d0:	6039      	str	r1, [r7, #0]
 80079d2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079d4:	79fb      	ldrb	r3, [r7, #7]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d105      	bne.n	80079e6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4907      	ldr	r1, [pc, #28]	; (80079fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80079de:	4808      	ldr	r0, [pc, #32]	; (8007a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079e0:	f7ff fe57 	bl	8007692 <USBD_GetString>
 80079e4:	e004      	b.n	80079f0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079e6:	683a      	ldr	r2, [r7, #0]
 80079e8:	4904      	ldr	r1, [pc, #16]	; (80079fc <USBD_FS_ConfigStrDescriptor+0x34>)
 80079ea:	4805      	ldr	r0, [pc, #20]	; (8007a00 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079ec:	f7ff fe51 	bl	8007692 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079f0:	4b02      	ldr	r3, [pc, #8]	; (80079fc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	200005bc 	.word	0x200005bc
 8007a00:	080082cc 	.word	0x080082cc

08007a04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	6039      	str	r1, [r7, #0]
 8007a0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a10:	79fb      	ldrb	r3, [r7, #7]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d105      	bne.n	8007a22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a16:	683a      	ldr	r2, [r7, #0]
 8007a18:	4907      	ldr	r1, [pc, #28]	; (8007a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a1a:	4808      	ldr	r0, [pc, #32]	; (8007a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a1c:	f7ff fe39 	bl	8007692 <USBD_GetString>
 8007a20:	e004      	b.n	8007a2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	4904      	ldr	r1, [pc, #16]	; (8007a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a26:	4805      	ldr	r0, [pc, #20]	; (8007a3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a28:	f7ff fe33 	bl	8007692 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a2c:	4b02      	ldr	r3, [pc, #8]	; (8007a38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3708      	adds	r7, #8
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	200005bc 	.word	0x200005bc
 8007a3c:	080082e0 	.word	0x080082e0

08007a40 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a46:	4b0f      	ldr	r3, [pc, #60]	; (8007a84 <Get_SerialNum+0x44>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <Get_SerialNum+0x48>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a52:	4b0e      	ldr	r3, [pc, #56]	; (8007a8c <Get_SerialNum+0x4c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d009      	beq.n	8007a7a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a66:	2208      	movs	r2, #8
 8007a68:	4909      	ldr	r1, [pc, #36]	; (8007a90 <Get_SerialNum+0x50>)
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f814 	bl	8007a98 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a70:	2204      	movs	r2, #4
 8007a72:	4908      	ldr	r1, [pc, #32]	; (8007a94 <Get_SerialNum+0x54>)
 8007a74:	68b8      	ldr	r0, [r7, #8]
 8007a76:	f000 f80f 	bl	8007a98 <IntToUnicode>
  }
}
 8007a7a:	bf00      	nop
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	1fff7a10 	.word	0x1fff7a10
 8007a88:	1fff7a14 	.word	0x1fff7a14
 8007a8c:	1fff7a18 	.word	0x1fff7a18
 8007a90:	2000013e 	.word	0x2000013e
 8007a94:	2000014e 	.word	0x2000014e

08007a98 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007aaa:	2300      	movs	r3, #0
 8007aac:	75fb      	strb	r3, [r7, #23]
 8007aae:	e027      	b.n	8007b00 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	0f1b      	lsrs	r3, r3, #28
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d80b      	bhi.n	8007ad0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	0f1b      	lsrs	r3, r3, #28
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	7dfb      	ldrb	r3, [r7, #23]
 8007ac0:	005b      	lsls	r3, r3, #1
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	440b      	add	r3, r1
 8007ac8:	3230      	adds	r2, #48	; 0x30
 8007aca:	b2d2      	uxtb	r2, r2
 8007acc:	701a      	strb	r2, [r3, #0]
 8007ace:	e00a      	b.n	8007ae6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	0f1b      	lsrs	r3, r3, #28
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4619      	mov	r1, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	440b      	add	r3, r1
 8007ae0:	3237      	adds	r2, #55	; 0x37
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	011b      	lsls	r3, r3, #4
 8007aea:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007aec:	7dfb      	ldrb	r3, [r7, #23]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	3301      	adds	r3, #1
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4413      	add	r3, r2
 8007af6:	2200      	movs	r2, #0
 8007af8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007afa:	7dfb      	ldrb	r3, [r7, #23]
 8007afc:	3301      	adds	r3, #1
 8007afe:	75fb      	strb	r3, [r7, #23]
 8007b00:	7dfa      	ldrb	r2, [r7, #23]
 8007b02:	79fb      	ldrb	r3, [r7, #7]
 8007b04:	429a      	cmp	r2, r3
 8007b06:	d3d3      	bcc.n	8007ab0 <IntToUnicode+0x18>
  }
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	371c      	adds	r7, #28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b14:	4770      	bx	lr
	...

08007b18 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b08a      	sub	sp, #40	; 0x28
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	605a      	str	r2, [r3, #4]
 8007b2a:	609a      	str	r2, [r3, #8]
 8007b2c:	60da      	str	r2, [r3, #12]
 8007b2e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b38:	d13a      	bne.n	8007bb0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	613b      	str	r3, [r7, #16]
 8007b3e:	4b1e      	ldr	r3, [pc, #120]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	4a1d      	ldr	r2, [pc, #116]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b44:	f043 0301 	orr.w	r3, r3, #1
 8007b48:	6313      	str	r3, [r2, #48]	; 0x30
 8007b4a:	4b1b      	ldr	r3, [pc, #108]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	613b      	str	r3, [r7, #16]
 8007b54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b60:	2300      	movs	r3, #0
 8007b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b64:	2303      	movs	r3, #3
 8007b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b68:	230a      	movs	r3, #10
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b6c:	f107 0314 	add.w	r3, r7, #20
 8007b70:	4619      	mov	r1, r3
 8007b72:	4812      	ldr	r0, [pc, #72]	; (8007bbc <HAL_PCD_MspInit+0xa4>)
 8007b74:	f7f9 fdd6 	bl	8001724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b78:	4b0f      	ldr	r3, [pc, #60]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	4a0e      	ldr	r2, [pc, #56]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b82:	6353      	str	r3, [r2, #52]	; 0x34
 8007b84:	2300      	movs	r3, #0
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	4b0b      	ldr	r3, [pc, #44]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b8c:	4a0a      	ldr	r2, [pc, #40]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b92:	6453      	str	r3, [r2, #68]	; 0x44
 8007b94:	4b08      	ldr	r3, [pc, #32]	; (8007bb8 <HAL_PCD_MspInit+0xa0>)
 8007b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b9c:	60fb      	str	r3, [r7, #12]
 8007b9e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	2100      	movs	r1, #0
 8007ba4:	2043      	movs	r0, #67	; 0x43
 8007ba6:	f7f9 fd86 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007baa:	2043      	movs	r0, #67	; 0x43
 8007bac:	f7f9 fd9f 	bl	80016ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007bb0:	bf00      	nop
 8007bb2:	3728      	adds	r7, #40	; 0x28
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	40020000 	.word	0x40020000

08007bc0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f7fe fd75 	bl	80066c6 <USBD_LL_SetupStage>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	6879      	ldr	r1, [r7, #4]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	00db      	lsls	r3, r3, #3
 8007bfe:	1a9b      	subs	r3, r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	440b      	add	r3, r1
 8007c04:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f7fe fdaf 	bl	8006770 <USBD_LL_DataOutStage>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	460b      	mov	r3, r1
 8007c24:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8007c2c:	78fa      	ldrb	r2, [r7, #3]
 8007c2e:	6879      	ldr	r1, [r7, #4]
 8007c30:	4613      	mov	r3, r2
 8007c32:	00db      	lsls	r3, r3, #3
 8007c34:	1a9b      	subs	r3, r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	440b      	add	r3, r1
 8007c3a:	3348      	adds	r3, #72	; 0x48
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	78fb      	ldrb	r3, [r7, #3]
 8007c40:	4619      	mov	r1, r3
 8007c42:	f7fe fdf8 	bl	8006836 <USBD_LL_DataInStage>
}
 8007c46:	bf00      	nop
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}

08007c4e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f7fe ff0c 	bl	8006a7a <USBD_LL_SOF>
}
 8007c62:	bf00      	nop
 8007c64:	3708      	adds	r7, #8
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}

08007c6a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c6a:	b580      	push	{r7, lr}
 8007c6c:	b084      	sub	sp, #16
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c72:	2301      	movs	r3, #1
 8007c74:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d001      	beq.n	8007c82 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c7e:	f7f9 fa1b 	bl	80010b8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c88:	7bfa      	ldrb	r2, [r7, #15]
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fe feb6 	bl	80069fe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7fe fe62 	bl	8006962 <USBD_LL_Reset>
}
 8007c9e:	bf00      	nop
 8007ca0:	3710      	adds	r7, #16
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
	...

08007ca8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7fe feb1 	bl	8006a1e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	6812      	ldr	r2, [r2, #0]
 8007cca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cce:	f043 0301 	orr.w	r3, r3, #1
 8007cd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d005      	beq.n	8007ce8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <HAL_PCD_SuspendCallback+0x48>)
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	4a03      	ldr	r2, [pc, #12]	; (8007cf0 <HAL_PCD_SuspendCallback+0x48>)
 8007ce2:	f043 0306 	orr.w	r3, r3, #6
 8007ce6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ce8:	bf00      	nop
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	e000ed00 	.word	0xe000ed00

08007cf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b082      	sub	sp, #8
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d02:	4618      	mov	r0, r3
 8007d04:	f7fe fea1 	bl	8006a4a <USBD_LL_Resume>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b082      	sub	sp, #8
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	460b      	mov	r3, r1
 8007d1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d22:	78fa      	ldrb	r2, [r7, #3]
 8007d24:	4611      	mov	r1, r2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7fe feef 	bl	8006b0a <USBD_LL_IsoOUTIncomplete>
}
 8007d2c:	bf00      	nop
 8007d2e:	3708      	adds	r7, #8
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d46:	78fa      	ldrb	r2, [r7, #3]
 8007d48:	4611      	mov	r1, r2
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7fe feb7 	bl	8006abe <USBD_LL_IsoINIncomplete>
}
 8007d50:	bf00      	nop
 8007d52:	3708      	adds	r7, #8
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}

08007d58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe fef5 	bl	8006b56 <USBD_LL_DevConnected>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fef2 	bl	8006b6c <USBD_LL_DevDisconnected>
}
 8007d88:	bf00      	nop
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d13c      	bne.n	8007e1a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007da0:	4a20      	ldr	r2, [pc, #128]	; (8007e24 <USBD_LL_Init+0x94>)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a1e      	ldr	r2, [pc, #120]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007db0:	4b1c      	ldr	r3, [pc, #112]	; (8007e24 <USBD_LL_Init+0x94>)
 8007db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007db8:	4b1a      	ldr	r3, [pc, #104]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dba:	2204      	movs	r2, #4
 8007dbc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007dbe:	4b19      	ldr	r3, [pc, #100]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007dc4:	4b17      	ldr	r3, [pc, #92]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007dca:	4b16      	ldr	r3, [pc, #88]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dcc:	2202      	movs	r2, #2
 8007dce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007dd0:	4b14      	ldr	r3, [pc, #80]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007dd6:	4b13      	ldr	r3, [pc, #76]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dd8:	2200      	movs	r2, #0
 8007dda:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007ddc:	4b11      	ldr	r3, [pc, #68]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007de2:	4b10      	ldr	r3, [pc, #64]	; (8007e24 <USBD_LL_Init+0x94>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007de8:	4b0e      	ldr	r3, [pc, #56]	; (8007e24 <USBD_LL_Init+0x94>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dee:	480d      	ldr	r0, [pc, #52]	; (8007e24 <USBD_LL_Init+0x94>)
 8007df0:	f7fa fdcb 	bl	800298a <HAL_PCD_Init>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dfa:	f7f9 f95d 	bl	80010b8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dfe:	2180      	movs	r1, #128	; 0x80
 8007e00:	4808      	ldr	r0, [pc, #32]	; (8007e24 <USBD_LL_Init+0x94>)
 8007e02:	f7fb ff10 	bl	8003c26 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007e06:	2240      	movs	r2, #64	; 0x40
 8007e08:	2100      	movs	r1, #0
 8007e0a:	4806      	ldr	r0, [pc, #24]	; (8007e24 <USBD_LL_Init+0x94>)
 8007e0c:	f7fb fec4 	bl	8003b98 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007e10:	2280      	movs	r2, #128	; 0x80
 8007e12:	2101      	movs	r1, #1
 8007e14:	4803      	ldr	r0, [pc, #12]	; (8007e24 <USBD_LL_Init+0x94>)
 8007e16:	f7fb febf 	bl	8003b98 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007e1a:	2300      	movs	r3, #0
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3708      	adds	r7, #8
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}
 8007e24:	200007bc 	.word	0x200007bc

08007e28 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b084      	sub	sp, #16
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7fa fec0 	bl	8002bc4 <HAL_PCD_Start>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f000 f930 	bl	80080b0 <USBD_Get_USB_Status>
 8007e50:	4603      	mov	r3, r0
 8007e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3710      	adds	r7, #16
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}

08007e5e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e5e:	b580      	push	{r7, lr}
 8007e60:	b084      	sub	sp, #16
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
 8007e66:	4608      	mov	r0, r1
 8007e68:	4611      	mov	r1, r2
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	70fb      	strb	r3, [r7, #3]
 8007e70:	460b      	mov	r3, r1
 8007e72:	70bb      	strb	r3, [r7, #2]
 8007e74:	4613      	mov	r3, r2
 8007e76:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007e86:	78bb      	ldrb	r3, [r7, #2]
 8007e88:	883a      	ldrh	r2, [r7, #0]
 8007e8a:	78f9      	ldrb	r1, [r7, #3]
 8007e8c:	f7fb faa4 	bl	80033d8 <HAL_PCD_EP_Open>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f90a 	bl	80080b0 <USBD_Get_USB_Status>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b084      	sub	sp, #16
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ec4:	78fa      	ldrb	r2, [r7, #3]
 8007ec6:	4611      	mov	r1, r2
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7fb faed 	bl	80034a8 <HAL_PCD_EP_Close>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed2:	7bfb      	ldrb	r3, [r7, #15]
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f000 f8eb 	bl	80080b0 <USBD_Get_USB_Status>
 8007eda:	4603      	mov	r3, r0
 8007edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f02:	78fa      	ldrb	r2, [r7, #3]
 8007f04:	4611      	mov	r1, r2
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7fb fbad 	bl	8003666 <HAL_PCD_EP_SetStall>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f10:	7bfb      	ldrb	r3, [r7, #15]
 8007f12:	4618      	mov	r0, r3
 8007f14:	f000 f8cc 	bl	80080b0 <USBD_Get_USB_Status>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3710      	adds	r7, #16
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f32:	2300      	movs	r3, #0
 8007f34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f36:	2300      	movs	r3, #0
 8007f38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fb fbf2 	bl	800372e <HAL_PCD_EP_ClrStall>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	4618      	mov	r0, r3
 8007f52:	f000 f8ad 	bl	80080b0 <USBD_Get_USB_Status>
 8007f56:	4603      	mov	r3, r0
 8007f58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007f76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	da0b      	bge.n	8007f98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f80:	78fb      	ldrb	r3, [r7, #3]
 8007f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f86:	68f9      	ldr	r1, [r7, #12]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	333e      	adds	r3, #62	; 0x3e
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	e00b      	b.n	8007fb0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f9e:	68f9      	ldr	r1, [r7, #12]
 8007fa0:	4613      	mov	r3, r2
 8007fa2:	00db      	lsls	r3, r3, #3
 8007fa4:	1a9b      	subs	r3, r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	440b      	add	r3, r1
 8007faa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007fae:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3714      	adds	r7, #20
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fb f9d7 	bl	800338e <HAL_PCD_SetAddress>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f862 	bl	80080b0 <USBD_Get_USB_Status>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b086      	sub	sp, #24
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	60f8      	str	r0, [r7, #12]
 8008002:	607a      	str	r2, [r7, #4]
 8008004:	603b      	str	r3, [r7, #0]
 8008006:	460b      	mov	r3, r1
 8008008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800e:	2300      	movs	r3, #0
 8008010:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008018:	7af9      	ldrb	r1, [r7, #11]
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	f7fb fad8 	bl	80035d2 <HAL_PCD_EP_Transmit>
 8008022:	4603      	mov	r3, r0
 8008024:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008026:	7dfb      	ldrb	r3, [r7, #23]
 8008028:	4618      	mov	r0, r3
 800802a:	f000 f841 	bl	80080b0 <USBD_Get_USB_Status>
 800802e:	4603      	mov	r3, r0
 8008030:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008032:	7dbb      	ldrb	r3, [r7, #22]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b086      	sub	sp, #24
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	607a      	str	r2, [r7, #4]
 8008046:	603b      	str	r3, [r7, #0]
 8008048:	460b      	mov	r3, r1
 800804a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800805a:	7af9      	ldrb	r1, [r7, #11]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	687a      	ldr	r2, [r7, #4]
 8008060:	f7fb fa6c 	bl	800353c <HAL_PCD_EP_Receive>
 8008064:	4603      	mov	r3, r0
 8008066:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	4618      	mov	r0, r3
 800806c:	f000 f820 	bl	80080b0 <USBD_Get_USB_Status>
 8008070:	4603      	mov	r3, r0
 8008072:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008074:	7dbb      	ldrb	r3, [r7, #22]
}
 8008076:	4618      	mov	r0, r3
 8008078:	3718      	adds	r7, #24
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
	...

08008080 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008088:	4b03      	ldr	r3, [pc, #12]	; (8008098 <USBD_static_malloc+0x18>)
}
 800808a:	4618      	mov	r0, r3
 800808c:	370c      	adds	r7, #12
 800808e:	46bd      	mov	sp, r7
 8008090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	2000017c 	.word	0x2000017c

0800809c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800809c:	b480      	push	{r7}
 800809e:	b083      	sub	sp, #12
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]

}
 80080a4:	bf00      	nop
 80080a6:	370c      	adds	r7, #12
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80080b0:	b480      	push	{r7}
 80080b2:	b085      	sub	sp, #20
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	4603      	mov	r3, r0
 80080b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	2b03      	cmp	r3, #3
 80080c2:	d817      	bhi.n	80080f4 <USBD_Get_USB_Status+0x44>
 80080c4:	a201      	add	r2, pc, #4	; (adr r2, 80080cc <USBD_Get_USB_Status+0x1c>)
 80080c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ca:	bf00      	nop
 80080cc:	080080dd 	.word	0x080080dd
 80080d0:	080080e3 	.word	0x080080e3
 80080d4:	080080e9 	.word	0x080080e9
 80080d8:	080080ef 	.word	0x080080ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
    break;
 80080e0:	e00b      	b.n	80080fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080e2:	2303      	movs	r3, #3
 80080e4:	73fb      	strb	r3, [r7, #15]
    break;
 80080e6:	e008      	b.n	80080fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080e8:	2301      	movs	r3, #1
 80080ea:	73fb      	strb	r3, [r7, #15]
    break;
 80080ec:	e005      	b.n	80080fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080ee:	2303      	movs	r3, #3
 80080f0:	73fb      	strb	r3, [r7, #15]
    break;
 80080f2:	e002      	b.n	80080fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080f4:	2303      	movs	r3, #3
 80080f6:	73fb      	strb	r3, [r7, #15]
    break;
 80080f8:	bf00      	nop
  }
  return usb_status;
 80080fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3714      	adds	r7, #20
 8008100:	46bd      	mov	sp, r7
 8008102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008106:	4770      	bx	lr

08008108 <__libc_init_array>:
 8008108:	b570      	push	{r4, r5, r6, lr}
 800810a:	4d0d      	ldr	r5, [pc, #52]	; (8008140 <__libc_init_array+0x38>)
 800810c:	4c0d      	ldr	r4, [pc, #52]	; (8008144 <__libc_init_array+0x3c>)
 800810e:	1b64      	subs	r4, r4, r5
 8008110:	10a4      	asrs	r4, r4, #2
 8008112:	2600      	movs	r6, #0
 8008114:	42a6      	cmp	r6, r4
 8008116:	d109      	bne.n	800812c <__libc_init_array+0x24>
 8008118:	4d0b      	ldr	r5, [pc, #44]	; (8008148 <__libc_init_array+0x40>)
 800811a:	4c0c      	ldr	r4, [pc, #48]	; (800814c <__libc_init_array+0x44>)
 800811c:	f000 f82e 	bl	800817c <_init>
 8008120:	1b64      	subs	r4, r4, r5
 8008122:	10a4      	asrs	r4, r4, #2
 8008124:	2600      	movs	r6, #0
 8008126:	42a6      	cmp	r6, r4
 8008128:	d105      	bne.n	8008136 <__libc_init_array+0x2e>
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008130:	4798      	blx	r3
 8008132:	3601      	adds	r6, #1
 8008134:	e7ee      	b.n	8008114 <__libc_init_array+0xc>
 8008136:	f855 3b04 	ldr.w	r3, [r5], #4
 800813a:	4798      	blx	r3
 800813c:	3601      	adds	r6, #1
 800813e:	e7f2      	b.n	8008126 <__libc_init_array+0x1e>
 8008140:	08008318 	.word	0x08008318
 8008144:	08008318 	.word	0x08008318
 8008148:	08008318 	.word	0x08008318
 800814c:	0800831c 	.word	0x0800831c

08008150 <memcpy>:
 8008150:	440a      	add	r2, r1
 8008152:	4291      	cmp	r1, r2
 8008154:	f100 33ff 	add.w	r3, r0, #4294967295
 8008158:	d100      	bne.n	800815c <memcpy+0xc>
 800815a:	4770      	bx	lr
 800815c:	b510      	push	{r4, lr}
 800815e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008162:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008166:	4291      	cmp	r1, r2
 8008168:	d1f9      	bne.n	800815e <memcpy+0xe>
 800816a:	bd10      	pop	{r4, pc}

0800816c <memset>:
 800816c:	4402      	add	r2, r0
 800816e:	4603      	mov	r3, r0
 8008170:	4293      	cmp	r3, r2
 8008172:	d100      	bne.n	8008176 <memset+0xa>
 8008174:	4770      	bx	lr
 8008176:	f803 1b01 	strb.w	r1, [r3], #1
 800817a:	e7f9      	b.n	8008170 <memset+0x4>

0800817c <_init>:
 800817c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817e:	bf00      	nop
 8008180:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008182:	bc08      	pop	{r3}
 8008184:	469e      	mov	lr, r3
 8008186:	4770      	bx	lr

08008188 <_fini>:
 8008188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818a:	bf00      	nop
 800818c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800818e:	bc08      	pop	{r3}
 8008190:	469e      	mov	lr, r3
 8008192:	4770      	bx	lr
